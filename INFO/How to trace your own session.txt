How to trace your own session:
==============================

Step 1:

Connect to sql and issue

sqlplus /nolog


SQL> conn nk_dba/dba@dig
Turn on your own tracing

SQL> ALTER SESSION SET SQL_TRACE = TRUE;

SQL> SELECT * FROM EMP;

Turn off your  own tracing
SQL> ALTER SESSION SET SQL_TRACE = FALSE;

Session altered.

====
OR
====

Turn on your own tracing,if you want waits and binds, you need to use the second method (or 
dbms_system.set_sql_trace_in_session package or in 10g dbms_monitor)

ops$tkyte@ORA10G> @traceon
ops$tkyte@ORA10G> alter session set events '10046 trace name context forever, level 12';
 
Session altered.
 
Elapsed: 00:00:00.10

ops$tkyte@ORA10G> @traceoff
ops$tkyte@ORA10G> alter session set events '10046 trace name context off';
 
Session altered.


Find out ur trace file and from os level run following:

ops$tkyte@ORA9IR2> @gettrace
ops$tkyte@ORA9IR2> column trace new_val TRACE
ops$tkyte@ORA9IR2>
ops$tkyte@ORA9IR2> select c.value || '/' || d.instance_name || '_ora_' || a.spid 
|| '.trc' trace
from v$process a, v$session b, v$parameter c, v$instance d
where a.addr = b.paddr
and b.audsid = userenv('sessionid')
and c.name = 'user_dump_dest'
    /
 
TRACE
-------------------------------------------------------------------------------
/home/ora9ir2/admin/ora9ir2/udump/ora9ir2_ora_11397.trc




Use this command on OS level for TKPROF

$ tkprof orakic_ora_298552.trc sp-traced.lst


OR 

Use this from OS level to generate the create table and insert statement for the output of tkprod for the traced session

$ tkprof orakic_ora_369130.trc civilid_TIMMED_EXP.lst EXPLAIN=PREMPROD/PREMPROD TABLE=PREMPROD.nk_plan_table INSERT=STOREA.SQL SYS=NO
Use this from os level to generate the insert statement from tkprod