CREATE OR REPLACE PROCEDURE FOREX_ADJ
          (M_COMP_CODE       IN  VARCHAR2,
           M_USER_ID         IN  VARCHAR2) AS
S_OST_KEY_NO                         NUMBER(8);
S_OST_COMP_CODE                      VARCHAR2(3);
S_OST_TRAN_CODE                      VARCHAR2(3);
S_OST_DOC_NO                         NUMBER(6);
S_OST_SEQ_NO                         NUMBER(3);
S_OST_ACNT_YEAR                      NUMBER(2);
S_OST_DOC_DT                         DATE;
S_OST_DOC_CAL_YEAR                   NUMBER(4);
S_OST_DOC_CAL_MONTH                  NUMBER(2);
S_OST_DUE_DT                         DATE;
S_OST_MAIN_ACNT_CODE                 VARCHAR2(6);
S_OST_SUB_ACNT_CODE                  VARCHAR2(6);
S_OST_DIVN_CODE                      VARCHAR2(6);
S_OST_DEPT_CODE                      VARCHAR2(6);
S_OST_HEAD_NO_1                      NUMBER(1);
S_OST_ANLY_CODE_1                    VARCHAR2(6);
S_OST_HEAD_NO_2                      NUMBER(1);
S_OST_ANLY_CODE_2                    VARCHAR2(6);
S_OST_ACTY_CODE_1                    VARCHAR2(6);
S_OST_ACTY_CODE_2                    VARCHAR2(6);
S_OST_CURR_CODE                      VARCHAR2(3);
S_OST_LC_AMT                         NUMBER(14,3);
S_OST_FC_AMT                         NUMBER(14,3);
S_OST_DRCR_FLAG                      VARCHAR2(1);
S_OST_DOC_REF                        VARCHAR2(15);
S_OST_DOC_REF_DT                     DATE;
S_OST_OTH_REF                        VARCHAR2(15);
S_OST_LC_ADJ_AMT                     NUMBER(14,3);
S_OST_FC_ADJ_AMT                     NUMBER(14,3);
S_OST_LC_PDC_AMT                     NUMBER(14,3);
S_OST_FC_PDC_AMT                     NUMBER(14,3);
S_OST_LC_UNP_AMT                     NUMBER(14,3);
S_OST_FC_UNP_AMT                     NUMBER(14,3);
S_OST_LC_UNDEP_AMT                   NUMBER(14,3);
S_OST_FC_UNDEP_AMT                   NUMBER(14,3);
S_OST_LC_ORG_AMT                     NUMBER(14,3);
S_OST_FC_ORG_AMT                     NUMBER(14,3);
S_OST_REF_KEY_NO                     NUMBER(8);
S_OST_REF_COMP_CODE                  VARCHAR2(3);
S_OST_REF_ACNT_YEAR                  NUMBER(2);
S_OST_REF_TRAN_CODE                  VARCHAR2(3);
S_OST_REF_SEQ_NO                     NUMBER(3);
S_OST_REF_DOC_NO                     NUMBER(6);
S_OST_REF_DOC_DT                     DATE;
S_OST_REF_DOC_CAL_YEAR               NUMBER(4);
S_OST_REF_DOC_CAL_MONTH              NUMBER(2);
S_OST_REF_DUE_DT                     DATE;
S_OST_LAST_MATCH_DT                  DATE;
S_OST_TYPE                           VARCHAR2(1);
S_OST_CR_UID                         VARCHAR2(10);
S_OST_CR_DT                          DATE;
T_OST_KEY_NO                         NUMBER(8);
T_OST_COMP_CODE                      VARCHAR2(3);
T_OST_TRAN_CODE                      VARCHAR2(3);
T_OST_DOC_NO                         NUMBER(6);
T_OST_SEQ_NO                         NUMBER(3);
T_OST_ACNT_YEAR                      NUMBER(2);
T_OST_DOC_DT                         DATE;
T_OST_DOC_CAL_YEAR                   NUMBER(4);
T_OST_DOC_CAL_MONTH                  NUMBER(2);
T_OST_DUE_DT                         DATE;
T_OST_MAIN_ACNT_CODE                 VARCHAR2(6);
T_OST_SUB_ACNT_CODE                  VARCHAR2(6);
T_OST_DIVN_CODE                      VARCHAR2(6);
T_OST_DEPT_CODE                      VARCHAR2(6);
T_OST_HEAD_NO_1                      NUMBER(1);
T_OST_ANLY_CODE_1                    VARCHAR2(6);
T_OST_HEAD_NO_2                      NUMBER(1);
T_OST_ANLY_CODE_2                    VARCHAR2(6);
T_OST_ACTY_CODE_1                    VARCHAR2(6);
T_OST_ACTY_CODE_2                    VARCHAR2(6);
T_OST_CURR_CODE                      VARCHAR2(3);
T_OST_LC_AMT                         NUMBER(14,3);
T_OST_FC_AMT                         NUMBER(14,3);
T_OST_DRCR_FLAG                      VARCHAR2(1);
T_OST_DOC_REF                        VARCHAR2(15);
T_OST_DOC_REF_DT                     DATE;
T_OST_OTH_REF                        VARCHAR2(15);
T_OST_LC_ADJ_AMT                     NUMBER(14,3);
T_OST_FC_ADJ_AMT                     NUMBER(14,3);
T_OST_LC_PDC_AMT                     NUMBER(14,3);
T_OST_FC_PDC_AMT                     NUMBER(14,3);
T_OST_LC_UNP_AMT                     NUMBER(14,3);
T_OST_FC_UNP_AMT                     NUMBER(14,3);
T_OST_LC_UNDEP_AMT                   NUMBER(14,3);
T_OST_FC_UNDEP_AMT                   NUMBER(14,3);
T_OST_LC_ORG_AMT                     NUMBER(14,3);
T_OST_FC_ORG_AMT                     NUMBER(14,3);
T_OST_REF_KEY_NO                     NUMBER(8);
T_OST_REF_COMP_CODE                  VARCHAR2(3);
T_OST_REF_ACNT_YEAR                  NUMBER(2);
T_OST_REF_TRAN_CODE                  VARCHAR2(3);
T_OST_REF_SEQ_NO                     NUMBER(3);
T_OST_REF_DOC_NO                     NUMBER(6);
T_OST_REF_DOC_DT                     DATE;
T_OST_REF_DOC_CAL_YEAR               NUMBER(4);
T_OST_REF_DOC_CAL_MONTH              NUMBER(2);
T_OST_REF_DUE_DT                     DATE;
T_OST_LAST_MATCH_DT                  DATE;
T_OST_TYPE                           VARCHAR2(1);
T_OST_CR_UID                         VARCHAR2(10);
T_OST_CR_DT                          DATE;
P_OST_KEY_NO          NUMBER(8);
Q_OST_KEY_NO          NUMBER(8);
REF_OST_KEY_NO        NUMBER(8);
P_CUR_ACNT_YEAR                      NUMBER(3);
P_ACNT_YEAR                          NUMBER(3);
P_ERR_NO                             NUMBER(6);
P_FIRST                              VARCHAR2(1);
P_XDIFF_MAIN_ACNT_CODE               VARCHAR2(6);
P_XDIFF_TRAN_CODE                    VARCHAR2(3);
P_XDIFF_DOC_NO                       NUMBER(6);
P_XDIFF_DOC_DT                       DATE;
P_XDIFF_SEQ_NO                       NUMBER(3);
P_XDIFF_DOC_CAL_YEAR                 NUMBER(4);
P_XDIFF_DOC_CAL_MONTH                NUMBER(2);
P_XDIFF_CURR_CODE                    VARCHAR2(3);
P_XDIFF_CURR_COUNT                   NUMBER(3);
P_XDIFF_LC_AMT                       NUMBER(14,3);
P_XDIFF_DRCR_FLAG                    VARCHAR2(1);
ORGL_R_ENTRY_LC_AMT                  NUMBER(14,3);
CURR_R_ENTRY_LC_AMT                  NUMBER(14,3);
BASE_DECIMAL                         NUMBER(1);
M_BASE_CURR_CODE				VARCHAR2(6) ;
CURSOR SEL_XDIFF_TC IS
       SELECT SUBSTR(PARA_VALUE,1,3)
       FROM   FP_PARAMETER
       WHERE  PARA_ID = 'XDIFF.JV';
CURSOR SEL_XDIFF_AC IS
       SELECT SUBSTR(PARA_VALUE,1,6)
       FROM   FP_PARAMETER
       WHERE  PARA_ID = 'XDIFF.AC';
CURSOR C1 IS
	SELECT PARA_VALUE
	FROM   FP_PARAMETER
	WHERE  PARA_ID = 'BASE.CURR' ;
CURSOR SEL_MATCH_OS IS
       SELECT OST_KEY_NO, OST_COMP_CODE, OST_TRAN_CODE,
              OST_DOC_NO, OST_SEQ_NO, OST_ACNT_YEAR,
              OST_DOC_DT, OST_DOC_CAL_YEAR, OST_DOC_CAL_MONTH,
              OST_DUE_DT, OST_MAIN_ACNT_CODE, OST_SUB_ACNT_CODE,
              OST_DIVN_CODE, OST_DEPT_CODE, OST_HEAD_NO_1,
              OST_ANLY_CODE_1, OST_HEAD_NO_2, OST_ANLY_CODE_2,
              OST_ACTY_CODE_1, OST_ACTY_CODE_2, OST_CURR_CODE,
              OST_LC_AMT, OST_FC_AMT, OST_DRCR_FLAG,
              OST_DOC_REF, OST_DOC_REF_DT, OST_OTH_REF,
              OST_LC_ADJ_AMT, OST_FC_ADJ_AMT, OST_LC_PDC_AMT,
              OST_FC_PDC_AMT, OST_LC_UNP_AMT, OST_FC_UNP_AMT,
              OST_LC_UNDEP_AMT, OST_FC_UNDEP_AMT, OST_LC_ORG_AMT,
              OST_FC_ORG_AMT, OST_REF_KEY_NO, OST_REF_COMP_CODE,
              OST_REF_ACNT_YEAR, OST_REF_TRAN_CODE, OST_REF_SEQ_NO,
              OST_REF_DOC_NO, OST_REF_DOC_DT, OST_REF_DOC_CAL_YEAR,
              OST_REF_DOC_CAL_MONTH, OST_REF_DUE_DT, OST_LAST_MATCH_DT,
              OST_TYPE, OST_CR_UID, OST_CR_DT
       FROM   FS_MATCH_OS
       ORDER BY NVL(OST_TYPE,'A')
       FOR UPDATE OF OST_TYPE;
CURSOR SEL_REF_OS IS
       SELECT OST_KEY_NO, OST_COMP_CODE, OST_TRAN_CODE,
              OST_DOC_NO, OST_SEQ_NO, OST_ACNT_YEAR,
              OST_DOC_DT, OST_DOC_CAL_YEAR, OST_DOC_CAL_MONTH,
              OST_DUE_DT, OST_MAIN_ACNT_CODE, OST_SUB_ACNT_CODE,
              OST_DIVN_CODE, OST_DEPT_CODE, OST_HEAD_NO_1,
              OST_ANLY_CODE_1, OST_HEAD_NO_2, OST_ANLY_CODE_2,
              OST_ACTY_CODE_1, OST_ACTY_CODE_2, OST_CURR_CODE,
              OST_LC_AMT, OST_FC_AMT, OST_DRCR_FLAG,
              OST_DOC_REF, OST_DOC_REF_DT, OST_OTH_REF,
              OST_LC_ADJ_AMT, OST_FC_ADJ_AMT, OST_LC_PDC_AMT,
              OST_FC_PDC_AMT, OST_LC_UNP_AMT, OST_FC_UNP_AMT,
              OST_LC_UNDEP_AMT, OST_FC_UNDEP_AMT, OST_LC_ORG_AMT,
              OST_FC_ORG_AMT, OST_REF_KEY_NO, OST_REF_COMP_CODE,
              OST_REF_ACNT_YEAR, OST_REF_TRAN_CODE, OST_REF_SEQ_NO,
              OST_REF_DOC_NO, OST_REF_DOC_DT, OST_REF_DOC_CAL_YEAR,
              OST_REF_DOC_CAL_MONTH, OST_REF_DUE_DT, OST_LAST_MATCH_DT,
              OST_TYPE, OST_CR_UID, OST_CR_DT
       FROM FT_OS
       WHERE OST_KEY_NO = S_OST_REF_KEY_NO;
BEGIN
   BASE_DECIMAL := F_GET_BASE_DECIMAL;
   OPEN C1 ;
   FETCH C1 INTO M_BASE_CURR_CODE ;
   CLOSE C1 ;
   IF BASE_DECIMAL < 0 THEN
      RAISE_APPLICATION_ERROR(-20999, 'Invalid Base Currency defined') ;
   END IF;
   LOCK TABLE FT_OS IN SHARE UPDATE MODE ;
   IF SEL_MATCH_OS%ISOPEN THEN
      CLOSE SEL_MATCH_OS;
   END IF;
   OPEN SEL_MATCH_OS;
   LOOP
      FETCH SEL_MATCH_OS INTO
            S_OST_KEY_NO, S_OST_COMP_CODE, S_OST_TRAN_CODE,
            S_OST_DOC_NO, S_OST_SEQ_NO, S_OST_ACNT_YEAR,
            S_OST_DOC_DT, S_OST_DOC_CAL_YEAR, S_OST_DOC_CAL_MONTH,
            S_OST_DUE_DT, S_OST_MAIN_ACNT_CODE, S_OST_SUB_ACNT_CODE,
            S_OST_DIVN_CODE, S_OST_DEPT_CODE, S_OST_HEAD_NO_1,
            S_OST_ANLY_CODE_1, S_OST_HEAD_NO_2, S_OST_ANLY_CODE_2,
            S_OST_ACTY_CODE_1, S_OST_ACTY_CODE_2, S_OST_CURR_CODE,
            S_OST_LC_AMT, S_OST_FC_AMT, S_OST_DRCR_FLAG,
            S_OST_DOC_REF, S_OST_DOC_REF_DT, S_OST_OTH_REF,
            S_OST_LC_ADJ_AMT, S_OST_FC_ADJ_AMT, S_OST_LC_PDC_AMT,
            S_OST_FC_PDC_AMT, S_OST_LC_UNP_AMT, S_OST_FC_UNP_AMT,
            S_OST_LC_UNDEP_AMT, S_OST_FC_UNDEP_AMT, S_OST_LC_ORG_AMT,
            S_OST_FC_ORG_AMT, S_OST_REF_KEY_NO, S_OST_REF_COMP_CODE,
            S_OST_REF_ACNT_YEAR, S_OST_REF_TRAN_CODE, S_OST_REF_SEQ_NO,
            S_OST_REF_DOC_NO, S_OST_REF_DOC_DT, S_OST_REF_DOC_CAL_YEAR,
            S_OST_REF_DOC_CAL_MONTH, S_OST_REF_DUE_DT, S_OST_LAST_MATCH_DT,
            S_OST_TYPE, S_OST_CR_UID, S_OST_CR_DT;
      IF SEL_MATCH_OS%NOTFOUND THEN
         EXIT;
      END IF;
      F_OS(P_OST_KEY_NO);
      INSERT INTO FT_OS
             (OST_KEY_NO, OST_COMP_CODE, OST_TRAN_CODE,
              OST_DOC_NO, OST_SEQ_NO, OST_ACNT_YEAR,
              OST_DOC_DT, OST_DOC_CAL_YEAR, OST_DOC_CAL_MONTH,
              OST_DUE_DT, OST_MAIN_ACNT_CODE, OST_SUB_ACNT_CODE,
              OST_DIVN_CODE, OST_DEPT_CODE, OST_HEAD_NO_1,
              OST_ANLY_CODE_1, OST_HEAD_NO_2, OST_ANLY_CODE_2,
              OST_ACTY_CODE_1, OST_ACTY_CODE_2, OST_CURR_CODE,
              OST_LC_AMT, OST_FC_AMT, OST_DRCR_FLAG,
              OST_DOC_REF, OST_DOC_REF_DT, OST_OTH_REF,
              OST_LC_ADJ_AMT, OST_FC_ADJ_AMT, OST_LC_PDC_AMT,
              OST_FC_PDC_AMT, OST_LC_UNP_AMT, OST_FC_UNP_AMT,
              OST_LC_UNDEP_AMT, OST_FC_UNDEP_AMT, OST_LC_ORG_AMT,
              OST_FC_ORG_AMT, OST_REF_KEY_NO, OST_REF_COMP_CODE,
              OST_REF_ACNT_YEAR, OST_REF_TRAN_CODE, OST_REF_SEQ_NO,
              OST_REF_DOC_NO, OST_REF_DOC_DT, OST_REF_DOC_CAL_YEAR,
              OST_REF_DOC_CAL_MONTH, OST_REF_DUE_DT, OST_LAST_MATCH_DT,
              OST_TYPE, OST_CR_UID, OST_CR_DT)
      VALUES
             (P_OST_KEY_NO, S_OST_COMP_CODE, S_OST_TRAN_CODE,
              S_OST_DOC_NO, S_OST_SEQ_NO, S_OST_ACNT_YEAR,
              S_OST_DOC_DT, S_OST_DOC_CAL_YEAR, S_OST_DOC_CAL_MONTH,
              S_OST_DUE_DT, S_OST_MAIN_ACNT_CODE, S_OST_SUB_ACNT_CODE,
              S_OST_DIVN_CODE, S_OST_DEPT_CODE, S_OST_HEAD_NO_1,
              S_OST_ANLY_CODE_1, S_OST_HEAD_NO_2, S_OST_ANLY_CODE_2,
              S_OST_ACTY_CODE_1, S_OST_ACTY_CODE_2, S_OST_CURR_CODE,
              S_OST_LC_AMT, S_OST_FC_AMT, S_OST_DRCR_FLAG,
              S_OST_DOC_REF, S_OST_DOC_REF_DT, S_OST_OTH_REF,
              S_OST_LC_ADJ_AMT, S_OST_FC_ADJ_AMT, S_OST_LC_PDC_AMT,
              S_OST_FC_PDC_AMT, S_OST_LC_UNP_AMT, S_OST_FC_UNP_AMT,
              S_OST_LC_UNDEP_AMT, S_OST_FC_UNDEP_AMT, S_OST_LC_ORG_AMT,
              S_OST_FC_ORG_AMT, S_OST_REF_KEY_NO, S_OST_REF_COMP_CODE,
              S_OST_REF_ACNT_YEAR, S_OST_REF_TRAN_CODE, S_OST_REF_SEQ_NO,
              S_OST_REF_DOC_NO, S_OST_REF_DOC_DT, S_OST_REF_DOC_CAL_YEAR,
              S_OST_REF_DOC_CAL_MONTH, S_OST_REF_DUE_DT, S_OST_LAST_MATCH_DT,
              S_OST_TYPE, S_OST_CR_UID, S_OST_CR_DT);
      IF S_OST_TYPE IS NULL THEN
         NULL;
      ELSE
         IF NVL(S_OST_CURR_CODE, M_BASE_CURR_CODE) = M_BASE_CURR_CODE THEN
            NULL;
         ELSE
            REF_OST_KEY_NO := P_OST_KEY_NO;
            IF SEL_REF_OS%ISOPEN THEN
               CLOSE SEL_REF_OS;
            END IF;
            OPEN SEL_REF_OS;
            FETCH SEL_REF_OS INTO
                  T_OST_KEY_NO, T_OST_COMP_CODE, T_OST_TRAN_CODE,
                  T_OST_DOC_NO, T_OST_SEQ_NO, T_OST_ACNT_YEAR,
                  T_OST_DOC_DT, T_OST_DOC_CAL_YEAR, T_OST_DOC_CAL_MONTH,
                  T_OST_DUE_DT, T_OST_MAIN_ACNT_CODE, T_OST_SUB_ACNT_CODE,
                  T_OST_DIVN_CODE, T_OST_DEPT_CODE, T_OST_HEAD_NO_1,
                  T_OST_ANLY_CODE_1, T_OST_HEAD_NO_2, T_OST_ANLY_CODE_2,
                  T_OST_ACTY_CODE_1, T_OST_ACTY_CODE_2, T_OST_CURR_CODE,
                  T_OST_LC_AMT, T_OST_FC_AMT, T_OST_DRCR_FLAG,
                  T_OST_DOC_REF, T_OST_DOC_REF_DT, T_OST_OTH_REF,
                  T_OST_LC_ADJ_AMT, T_OST_FC_ADJ_AMT, T_OST_LC_PDC_AMT,
                  T_OST_FC_PDC_AMT, T_OST_LC_UNP_AMT, T_OST_FC_UNP_AMT,
                  T_OST_LC_UNDEP_AMT, T_OST_FC_UNDEP_AMT, T_OST_LC_ORG_AMT,
                  T_OST_FC_ORG_AMT, T_OST_REF_KEY_NO, T_OST_REF_COMP_CODE,
                  T_OST_REF_ACNT_YEAR, T_OST_REF_TRAN_CODE, T_OST_REF_SEQ_NO,
                  T_OST_REF_DOC_NO, T_OST_REF_DOC_DT, T_OST_REF_DOC_CAL_YEAR,
                  T_OST_REF_DOC_CAL_MONTH, T_OST_REF_DUE_DT,
                  T_OST_LAST_MATCH_DT, T_OST_TYPE, T_OST_CR_UID, T_OST_CR_DT;
            /* LC Value of the R Entry at the original document rate */
            ORGL_R_ENTRY_LC_AMT := ROUND(S_OST_FC_AMT *
                                         S_OST_LC_ORG_AMT /
                                         S_OST_FC_ORG_AMT, BASE_DECIMAL);
            CURR_R_ENTRY_LC_AMT := ROUND(S_OST_FC_AMT *
                                         T_OST_LC_ORG_AMT /
                                         T_OST_FC_ORG_AMT, BASE_DECIMAL);
            IF ORGL_R_ENTRY_LC_AMT = CURR_R_ENTRY_LC_AMT THEN
               NULL;
            ELSE
            P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(M_COMP_CODE);
            IF P_CUR_ACNT_YEAR < 0 THEN
               RAISE_APPLICATION_ERROR(-20468,
                       'Invalid Current Accounting Year') ;
            END IF;
            IF SEL_XDIFF_AC%ISOPEN THEN
                 CLOSE SEL_XDIFF_AC;
            END IF;
            OPEN SEL_XDIFF_AC;
            FETCH SEL_XDIFF_AC INTO P_XDIFF_MAIN_ACNT_CODE;
            IF SEL_XDIFF_AC%NOTFOUND THEN
               CLOSE SEL_XDIFF_AC;
               RAISE_APPLICATION_ERROR(-20999,
                       'Exchange Gain/Loss account not parameterised');
            END IF;
            CLOSE SEL_XDIFF_AC;
            IF SEL_XDIFF_TC%ISOPEN THEN
                 CLOSE SEL_XDIFF_TC;
            END IF;
            OPEN SEL_XDIFF_TC;
            FETCH SEL_XDIFF_TC INTO P_XDIFF_TRAN_CODE;
            IF SEL_XDIFF_TC%NOTFOUND THEN
               CLOSE SEL_XDIFF_TC;
               RAISE_APPLICATION_ERROR(-20999,
                       'Exchange Gain/Loss TC not parameterised');
            END IF;
            CLOSE SEL_XDIFF_TC;
            P_XDIFF_CURR_CODE := NULL;
            P_XDIFF_DOC_DT := TO_DATE(TO_CHAR(SYSDATE,'DD-MON-YYYY'),'DD-MON-YYYY');
            F_VAL_OPCL(M_COMP_CODE, P_XDIFF_DOC_DT,
                        P_ERR_NO, P_XDIFF_DOC_CAL_YEAR,
                        P_XDIFF_DOC_CAL_MONTH, P_ACNT_YEAR);
            IF P_ERR_NO != 0 THEN
               RAISE_APPLICATION_ERROR(-20999, 'Period not open');
            END IF;
            P_XDIFF_SEQ_NO := 1;
            F_GEN_DOC_NO(M_COMP_CODE, P_XDIFF_TRAN_CODE,
                          P_XDIFF_DOC_NO,P_CUR_ACNT_YEAR);
            IF P_XDIFF_DOC_NO = 0 THEN
               RAISE_APPLICATION_ERROR(-20999,
                       'Error in Document number generation');
            END IF;
            INSERT INTO FT_CUR_TRANS_HEADER
                  (TH_COMP_CODE, TH_ACNT_YEAR, TH_TRAN_CODE, TH_DOC_NO,
                   TH_DOC_DT, TH_DOC_CAL_YEAR, TH_DOC_CAL_MONTH, TH_DOC_DUE_DT,
                   TH_CR_UID, TH_CR_DT)
            VALUES
                  (M_COMP_CODE, P_CUR_ACNT_YEAR, P_XDIFF_TRAN_CODE,
                   P_XDIFF_DOC_NO, P_XDIFF_DOC_DT, P_XDIFF_DOC_CAL_YEAR,
                   P_XDIFF_DOC_CAL_MONTH, P_XDIFF_DOC_DT,
                   M_USER_ID, SYSDATE);
            IF ORGL_R_ENTRY_LC_AMT > CURR_R_ENTRY_LC_AMT THEN
               P_XDIFF_LC_AMT := ORGL_R_ENTRY_LC_AMT -
                                 CURR_R_ENTRY_LC_AMT;
               SELECT DECODE(S_OST_DRCR_FLAG,'D','C','C','D','X')
               INTO   P_XDIFF_DRCR_FLAG
               FROM   DUAL;
            ELSE
               P_XDIFF_LC_AMT := CURR_R_ENTRY_LC_AMT -
                                 ORGL_R_ENTRY_LC_AMT;
               P_XDIFF_DRCR_FLAG := S_OST_DRCR_FLAG;
            END IF;
            INSERT INTO FT_CUR_TRANS_DETAIL
                   (TD_COMP_CODE, TD_ACNT_YEAR, TD_TRAN_CODE, TD_DOC_NO,
                    TD_SEQ_NO, TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE,
                    TD_DIVN_CODE, TD_DEPT_CODE, TD_HEAD_NO_1, TD_ANLY_CODE_1,
                    TD_HEAD_NO_2, TD_ANLY_CODE_2, TD_CURR_CODE, TD_DOC_AMT,
                    TD_DOC_DRCR_FLAG, TD_FC_AMT, TD_DOC_REF, TD_DOC_DUE_DT,
                    TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2, TD_DESC,
                    TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG, TD_MONTH_PRC_FLAG,
                    TD_PYMT_APPR_FLAG, TD_CR_UID, TD_CR_DT)
              VALUES
                   (M_COMP_CODE, P_CUR_ACNT_YEAR, P_XDIFF_TRAN_CODE,
                    P_XDIFF_DOC_NO, P_XDIFF_SEQ_NO, S_OST_MAIN_ACNT_CODE,
                    S_OST_SUB_ACNT_CODE, S_OST_DIVN_CODE, S_OST_DEPT_CODE, 1,
                    S_OST_ANLY_CODE_1, 2, S_OST_ANLY_CODE_2, S_OST_CURR_CODE,
                    P_XDIFF_LC_AMT, P_XDIFF_DRCR_FLAG, 0, NULL, P_XDIFF_DOC_DT,
                    S_OST_ACTY_CODE_1, S_OST_ACTY_CODE_2,
                    'FX ADJ OF ENTRY ' || S_OST_TRAN_CODE || '-' ||
                    TO_CHAR(S_OST_DOC_NO) || '-' || TO_CHAR(S_OST_SEQ_NO),
                    'N', 'N', 'N', '0', M_USER_ID, SYSDATE);
              IF ORGL_R_ENTRY_LC_AMT > CURR_R_ENTRY_LC_AMT THEN
                 SELECT OST_KEY_NO
                 INTO   P_OST_KEY_NO
                 FROM   FT_OS
                 WHERE  OST_COMP_CODE = M_COMP_CODE
                 AND    OST_ACNT_YEAR = P_CUR_ACNT_YEAR
                 AND    OST_TRAN_CODE = P_XDIFF_TRAN_CODE
                 AND    OST_DOC_NO    = P_XDIFF_DOC_NO
                 AND    OST_SEQ_NO    = P_XDIFF_SEQ_NO;
                 F_OS(Q_OST_KEY_NO);
                 INSERT INTO FT_OS
                       (OST_KEY_NO, OST_COMP_CODE, OST_TRAN_CODE, OST_DOC_NO,
                        OST_SEQ_NO, OST_ACNT_YEAR, OST_DOC_DT, OST_DOC_CAL_YEAR,
                        OST_DOC_CAL_MONTH, OST_DUE_DT, OST_MAIN_ACNT_CODE,
                        OST_SUB_ACNT_CODE, OST_DIVN_CODE, OST_DEPT_CODE,
                        OST_HEAD_NO_1, OST_ANLY_CODE_1, OST_HEAD_NO_2,
                        OST_ANLY_CODE_2, OST_ACTY_CODE_1, OST_ACTY_CODE_2,
                        OST_CURR_CODE, OST_LC_AMT, OST_FC_AMT, OST_DRCR_FLAG,
                        OST_DOC_REF, OST_DOC_REF_DT, OST_OTH_REF,
                        OST_REF_KEY_NO, OST_LC_ORG_AMT, OST_FC_ORG_AMT,
                        OST_REF_COMP_CODE, OST_REF_ACNT_YEAR,
                        OST_REF_TRAN_CODE, OST_REF_SEQ_NO, OST_REF_DOC_NO,
                        OST_REF_DOC_DT, OST_REF_DOC_CAL_YEAR,
                        OST_REF_DOC_CAL_MONTH, OST_REF_DUE_DT, OST_TYPE,
                        OST_CR_UID, OST_CR_DT)
                 VALUES
                       (Q_OST_KEY_NO, S_OST_COMP_CODE, S_OST_TRAN_CODE,
                        S_OST_DOC_NO, S_OST_SEQ_NO, S_OST_ACNT_YEAR,
                        S_OST_DOC_DT, S_OST_DOC_CAL_YEAR, S_OST_DOC_CAL_MONTH,
                        S_OST_DUE_DT, S_OST_MAIN_ACNT_CODE, S_OST_SUB_ACNT_CODE,
                        S_OST_DIVN_CODE, S_OST_DEPT_CODE, 1, S_OST_ANLY_CODE_1,
                        2, S_OST_ANLY_CODE_2, S_OST_ACTY_CODE_1,
                        S_OST_ACTY_CODE_2, S_OST_CURR_CODE, P_XDIFF_LC_AMT,
                        0, S_OST_DRCR_FLAG, S_OST_DOC_REF, S_OST_DOC_REF_DT,
                        S_OST_OTH_REF, P_OST_KEY_NO, S_OST_LC_ORG_AMT,
                        S_OST_FC_ORG_AMT, M_COMP_CODE, P_CUR_ACNT_YEAR,
                        P_XDIFF_TRAN_CODE, P_XDIFF_SEQ_NO, P_XDIFF_DOC_NO,
                        S_OST_DOC_DT, P_XDIFF_DOC_CAL_YEAR,
                        P_XDIFF_DOC_CAL_MONTH, S_OST_DOC_DT, 'R', M_USER_ID,
                        SYSDATE);
              ELSE
                 SELECT OST_KEY_NO
                 INTO   P_OST_KEY_NO
                 FROM   FT_OS
                 WHERE  OST_COMP_CODE = M_COMP_CODE
                 AND    OST_ACNT_YEAR = P_CUR_ACNT_YEAR
                 AND    OST_TRAN_CODE = P_XDIFF_TRAN_CODE
                 AND    OST_DOC_NO    = P_XDIFF_DOC_NO
                 AND    OST_SEQ_NO    = P_XDIFF_SEQ_NO;
                 F_OS(Q_OST_KEY_NO);
                 INSERT INTO FT_OS
                     (OST_KEY_NO, OST_COMP_CODE, OST_TRAN_CODE, OST_DOC_NO,
                      OST_SEQ_NO, OST_ACNT_YEAR, OST_DOC_DT, OST_DOC_CAL_YEAR,
                      OST_DOC_CAL_MONTH, OST_DUE_DT, OST_MAIN_ACNT_CODE,
                      OST_SUB_ACNT_CODE, OST_DIVN_CODE, OST_DEPT_CODE,
                      OST_HEAD_NO_1, OST_ANLY_CODE_1, OST_HEAD_NO_2,
                      OST_ANLY_CODE_2, OST_ACTY_CODE_1, OST_ACTY_CODE_2,
                      OST_CURR_CODE, OST_LC_AMT, OST_FC_AMT, OST_DRCR_FLAG,
                      OST_DOC_REF, OST_DOC_REF_DT, OST_OTH_REF,
                      OST_REF_KEY_NO, OST_LC_ORG_AMT, OST_FC_ORG_AMT,
                      OST_REF_COMP_CODE, OST_REF_ACNT_YEAR,
                      OST_REF_TRAN_CODE, OST_REF_SEQ_NO,
                      OST_REF_DOC_NO, OST_REF_DOC_DT,
                      OST_REF_DOC_CAL_YEAR, OST_REF_DOC_CAL_MONTH,
                      OST_REF_DUE_DT,
                      OST_TYPE, OST_CR_UID, OST_CR_DT)
                 SELECT
                      Q_OST_KEY_NO, OST_COMP_CODE, OST_TRAN_CODE, OST_DOC_NO,
                      OST_SEQ_NO, OST_ACNT_YEAR, OST_DOC_DT, OST_DOC_CAL_YEAR,
                      OST_DOC_CAL_MONTH, OST_DUE_DT, OST_MAIN_ACNT_CODE,
                      OST_SUB_ACNT_CODE, OST_DIVN_CODE, OST_DEPT_CODE,
                      OST_HEAD_NO_1, OST_ANLY_CODE_1, OST_HEAD_NO_2,
                      OST_ANLY_CODE_2, OST_ACTY_CODE_1, OST_ACTY_CODE_2,
                      OST_CURR_CODE, OST_LC_AMT, OST_FC_AMT, OST_DRCR_FLAG,
                      OST_DOC_REF, OST_DOC_REF_DT, OST_OTH_REF,
                      T_OST_KEY_NO, OST_LC_ORG_AMT, OST_FC_ORG_AMT,
                      T_OST_COMP_CODE, T_OST_ACNT_YEAR, T_OST_TRAN_CODE,
                      T_OST_SEQ_NO, T_OST_DOC_NO, T_OST_DOC_DT,
                      T_OST_DOC_CAL_YEAR, T_OST_DOC_CAL_MONTH, T_OST_DUE_DT,
                      'R', OST_CR_UID, OST_CR_DT
                 FROM  FT_OS
                 WHERE OST_KEY_NO = P_OST_KEY_NO;
                 DELETE FROM FT_OS
                 WHERE  OST_KEY_NO = P_OST_KEY_NO;
                 /* Putting the key no of the JV into the R document */
                 UPDATE FT_OS
                 SET OST_OTH_REF = Q_OST_KEY_NO
                 WHERE OST_KEY_NO = REF_OST_KEY_NO;
               END IF;
               P_XDIFF_SEQ_NO := NVL(P_XDIFF_SEQ_NO,0) + 1;
               INSERT INTO FT_CUR_TRANS_DETAIL
                     (TD_COMP_CODE, TD_ACNT_YEAR, TD_TRAN_CODE, TD_DOC_NO,
                      TD_SEQ_NO, TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE,
                      TD_DIVN_CODE, TD_DEPT_CODE, TD_HEAD_NO_1, TD_ANLY_CODE_1,
                      TD_HEAD_NO_2, TD_ANLY_CODE_2, TD_CURR_CODE, TD_DOC_AMT,
                      TD_DOC_DRCR_FLAG, TD_FC_AMT, TD_DOC_REF, TD_DOC_DUE_DT,
                      TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2, TD_DESC,
                      TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG, TD_MONTH_PRC_FLAG,
                      TD_PYMT_APPR_FLAG, TD_CR_UID, TD_CR_DT)
              VALUES
                   (M_COMP_CODE, P_CUR_ACNT_YEAR, P_XDIFF_TRAN_CODE,
                    P_XDIFF_DOC_NO, P_XDIFF_SEQ_NO, P_XDIFF_MAIN_ACNT_CODE,
                    NULL, S_OST_DIVN_CODE, S_OST_DEPT_CODE, 1,
                    S_OST_ANLY_CODE_1, 2, S_OST_ANLY_CODE_2,
/* CRCTD BY CHANDRU ON 7/8/1999 ----NULL,*/
		    S_OST_CURR_CODE,
                    P_XDIFF_LC_AMT,
                    DECODE(P_XDIFF_DRCR_FLAG,'D','C','C','D','X'),
                    0, NULL, P_XDIFF_DOC_DT, NULL, NULL,
                    'FX ADJ OF ENTRY ' || S_OST_TRAN_CODE || '-' ||
                    TO_CHAR(S_OST_DOC_NO) || '-' || TO_CHAR(S_OST_SEQ_NO),
                    'N', 'N', 'N', '0', M_USER_ID, SYSDATE);
            END IF;
         END IF;
      END IF;
      DELETE FROM FS_MATCH_OS
      WHERE  CURRENT OF SEL_MATCH_OS;
  END LOOP;
END;
/
CREATE OR REPLACE PACKAGE FORMAT_FC_NUMBER AS
   FC_FORMAT_MASK		VARCHAR2(20);
   TYPE TAB_FC_MASK IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;
   TYPE TAB_FC_CODE IS TABLE OF VARCHAR2(3) INDEX BY BINARY_INTEGER;
   FC_MASK 			TAB_FC_MASK;
   Ii				NUMBER;
   FC_CODE 			TAB_FC_CODE;
   PROCEDURE 			LOAD_FC_MASK;
   PROCEDURE FIND_FC_MASK(CURR IN VARCHAR2);
   PROCEDURE SET_FC_MASK(FIELD_VALUE IN NUMBER,MASK_VALUE OUT VARCHAR2);
END FORMAT_FC_NUMBER;
/

CREATE OR REPLACE PACKAGE BODY FORMAT_FC_NUMBER AS
PROCEDURE LOAD_FC_MASK IS
  CURSOR L_FC_MASK IS
	SELECT CURR_FMT_MASK,CURR_CODE
	FROM FM_CURRENCY;
 BEGIN
	OPEN L_FC_MASK;
	FORMAT_FC_NUMBER.Ii := 1;
	LOOP
	FETCH L_FC_MASK INTO FORMAT_FC_NUMBER.FC_MASK(FORMAT_FC_NUMBER.Ii),FORMAT_FC_NUMBER.FC_CODE(FORMAT_FC_NUMBER.Ii);
	EXIT WHEN L_FC_MASK%NOTFOUND;
	FORMAT_FC_NUMBER.Ii := FORMAT_FC_NUMBER.Ii + 1;
        END LOOP;
	FORMAT_FC_NUMBER.Ii := FORMAT_FC_NUMBER.Ii - 1;
END LOAD_FC_MASK;
PROCEDURE FIND_FC_MASK(CURR IN VARCHAR2) IS
J NUMBER;
I NUMBER;
BEGIN
   J := FORMAT_FC_NUMBER.Ii;
   I := 1;
   FORMAT_FC_NUMBER.FC_FORMAT_MASK := NULL;
   LOOP
	IF FORMAT_FC_NUMBER.FC_FORMAT_MASK IS NOT NULL THEN
		EXIT;
	END IF;
	IF CURR = FORMAT_FC_NUMBER.FC_CODE(I) THEN
		FORMAT_FC_NUMBER.FC_FORMAT_MASK := FORMAT_FC_NUMBER.FC_MASK(I);
	END IF;
	IF I = J THEN
		EXIT;
        END IF;
	I := I+1;
  END LOOP;
  IF  FORMAT_FC_NUMBER.FC_FORMAT_MASK IS NULL THEN
		FORMAT_FC_NUMBER.FC_FORMAT_MASK := '999,999,999.99';
  END IF;
END FIND_FC_MASK;
PROCEDURE SET_FC_MASK(FIELD_VALUE IN NUMBER,MASK_VALUE OUT VARCHAR2) IS
   M_FORMAT_MASK		VARCHAR2(20);
   M_FIELD_LENGTH 		NUMBER;
   M_FIELD_INTEGER_LENGTH	NUMBER;
   M_MASK_LENGTH		NUMBER;
   M_MASK_DECIMAL_POS	NUMBER;
   M_MASK_DECIMAL_LENGTH	NUMBER;
   M_MASK_ORIGNAL_LENGTH	NUMBER;
   M_MASK			VARCHAR2(20);
   MM_MASK			VARCHAR2(1);
   M_CHECK			NUMBER;
   M_COUNT			NUMBER;
BEGIN
   M_FORMAT_MASK	:=	FORMAT_FC_NUMBER.FC_FORMAT_MASK;
   IF FIELD_VALUE IS NOT NULL THEN
      M_MASK_LENGTH		:= TO_NUMBER(LENGTH(M_FORMAT_MASK));
      M_FIELD_LENGTH		:= TO_NUMBER(LENGTH(TO_CHAR(FIELD_VALUE)));
      M_FIELD_INTEGER_LENGTH	:= TO_NUMBER(LENGTH(TO_CHAR(TRUNC(TO_NUMBER(FIELD_VALUE)))));
      M_MASK_DECIMAL_POS	:= INSTR(M_FORMAT_MASK,'.',1,1);
      IF M_MASK_DECIMAL_POS = 0 THEN
		M_MASK_DECIMAL_LENGTH := 0;
      ELSE
      		M_MASK_DECIMAL_LENGTH	:= M_MASK_LENGTH - (M_MASK_DECIMAL_POS - 1);
     END IF;
	M_MASK_ORIGNAL_LENGTH	:= M_MASK_LENGTH - M_MASK_DECIMAL_LENGTH;
      IF M_MASK_ORIGNAL_LENGTH < M_FIELD_INTEGER_LENGTH THEN
	M_FORMAT_MASK := LPAD(M_FORMAT_MASK,M_FIELD_INTEGER_LENGTH + M_MASK_DECIMAL_LENGTH, '9');
        M_MASK_ORIGNAL_LENGTH := M_FIELD_INTEGER_LENGTH;
	END IF;
      M_COUNT			:= 0;
      M_CHECK			:= M_MASK_ORIGNAL_LENGTH;
      LOOP
         MM_MASK			:= SUBSTR(M_FORMAT_MASK,M_CHECK,1);
	 IF MM_MASK IS NOT NULL THEN
	    IF MM_MASK = '9' THEN
	       M_COUNT	:= M_COUNT + 1;
	    END IF;
	    M_MASK		:= MM_MASK || M_MASK;
	    IF M_COUNT = M_FIELD_INTEGER_LENGTH THEN
	       EXIT;
	    END IF;
	    M_CHECK		:= M_CHECK - 1;
	 ELSE
	    EXIT;
	 END IF;
      END LOOP;
      M_MASK 			:= M_MASK || SUBSTR(M_FORMAT_MASK,M_MASK_ORIGNAL_LENGTH + 1,M_MASK_DECIMAL_LENGTH);
   MASK_VALUE := M_MASK;
   END IF;
END SET_FC_MASK;
END;
/
CREATE OR REPLACE VIEW FV_TRANS_DETAIL ( TD_COMP_CODE, 
TD_ACNT_YEAR, TD_TRAN_CODE, TD_DOC_NO, TD_SEQ_NO, 
TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE, TD_DIVN_CODE, TD_DEPT_CODE, 
TD_HEAD_NO_1, TD_ANLY_CODE_1, TD_HEAD_NO_2, TD_ANLY_CODE_2, 
TD_CURR_CODE, TD_DOC_AMT, TD_DOC_DRCR_FLAG, TD_FC_AMT, 
TD_DOC_REF, TD_DOC_DUE_DT, TD_OTH_REF, TD_ACTY_VALUE_CODE_1, 
TD_ACTY_VALUE_CODE_2, TD_DESC, TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG, 
TD_MONTH_PRC_FLAG, TD_BILL_FC_AMT, TD_BILL_LC_AMT, TD_BILL_STATUS, 
TD_PYMT_APPR_FLAG, TD_CR_UID, TD_CR_DT, TD_PYMT_LAST_APPR_FC_AMT, 
TD_PYMT_LAST_APPR_LC_AMT, TD_PYMT_LAST_APPR_BANK ) AS 
SELECT "TD_COMP_CODE","TD_ACNT_YEAR","TD_TRAN_CODE","TD_DOC_NO","TD_SEQ_NO",
"TD_MAIN_ACNT_CODE","TD_SUB_ACNT_CODE","TD_DIVN_CODE","TD_DEPT_CODE",
"TD_HEAD_NO_1",
"TD_ANLY_CODE_1","TD_HEAD_NO_2","TD_ANLY_CODE_2","TD_CURR_CODE","TD_DOC_AMT",
"TD_DOC_DRCR_FLAG","TD_FC_AMT","TD_DOC_REF","TD_DOC_DUE_DT","TD_OTH_REF",
"TD_ACTY_VALUE_CODE_1","TD_ACTY_VALUE_CODE_2","TD_DESC","TD_DBK_PRINT_FLAG",
"TD_LED_PRINT_FLAG","TD_MONTH_PRC_FLAG","TD_BILL_FC_AMT","TD_BILL_LC_AMT",
"TD_BILL_STATUS",
"TD_PYMT_APPR_FLAG","TD_CR_UID","TD_CR_DT","TD_PYMT_LAST_APPR_FC_AMT",
"TD_PYMT_LAST_APPR_LC_AMT","TD_PYMT_LAST_APPR_BANK"
FROM   FT_CUR_TRANS_DETAIL
UNION
SELECT "TD_COMP_CODE","TD_ACNT_YEAR","TD_TRAN_CODE","TD_DOC_NO","TD_SEQ_NO",
"TD_MAIN_ACNT_CODE","TD_SUB_ACNT_CODE","TD_DIVN_CODE","TD_DEPT_CODE",
"TD_HEAD_NO_1",
"TD_ANLY_CODE_1","TD_HEAD_NO_2","TD_ANLY_CODE_2","TD_CURR_CODE","TD_DOC_AMT",
"TD_DOC_DRCR_FLAG","TD_FC_AMT","TD_DOC_REF","TD_DOC_DUE_DT","TD_OTH_REF",
"TD_ACTY_VALUE_CODE_1","TD_ACTY_VALUE_CODE_2","TD_DESC","TD_DBK_PRINT_FLAG",
"TD_LED_PRINT_FLAG","TD_MONTH_PRC_FLAG","TD_BILL_FC_AMT","TD_BILL_LC_AMT",
"TD_BILL_STATUS","TD_PYMT_APPR_FLAG","TD_CR_UID","TD_CR_DT",
"TD_PYMT_LAST_APPR_FC_AMT","TD_PYMT_LAST_APPR_LC_AMT","TD_PYMT_LAST_APPR_BANK"
FROM   FT_PRV_TRANS_DETAIL
                                     ;
 /
CREATE OR REPLACE VIEW FV_TRANS_HEADER ( TH_COMP_CODE, 
TH_ACNT_YEAR, TH_TRAN_CODE, TH_DOC_NO, TH_DOC_DT, 
TH_DOC_CAL_YEAR, TH_DOC_CAL_MONTH, TH_DOC_REF, TH_DOC_REF_DT, 
TH_DOC_DUE_DT, TH_DIVN_CODE, TH_DEPT_CODE, TH_CTL_TOTAL, 
TH_DESC, TH_ANNOTATION, TH_CR_UID, TH_CR_DT
 ) AS 
SELECT TH_COMP_CODE, TH_ACNT_YEAR,     TH_TRAN_CODE,  TH_DOC_NO,
       TH_DOC_DT,    TH_DOC_CAL_YEAR,  TH_DOC_CAL_MONTH,
       TH_DOC_REF,   TH_DOC_REF_DT  ,  TH_DOC_DUE_DT ,
       TH_DIVN_CODE, TH_DEPT_CODE   ,  TH_CTL_TOTAL ,
       TH_DESC ,     TH_ANNOTATION,    TH_CR_UID   ,  TH_CR_DT
FROM   FT_CUR_TRANS_HEADER
UNION
SELECT TH_COMP_CODE, TH_ACNT_YEAR,     TH_TRAN_CODE,  TH_DOC_NO,
       TH_DOC_DT,    TH_DOC_CAL_YEAR,  TH_DOC_CAL_MONTH,
       TH_DOC_REF,   TH_DOC_REF_DT  ,  TH_DOC_DUE_DT ,
       TH_DIVN_CODE, TH_DEPT_CODE   ,  TH_CTL_TOTAL ,
       TH_DESC ,     TH_ANNOTATION,    TH_CR_UID   ,  TH_CR_DT
FROM  FT_PRV_TRANS_HEADER
                   ;
 /
CREATE OR REPLACE VIEW FV_TRANS_HEADER_DETAIL ( TH_DOC_DT, 
TD_COMP_CODE, TD_ACNT_YEAR, TD_TRAN_CODE, TD_DOC_NO, 
TD_SEQ_NO, TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE, TD_DIVN_CODE, 
TD_DEPT_CODE, TD_HEAD_NO_1, TD_ANLY_CODE_1, TD_HEAD_NO_2, 
TD_ANLY_CODE_2, TD_CURR_CODE, TD_DOC_AMT, TD_DOC_DRCR_FLAG, 
TD_FC_AMT, TD_DOC_REF, TD_DOC_DUE_DT, TD_OTH_REF, 
TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2, TD_DESC, TD_DBK_PRINT_FLAG, 
TD_LED_PRINT_FLAG, TD_MONTH_PRC_FLAG, TD_BILL_FC_AMT, TD_BILL_LC_AMT, 
TD_BILL_STATUS, TD_PYMT_APPR_FLAG, TD_CR_UID, TD_CR_DT, 
TD_PYMT_LAST_APPR_FC_AMT, TD_PYMT_LAST_APPR_LC_AMT, TD_PYMT_LAST_APPR_BANK ) AS 
SELECT "TH_DOC_DT", "TD_COMP_CODE","TD_ACNT_YEAR","TD_TRAN_CODE","TD_DOC_NO",
"TD_SEQ_NO",
"TD_MAIN_ACNT_CODE","TD_SUB_ACNT_CODE","TD_DIVN_CODE","TD_DEPT_CODE",
"TD_HEAD_NO_1",
"TD_ANLY_CODE_1","TD_HEAD_NO_2","TD_ANLY_CODE_2","TD_CURR_CODE","TD_DOC_AMT",
"TD_DOC_DRCR_FLAG","TD_FC_AMT","TD_DOC_REF","TD_DOC_DUE_DT","TD_OTH_REF",
"TD_ACTY_VALUE_CODE_1","TD_ACTY_VALUE_CODE_2","TD_DESC","TD_DBK_PRINT_FLAG",
"TD_LED_PRINT_FLAG","TD_MONTH_PRC_FLAG","TD_BILL_FC_AMT","TD_BILL_LC_AMT",
"TD_BILL_STATUS",
"TD_PYMT_APPR_FLAG","TD_CR_UID","TD_CR_DT","TD_PYMT_LAST_APPR_FC_AMT",
"TD_PYMT_LAST_APPR_LC_AMT","TD_PYMT_LAST_APPR_BANK"
FROM   FT_CUR_TRANS_DETAIL,FT_CUR_TRANS_HEADER
WHERE   TH_COMP_CODE = TD_COMP_CODE
AND     TH_ACNT_YEAR = TD_ACNT_YEAR
AND     TH_TRAN_CODE = TD_TRAN_CODE
AND     TH_DOC_NO    = TD_DOC_NO
UNION
SELECT "TH_DOC_DT","TD_COMP_CODE","TD_ACNT_YEAR","TD_TRAN_CODE","TD_DOC_NO",
"TD_SEQ_NO",
"TD_MAIN_ACNT_CODE","TD_SUB_ACNT_CODE","TD_DIVN_CODE","TD_DEPT_CODE",
"TD_HEAD_NO_1",
"TD_ANLY_CODE_1","TD_HEAD_NO_2","TD_ANLY_CODE_2","TD_CURR_CODE","TD_DOC_AMT",
"TD_DOC_DRCR_FLAG","TD_FC_AMT","TD_DOC_REF","TD_DOC_DUE_DT","TD_OTH_REF",
"TD_ACTY_VALUE_CODE_1","TD_ACTY_VALUE_CODE_2","TD_DESC","TD_DBK_PRINT_FLAG",
"TD_LED_PRINT_FLAG","TD_MONTH_PRC_FLAG","TD_BILL_FC_AMT","TD_BILL_LC_AMT",
"TD_BILL_STATUS","TD_PYMT_APPR_FLAG","TD_CR_UID","TD_CR_DT",
"TD_PYMT_LAST_APPR_FC_AMT","TD_PYMT_LAST_APPR_LC_AMT","TD_PYMT_LAST_APPR_BANK"
FROM   FT_PRV_TRANS_DETAIL,FT_PRV_TRANS_HEADER
WHERE   TH_COMP_CODE = TD_COMP_CODE
AND     TH_ACNT_YEAR = TD_ACNT_YEAR
AND     TH_TRAN_CODE = TD_TRAN_CODE
AND     TH_DOC_NO    = TD_DOC_NO
;
 /
CREATE OR REPLACE VIEW FV_UNP_TRANS_HEADER_DETAIL ( TH_DOC_DT, 
TD_COMP_CODE, TD_ACNT_YEAR, TD_TRAN_CODE, TD_DOC_NO, 
TD_SEQ_NO, TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE, TD_DIVN_CODE, 
TD_DEPT_CODE, TD_HEAD_NO_1, TD_ANLY_CODE_1, TD_HEAD_NO_2, 
TD_ANLY_CODE_2, TD_CURR_CODE, TD_DOC_AMT, TD_DOC_DRCR_FLAG, 
TD_FC_AMT, TD_DOC_REF, TD_DOC_DUE_DT, TD_OTH_REF, 
TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2, TD_DESC, TD_DBK_PRINT_FLAG, 
TD_LED_PRINT_FLAG, TD_MONTH_PRC_FLAG, TD_BILL_FC_AMT, TD_BILL_LC_AMT, 
TD_BILL_STATUS, TD_PYMT_APPR_FLAG, TD_CR_UID, TD_CR_DT, 
TD_PYMT_LAST_APPR_FC_AMT, TD_PYMT_LAST_APPR_LC_AMT, TD_PYMT_LAST_APPR_BANK ) AS 
SELECT "TH_DOC_DT","TD_COMP_CODE","TD_ACNT_YEAR","TD_TRAN_CODE","TD_DOC_NO",
"TD_SEQ_NO",
"TD_MAIN_ACNT_CODE","TD_SUB_ACNT_CODE","TD_DIVN_CODE","TD_DEPT_CODE",
"TD_HEAD_NO_1",
"TD_ANLY_CODE_1","TD_HEAD_NO_2","TD_ANLY_CODE_2","TD_CURR_CODE","TD_DOC_AMT",
"TD_DOC_DRCR_FLAG","TD_FC_AMT","TD_DOC_REF","TD_DOC_DUE_DT","TD_OTH_REF",
"TD_ACTY_VALUE_CODE_1","TD_ACTY_VALUE_CODE_2","TD_DESC","TD_DBK_PRINT_FLAG",
"TD_LED_PRINT_FLAG","TD_MONTH_PRC_FLAG","TD_BILL_FC_AMT","TD_BILL_LC_AMT",
"TD_BILL_STATUS","TD_PYMT_APPR_FLAG","TD_CR_UID","TD_CR_DT",
"TD_PYMT_LAST_APPR_FC_AMT","TD_PYMT_LAST_APPR_LC_AMT","TD_PYMT_LAST_APPR_BANK"
FROM   FT_UNPOSTED_TRANS_DETAIL,FT_UNPOSTED_TRANS_HEADER
WHERE   TH_COMP_CODE = TD_COMP_CODE
AND     TH_ACNT_YEAR = TD_ACNT_YEAR
AND     TH_TRAN_CODE = TD_TRAN_CODE
AND     TH_DOC_NO    = TD_DOC_NO
;
 /
CREATE OR REPLACE VIEW FW_COA_LEVEL ( LB_FORMAT_ID, 
LB_LVL_CODE, LB_LVL_TYPE, LB_LVL_SEQ ) AS 
SELECT DISTINCT LB_FORMAT_ID, LB_LVL_CODE, LB_LVL_TYPE, LB_LVL_SEQ
FROM   FW_LEVEL_BAL_1
;
 /
CREATE OR REPLACE PROCEDURE F_AJV_DETAIL
                 (P_AJD_KEY_NO      OUT      NUMBER) AS
BEGIN
     SELECT SEQ_AJD_KEY_NO.NEXTVAL
     INTO   P_AJD_KEY_NO
     FROM   SYS.DUAL;
END;
/
CREATE OR REPLACE PROCEDURE F_ALLOCATION_JV
                 (P_AJV_KEY_NO      OUT      NUMBER) AS
BEGIN
      SELECT SEQ_AJV_KEY_NO.NEXTVAL
      INTO   P_AJV_KEY_NO
      FROM   SYS.DUAL;
END;
/
CREATE OR REPLACE PROCEDURE F_CHK_DRCR_SUM
                       (P_COMP_CODE           IN          VARCHAR2,
                        P_ACNT_YEAR           IN          NUMBER,
                        P_TRAN_CODE           IN          VARCHAR2,
                        P_DOC_NO              IN          NUMBER)  AS
      P_TOT_DR_AMT       NUMBER;
      P_TOT_CR_AMT       NUMBER;
      P_CUR_ACNT_YEAR    NUMBER;
      CURSOR GET_CUR_DR_CR_AMT IS
         SELECT SUM(DECODE(TD_DOC_DRCR_FLAG,'D',TD_DOC_AMT,0)),
                SUM(DECODE(TD_DOC_DRCR_FLAG,'C',TD_DOC_AMT,0))
         FROM   FT_CUR_TRANS_DETAIL
         WHERE  TD_COMP_CODE = P_COMP_CODE
         AND    TD_ACNT_YEAR = P_ACNT_YEAR
         AND    TD_TRAN_CODE = P_TRAN_CODE
         AND    TD_DOC_NO    = P_DOC_NO ;
      CURSOR GET_PRV_DR_CR_AMT IS
         SELECT SUM(DECODE(TD_DOC_DRCR_FLAG,'D',TD_DOC_AMT,0)),
                SUM(DECODE(TD_DOC_DRCR_FLAG,'C',TD_DOC_AMT,0))
         FROM   FT_PRV_TRANS_DETAIL
         WHERE  TD_COMP_CODE = P_COMP_CODE
         AND    TD_ACNT_YEAR = P_ACNT_YEAR
         AND    TD_TRAN_CODE = P_TRAN_CODE
         AND    TD_DOC_NO    = P_DOC_NO ;
      BEGIN
         P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(P_COMP_CODE);
         IF P_CUR_ACNT_YEAR = P_ACNT_YEAR THEN
            IF GET_CUR_DR_CR_AMT%ISOPEN THEN
               CLOSE GET_CUR_DR_CR_AMT ;
            END IF ;
            OPEN  GET_CUR_DR_CR_AMT;
            FETCH GET_CUR_DR_CR_AMT INTO P_TOT_DR_AMT, P_TOT_CR_AMT ;
            CLOSE GET_CUR_DR_CR_AMT;
            IF NVL(P_TOT_DR_AMT, 0) != NVL(P_TOT_CR_AMT,0) THEN
               RAISE_APPLICATION_ERROR(-20015, 'Debit and Credit not tallying');
            END IF;
         ELSE
            IF GET_PRV_DR_CR_AMT%ISOPEN THEN
               CLOSE GET_PRV_DR_CR_AMT ;
            END IF ;
            OPEN  GET_PRV_DR_CR_AMT;
            FETCH GET_PRV_DR_CR_AMT INTO P_TOT_DR_AMT, P_TOT_CR_AMT ;
            CLOSE GET_PRV_DR_CR_AMT;
            IF NVL(P_TOT_DR_AMT, 0) != NVL(P_TOT_CR_AMT,0) THEN
               RAISE_APPLICATION_ERROR(-20015, 'Debit and Credit not tallying');
            END IF;
         END IF;
      END ;
/
CREATE OR REPLACE PROCEDURE F_CREATE_AJV_DETAIL
       (P_AJV_KEY_NO      NUMBER,
        P_AJV_START_DT    DATE,
        P_AJV_UPTO_DT     DATE,
        P_COMP_CODE       VARCHAR2,
        P_AJV_DOC_AMT     NUMBER,
        P_AJV_CR_UID      VARCHAR2,
        P_AJV_CR_DT       DATE,
        P_ERR_NO          IN OUT NUMBER) IS
M_DUMMY                 VARCHAR2(1) ;
M_FIRST_MTH_AMT         FT_ALLOCATION_JV.AJV_DOC_AMT%TYPE ;
M_MTHLY_AMT             FT_ALLOCATION_JV.AJV_DOC_AMT%TYPE ;
M_THIS_MTH_AMT          FT_ALLOCATION_JV.AJV_DOC_AMT%TYPE ;
M_TOT_ALLOC_AMT         FT_ALLOCATION_JV.AJV_DOC_AMT%TYPE ;
M_SER_NO                FT_AJV_DETAIL.AJD_SEQ_NO%TYPE ;
M_NO_OF_MTH             FT_AJV_DETAIL.AJD_SEQ_NO%TYPE ;
M_DOC_DT                DATE ;
M_FIRST_MTH_LAST_DT     DATE ;
M_CFED_DT               DATE ;
M_MAX_DT                DATE ;
M_CAL_YEAR              NUMBER(4) ;
M_CAL_MTH               NUMBER(2) ;
M_ACNT_YEAR             NUMBER(2) ;
M_PREV_CAL_YEAR         NUMBER(4) ;
M_PREV_CAL_MTH          NUMBER(2) ;
M_DAYS                  NUMBER(3) ;
CURSOR C1 IS
       SELECT APER_TO_DT
       FROM   FM_ACNT_PERIOD
       WHERE  APER_COMP_CODE = P_COMP_CODE
         AND  APER_CAL_YEAR  = M_CAL_YEAR
         AND  APER_CAL_MONTH = M_CAL_MTH ;
CURSOR C2 IS
       SELECT 'X'
       FROM   FT_AJV_DETAIL
       WHERE  AJD_KEY_NO = P_AJV_KEY_NO
       AND    AJD_STATUS IS NOT NULL ;
CURSOR C3 IS
       SELECT M_FIRST_MTH_LAST_DT - APER_TO_DT
       FROM   FM_ACNT_PERIOD
       WHERE  APER_COMP_CODE = P_COMP_CODE
         AND  APER_CAL_YEAR  = M_PREV_CAL_YEAR
         AND  APER_CAL_MONTH = M_PREV_CAL_MTH ;
BEGIN
   OPEN C2 ;
   FETCH C2 INTO M_DUMMY ;
   IF C2%FOUND THEN
      GOTO GOTO_END ;
   END IF ;
   DELETE FROM FT_AJV_DETAIL
   WHERE  AJD_KEY_NO = P_AJV_KEY_NO ;
   F_VAL_OPCL(P_COMP_CODE, P_AJV_START_DT, P_ERR_NO,
              M_CAL_YEAR, M_CAL_MTH, M_ACNT_YEAR);
   IF P_ERR_NO != 0 THEN
      RAISE_APPLICATION_ERROR(-20000 - P_ERR_NO, 'Invalid Start Date');
   END IF;
   SELECT MAX(TO_DATE(TO_CHAR(APER_TO_DT,'YYYYMMDD'),'YYYYMMDD'))
   INTO   M_CFED_DT
   FROM   FM_ACNT_PERIOD
   WHERE  APER_COMP_CODE = P_COMP_CODE  ;
   SELECT COUNT(*), MAX(TO_DATE(TO_CHAR(APER_TO_DT,'YYYYMMDD'),'YYYYMMDD')),
          MIN(TO_DATE(TO_CHAR(APER_TO_DT,'YYYYMMDD'),'YYYYMMDD'))
   INTO   M_NO_OF_MTH, M_MAX_DT, M_FIRST_MTH_LAST_DT
   FROM   FM_ACNT_PERIOD
   WHERE  APER_COMP_CODE = P_COMP_CODE
     AND  TO_DATE(TO_CHAR(APER_TO_DT,'YYYYMMDD'),'YYYYMMDD') BETWEEN P_AJV_START_DT
                                           AND P_AJV_UPTO_DT ;
   DBMS_OUTPUT.PUT_LINE('CFED ' || TO_CHAR(M_CFED_DT) ) ;
   DBMS_OUTPUT.PUT_LINE('FIRST_MTH_LAST_DT ' || TO_CHAR(M_FIRST_MTH_LAST_DT) ) ;
   IF P_AJV_UPTO_DT > M_CFED_DT THEN
      M_NO_OF_MTH := NVL(M_NO_OF_MTH,0) +
                     CEIL(MONTHS_BETWEEN(LAST_DAY(P_AJV_UPTO_DT), M_CFED_DT + 1)) ;
   ELSE
      IF M_MAX_DT != P_AJV_UPTO_DT THEN
         M_NO_OF_MTH := NVL(M_NO_OF_MTH,0) + 1 ;
      END IF ;
   END IF ;
   DBMS_OUTPUT.PUT_LINE('TOTAL # OF MTH IS ' || TO_CHAR(M_NO_OF_MTH) ) ;
   /* The starting date is included in the first month for calculation
      The logic for first month amount is
      No_of_days_in_first_month
      -------------------------   * Amount
      Total_no_of_days_opted
   */
   M_MTHLY_AMT := ROUND(P_AJV_DOC_AMT /
                   MONTHS_BETWEEN(TO_DATE(TO_CHAR(P_AJV_UPTO_DT + 1,'YYYYMMDD'),'YYYYMMDD'),
                                  TO_DATE(TO_CHAR(P_AJV_START_DT,'YYYYMMDD'),'YYYYMMDD')), 0) ;
   DBMS_OUTPUT.PUT_LINE('MTHLY AMT ' || TO_CHAR(M_MTHLY_AMT) ) ;
   M_SER_NO := 1 ;
   WHILE M_SER_NO <= M_NO_OF_MTH
   LOOP
      DBMS_OUTPUT.PUT_LINE('SRNO ' || TO_CHAR(M_SER_NO) ) ;
      DBMS_OUTPUT.PUT_LINE('SRNO AMOUNT ' || TO_CHAR(M_THIS_MTH_AMT) ) ;
      M_CAL_YEAR := TO_NUMBER(TO_CHAR(ADD_MONTHS(TO_DATE(TO_CHAR(
                    M_FIRST_MTH_LAST_DT,'YYYYMM'),'YYYYMM'),M_SER_NO-1),'YYYY')) ;
      M_CAL_MTH  := TO_NUMBER(TO_CHAR(ADD_MONTHS(TO_DATE(TO_CHAR(
                    M_FIRST_MTH_LAST_DT,'YYYYMM'),'YYYYMM'),M_SER_NO-1),'MM')) ;
      IF M_SER_NO = 1 THEN
         M_PREV_CAL_YEAR := TO_NUMBER(TO_CHAR(ADD_MONTHS(TO_DATE(TO_CHAR(
                        M_FIRST_MTH_LAST_DT,'YYYYMM'),'YYYYMM'),M_SER_NO-2),'YYYY')) ;
         M_PREV_CAL_MTH  := TO_NUMBER(TO_CHAR(ADD_MONTHS(TO_DATE(TO_CHAR(
                        M_FIRST_MTH_LAST_DT,'YYYYMM'),'YYYYMM'),M_SER_NO-2),'MM')) ;
      DBMS_OUTPUT.PUT_LINE('CAL YEAR ' || TO_CHAR(M_PREV_CAL_YEAR) ) ;
      DBMS_OUTPUT.PUT_LINE('CAL MONTH ' || TO_CHAR(M_PREV_CAL_MTH) ) ;
         IF C3%ISOPEN THEN
            CLOSE C3 ;
         END IF ;
         OPEN C3 ;
         FETCH C3 INTO M_DAYS ;
         IF C3%NOTFOUND THEN
            M_DAYS := 31 ;
         END IF ;
         CLOSE C3 ;
         DBMS_OUTPUT.PUT_LINE('DAYS IN MONTH ' || TO_CHAR(M_DAYS) );
         M_FIRST_MTH_AMT :=
            ROUND((M_FIRST_MTH_LAST_DT - TO_DATE(TO_CHAR(P_AJV_START_DT,'YYYYMMDD'),'YYYYMMDD') + 1) *
              (M_MTHLY_AMT / M_DAYS), 0) ;
         M_THIS_MTH_AMT  := M_FIRST_MTH_AMT ;
         M_TOT_ALLOC_AMT := M_FIRST_MTH_AMT ;
         DBMS_OUTPUT.PUT_LINE('FIRST MONTH AMT'|| TO_CHAR(M_FIRST_MTH_AMT) );
      ELSE
         IF M_SER_NO = M_NO_OF_MTH THEN
            M_THIS_MTH_AMT  := NVL(P_AJV_DOC_AMT,0) - NVL(M_TOT_ALLOC_AMT,0) ;
         ELSE
            M_THIS_MTH_AMT  := M_MTHLY_AMT ;
            M_TOT_ALLOC_AMT := NVL(M_TOT_ALLOC_AMT,0) + NVL(M_MTHLY_AMT,0) ;
         END IF ;
      END IF ;
      OPEN C1 ;
      FETCH C1 INTO M_DOC_DT ;
      IF C1%NOTFOUND THEN
         M_DOC_DT := LAST_DAY(TO_DATE(LTRIM(TO_CHAR(M_CAL_YEAR,'9999')) ||
                                      LTRIM(TO_CHAR(M_CAL_MTH,'09')),'YYYYMM')) ;
      END IF ;
      CLOSE C1 ;
      DBMS_OUTPUT.PUT_LINE('DOCUMENT DATE IS ' || TO_CHAR(M_DOC_DT) ) ;
      DBMS_OUTPUT.PUT_LINE('CAL MM IS' || TO_CHAR(M_CAL_MTH) );
      DBMS_OUTPUT.PUT_LINE('DOCUMENT AMT IS ' || TO_CHAR(M_THIS_MTH_AMT) ) ;
      INSERT INTO FT_AJV_DETAIL
             (AJD_KEY_NO, AJD_SEQ_NO, AJD_DOC_DT, AJD_DOC_CAL_YEAR,
              AJD_DOC_CAL_MONTH, AJD_ALLOC_AMT, AJD_CR_UID, AJD_CR_DT)
      VALUES
             (P_AJV_KEY_NO, M_SER_NO, M_DOC_DT, M_CAL_YEAR, M_CAL_MTH,
              NVL(M_THIS_MTH_AMT,0), P_AJV_CR_UID, P_AJV_CR_DT) ;
      M_SER_NO  := NVL(M_SER_NO,0) + 1 ;
   END LOOP ;
   <<GOTO_END>>
     NULL ;
END ;
/
CREATE OR REPLACE PROCEDURE F_FT_FIXED_JV (P_FJV_REF OUT NUMBER) AS
BEGIN
      SELECT SEQ_FJV_REF.NEXTVAL
      INTO   P_FJV_REF
      FROM   SYS.DUAL;
END;
/
CREATE OR REPLACE PROCEDURE F_GEN_DOC_NO
                 (P_COMP_CODE IN     VARCHAR2,
                  P_TRAN_CODE IN     VARCHAR2,
                  P_DOC_NO    IN OUT NUMBER,
 	            P_ACNT_YEAR IN NUMBER) AS
P_CUR_NO      NUMBER(6);
P_MAX_NO      NUMBER(6);
CURSOR SEL_TDOC IS
       SELECT NVL(TDOC_CUR_NO,1), TDOC_MAX_NO
       FROM   FM_TRAN_DOC_NO
       WHERE  TDOC_TRAN_CODE = P_TRAN_CODE
       AND    TDOC_COMP_CODE = P_COMP_CODE
       AND    TDOC_ACNT_YEAR = P_ACNT_YEAR
       FOR UPDATE OF TDOC_CUR_NO;
BEGIN
   IF SEL_TDOC%ISOPEN THEN
      CLOSE SEL_TDOC;
   END IF;
   OPEN SEL_TDOC;
   FETCH SEL_TDOC INTO P_CUR_NO, P_MAX_NO;
   IF SEL_TDOC%NOTFOUND THEN
      P_DOC_NO := 0;
      CLOSE SEL_TDOC;
      RETURN;
   END IF;
   IF NVL(P_CUR_NO,0) >= NVL(P_MAX_NO,0) THEN
      P_DOC_NO := 0;
   ELSE
      P_DOC_NO := P_CUR_NO;
      UPDATE FM_TRAN_DOC_NO
      SET    TDOC_CUR_NO = NVL(TDOC_CUR_NO,0) + 1
      WHERE  CURRENT OF SEL_TDOC;
   END IF;
   CLOSE SEL_TDOC;
END;
/
CREATE OR REPLACE FUNCTION  F_GET_ACNT_YEAR_2DATES
                               ( P_FROM_DATE DATE,
                                 P_TO_DATE   DATE)
                             RETURN NUMBER IS
CURSOR F_FROM_DT_YEAR IS
       SELECT APER_ACNT_YEAR
       FROM   FM_ACNT_PERIOD
       WHERE  P_FROM_DATE BETWEEN APER_FRM_DT  AND APER_TO_DT ;
CURSOR F_TO_DT_YEAR IS
       SELECT APER_ACNT_YEAR
       FROM   FM_ACNT_PERIOD
       WHERE  P_TO_DATE BETWEEN APER_FRM_DT AND APER_TO_DT ;
P_FROM_ACNT_YEAR     NUMBER(2);
P_TO_ACNT_YEAR       NUMBER(2);
BEGIN
     IF F_FROM_DT_YEAR%ISOPEN THEN
           CLOSE F_FROM_DT_YEAR;
     END IF;
     IF F_TO_DT_YEAR%ISOPEN THEN
           CLOSE F_TO_DT_YEAR;
     END IF;
     OPEN F_FROM_DT_YEAR ;
     FETCH F_FROM_DT_YEAR  INTO P_FROM_ACNT_YEAR;
     IF F_FROM_DT_YEAR%NOTFOUND THEN
        CLOSE F_FROM_DT_YEAR;
        RETURN(-1);
     ELSE
        CLOSE F_FROM_DT_YEAR;
     END IF;
     OPEN F_TO_DT_YEAR ;
     FETCH F_TO_DT_YEAR  INTO P_TO_ACNT_YEAR;
     IF F_TO_DT_YEAR%NOTFOUND THEN
        CLOSE F_TO_DT_YEAR;
        RETURN(-1);
     ELSE
        CLOSE F_TO_DT_YEAR;
     END IF;
     IF P_FROM_ACNT_YEAR = P_TO_ACNT_YEAR THEN
        RETURN(P_FROM_ACNT_YEAR);
     ELSE
        RETURN ( -2 ) ;
     END IF ;
END;
/
CREATE OR REPLACE FUNCTION  F_GET_BASE_CURR RETURN VARCHAR2 IS
CURSOR F_PARA IS
       SELECT SUBSTR(PARA_VALUE,1,3)
       FROM   FP_PARAMETER
       WHERE  PARA_ID = 'BASE.CURR';
P_BASE_CURR_CODE     VARCHAR2(3);
BEGIN
     IF F_PARA%ISOPEN THEN
           CLOSE F_PARA;
     END IF;
     OPEN F_PARA;
     FETCH F_PARA INTO P_BASE_CURR_CODE;
     IF F_PARA%NOTFOUND THEN
        CLOSE F_PARA;
        RETURN('ERR');
     ELSE
        CLOSE F_PARA;
        RETURN(P_BASE_CURR_CODE);
     END IF;
END;
/
CREATE OR REPLACE FUNCTION  F_GET_BASE_DECIMAL RETURN NUMBER IS
CURSOR F_PARA IS
       SELECT CURR_DECIMAL
       FROM   FM_CURRENCY, FP_PARAMETER
       WHERE  PARA_ID = 'BASE.CURR'
       AND    CURR_CODE = SUBSTR(PARA_VALUE,1,3);
P_BASE_DECIMAL     NUMBER(1);
BEGIN
     IF F_PARA%ISOPEN THEN
           CLOSE F_PARA;
     END IF;
     OPEN F_PARA;
     FETCH F_PARA INTO P_BASE_DECIMAL;
     IF F_PARA%NOTFOUND THEN
        CLOSE F_PARA;
        RETURN(-1);
     ELSE
        CLOSE F_PARA;
        RETURN(P_BASE_DECIMAL);
     END IF;
END;
/
CREATE OR REPLACE FUNCTION  F_GET_COMP_CODE
                            ( P_R_KEY_NO  IN NUMBER )
                              RETURN VARCHAR2 IS
CURSOR  F_COMP_CODE    IS
   SELECT SUBSTR( REP_VALUE_1,1,3)
     FROM FP_REP_INFO
    WHERE REP_KEY_NO  = P_R_KEY_NO ;
P_COMP_CODE VARCHAR2(3) ;
BEGIN
     IF F_COMP_CODE%ISOPEN THEN
           CLOSE F_COMP_CODE;
     END IF;
     OPEN F_COMP_CODE;
     FETCH F_COMP_CODE    INTO P_COMP_CODE        ;
     IF F_COMP_CODE%NOTFOUND THEN
        CLOSE F_COMP_CODE     ;
        RETURN  ( '' ) ;
     ELSE
        CLOSE F_COMP_CODE   ;
        RETURN  ( P_COMP_CODE ) ;
     END IF;
END;
/
CREATE OR REPLACE FUNCTION  F_GET_CUR_ACNT_YEAR
                                       (P_COMP_CODE   VARCHAR2)
                                        RETURN NUMBER IS
CURSOR F_PARA IS
       SELECT CAY_ACNT_YEAR
       FROM   FM_COMP_ACNT_YEAR
       WHERE  CAY_COMP_CODE = P_COMP_CODE
       AND    CAY_PREV_CURR_NEXT = 'C';
P_ACNT_YEAR     NUMBER(2);
Q_ACNT_YEAR     NUMBER(2);
BEGIN
     IF F_PARA%ISOPEN THEN
           CLOSE F_PARA;
     END IF;
     OPEN F_PARA;
     FETCH F_PARA INTO P_ACNT_YEAR;
     IF F_PARA%NOTFOUND THEN
        CLOSE F_PARA;
        RETURN(-1);
     ELSE
        FETCH F_PARA INTO Q_ACNT_YEAR;
        IF F_PARA%FOUND THEN
           CLOSE F_PARA;
           RETURN(-1);
        END IF;
        CLOSE F_PARA;
        RETURN(P_ACNT_YEAR);
     END IF;
END;
/
CREATE OR REPLACE FUNCTION  F_GET_FC_OPBAL
                            ( P_COMP_CODE VARCHAR2,
                              P_ASOF_DT DATE,
                              P_MAIN_ACNT_CODE VARCHAR2,
                              P_SUB_ACNT_CODE VARCHAR2,
                              P_CURR_CODE VARCHAR2)
                              RETURN NUMBER IS
P_OP_BAL   NUMBER(14,3);
BEGIN
     IF P_CURR_CODE IS NULL THEN
           RETURN(0);
     END IF;
     IF P_SUB_ACNT_CODE IS NULL THEN
       P_OP_BAL := F_GET_MAIN_FC_OPBAL( P_COMP_CODE ,
                              P_ASOF_DT , P_MAIN_ACNT_CODE, P_CURR_CODE );
     ELSE
       P_OP_BAL := F_GET_SUB_FC_OPBAL( P_COMP_CODE , P_ASOF_DT ,
                         P_MAIN_ACNT_CODE, P_SUB_ACNT_CODE, P_CURR_CODE );
     END IF;
     RETURN(P_OP_BAL);
END;
/
CREATE OR REPLACE PROCEDURE F_GET_LC_BAL
                 (P_COMP_CODE        IN      VARCHAR2,
                  P_ACNT_YEAR        IN      NUMBER,
                  P_MAIN_ACNT_CODE   IN      VARCHAR2,
                  P_SUB_ACNT_CODE    IN      VARCHAR2,
                  P_DIVN_CODE        IN      VARCHAR2,
                  P_DEPT_CODE        IN      VARCHAR2,
                  P_ANLY_CODE_1      IN      VARCHAR2,
                  P_ANLY_CODE_2      IN      VARCHAR2,
                  P_CAL_YEAR         IN      NUMBER,
                  P_CAL_MONTH        IN      NUMBER,
                  P_LC_AMT           OUT     NUMBER,
                  P_ERR_NO           OUT     NUMBER) AS
CURSOR F_PRV_ACNT_BAL IS
       SELECT SUM(ABAL_LC_MTD_DR), SUM(ABAL_LC_MTD_CR)
       FROM   FS_PRV_ACNT_BAL
       WHERE  ABAL_COMP_CODE = P_COMP_CODE
       AND    ABAL_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    NVL(ABAL_SUB_ACNT_CODE,'ZZZZZZZ') =
              NVL(P_SUB_ACNT_CODE,'ZZZZZZZ')
       AND    NVL(ABAL_DIVN_CODE,'ZZZZZZZ') =
              NVL(P_DIVN_CODE,'ZZZZZZZ')
       AND    NVL(ABAL_DEPT_CODE,'ZZZZZZZ') =
              NVL(P_DEPT_CODE,'ZZZZZZZ')
       AND    NVL(ABAL_ANLY_CODE_1,'ZZZZZZZ') =
              NVL(P_ANLY_CODE_1,'ZZZZZZZ')
       AND    NVL(ABAL_ANLY_CODE_2,'ZZZZZZZ') =
              NVL(P_ANLY_CODE_2,'ZZZZZZZ')
       AND    (ABAL_CAL_YEAR * 100 + ABAL_CAL_MONTH) <=
              (P_CAL_YEAR * 100 + P_CAL_MONTH)
       AND    ABAL_ACNT_YEAR = P_ACNT_YEAR;
CURSOR F_CUR_ACNT_BAL IS
       SELECT SUM(ABAL_LC_MTD_DR), SUM(ABAL_LC_MTD_CR)
       FROM   FS_CUR_ACNT_BAL
       WHERE  ABAL_COMP_CODE = P_COMP_CODE
       AND    ABAL_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    NVL(ABAL_SUB_ACNT_CODE,'ZZZZZZZ') =
              NVL(P_SUB_ACNT_CODE,'ZZZZZZZ')
       AND    NVL(ABAL_DIVN_CODE,'ZZZZZZZ') =
              NVL(P_DIVN_CODE,'ZZZZZZZ')
       AND    NVL(ABAL_DEPT_CODE,'ZZZZZZZ') =
              NVL(P_DEPT_CODE,'ZZZZZZZ')
       AND    NVL(ABAL_ANLY_CODE_1,'ZZZZZZZ') =
              NVL(P_ANLY_CODE_1,'ZZZZZZZ')
       AND    NVL(ABAL_ANLY_CODE_2,'ZZZZZZZ') =
              NVL(P_ANLY_CODE_2,'ZZZZZZZ')
       AND    (ABAL_CAL_YEAR * 100 + ABAL_CAL_MONTH) <=
              (P_CAL_YEAR * 100 + P_CAL_MONTH)
       AND    ABAL_ACNT_YEAR = P_ACNT_YEAR;
P_CUR_ACNT_YEAR  NUMBER(2);
P_LC_BAL_DR      NUMBER(14,3);
P_LC_BAL_CR      NUMBER(14,3);
BEGIN
   P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(P_COMP_CODE);
   P_ERR_NO := 0;
   P_LC_AMT := 0;
   IF P_ACNT_YEAR IS NULL OR P_COMP_CODE IS NULL OR
      P_CAL_MONTH IS NULL OR P_CAL_YEAR IS NULL OR
      P_MAIN_ACNT_CODE IS NULL THEN
      RAISE_APPLICATION_ERROR(-20460,
            'Company or Main account or Year and month cannot be null') ;
   END IF;
   P_LC_BAL_DR := 0;
   P_LC_BAL_CR := 0;
   IF P_ACNT_YEAR = P_CUR_ACNT_YEAR THEN
        IF F_CUR_ACNT_BAL%ISOPEN THEN
             CLOSE F_CUR_ACNT_BAL;
        END IF;
        OPEN  F_CUR_ACNT_BAL;
        FETCH F_CUR_ACNT_BAL INTO P_LC_BAL_DR, P_LC_BAL_CR;
        IF F_CUR_ACNT_BAL%NOTFOUND THEN
             P_LC_BAL_DR := 0;
             P_LC_BAL_CR := 0;
        END IF;
        CLOSE  F_CUR_ACNT_BAL;
   ELSE
        IF F_PRV_ACNT_BAL%ISOPEN THEN
             CLOSE F_PRV_ACNT_BAL;
        END IF;
        OPEN  F_PRV_ACNT_BAL;
        FETCH F_PRV_ACNT_BAL INTO P_LC_BAL_DR, P_LC_BAL_CR;
        IF F_PRV_ACNT_BAL%NOTFOUND THEN
             P_LC_BAL_DR := 0;
             P_LC_BAL_CR := 0;
        END IF;
        CLOSE  F_PRV_ACNT_BAL;
   END IF;
   P_LC_AMT := NVL(P_LC_BAL_DR,0) - NVL(P_LC_BAL_CR,0);
END;
/
CREATE OR REPLACE FUNCTION  F_GET_LC_OPBAL
                            ( P_COMP_CODE VARCHAR2,
                              P_ASOF_DT DATE,
                              P_MAIN_ACNT_CODE VARCHAR2,
                              P_SUB_ACNT_CODE VARCHAR2,
                              P_CURR_CODE VARCHAR2)
                              RETURN NUMBER IS
P_OP_BAL   NUMBER(14,3);
BEGIN
     IF P_SUB_ACNT_CODE IS NULL THEN
       P_OP_BAL := F_GET_MAIN_LC_OPBAL( P_COMP_CODE ,
                              P_ASOF_DT , P_MAIN_ACNT_CODE, P_CURR_CODE);
     ELSE
       P_OP_BAL := F_GET_SUB_LC_OPBAL( P_COMP_CODE , P_ASOF_DT ,
                        P_MAIN_ACNT_CODE, P_SUB_ACNT_CODE, P_CURR_CODE);
     END IF;
     RETURN(P_OP_BAL);
END;
/
CREATE OR REPLACE FUNCTION  F_GET_LOGO_NAME
                            ( P_R_KEY_NO  NUMBER  )
                              RETURN VARCHAR2 IS
CURSOR F_LOGO_NAME   IS
    SELECT LG_LOGO_NAME
      FROM FM_COMPANY_LOGO, FP_REP_INFO
     WHERE LG_COMP_CODE = SUBSTR( REP_VALUE_1, 1, 3 )
       AND REP_KEY_NO  = P_R_KEY_NO    ;
P_LOGO_NAME VARCHAR2( 30 ) ;
BEGIN
     IF F_LOGO_NAME%ISOPEN THEN
           CLOSE F_LOGO_NAME  ;
     END IF;
     OPEN F_LOGO_NAME ;
     FETCH F_LOGO_NAME INTO P_LOGO_NAME ;
     IF F_LOGO_NAME%NOTFOUND THEN
        CLOSE F_LOGO_NAME ;
        P_LOGO_NAME := '' ;
     ELSE
        CLOSE F_LOGO_NAME ;
     END IF;
     RETURN  P_LOGO_NAME ;
END;
/
CREATE OR REPLACE FUNCTION  F_GET_MAIN_FC_OPBAL
                            ( P_COMP_CODE VARCHAR2,
                              P_ASOF_DT DATE,
                              P_MAIN_ACNT_CODE VARCHAR2,
                              P_CURR_CODE VARCHAR2)
                              RETURN NUMBER IS
P_CUR_ACNT_YEAR NUMBER(2);
P_ACNT_YEAR     NUMBER(2);
P_CAL_YEAR      NUMBER(4);
P_CAL_MONTH     NUMBER(2);
P_FRM_DT        DATE;
P_TMP_ASOF_DT   DATE;
P_OP_BAL  NUMBER(14,3);
P_TRAN    NUMBER(14,3);
CURSOR F_ACNT_PERIOD IS
       SELECT APER_ACNT_YEAR, APER_CAL_YEAR, APER_CAL_MONTH,
              TO_DATE(TO_CHAR(APER_FRM_DT))
       FROM   FM_ACNT_PERIOD
       WHERE  (APER_COMP_CODE = P_COMP_CODE)
       AND    (P_TMP_ASOF_DT BETWEEN APER_FRM_DT AND APER_TO_DT);
CURSOR F_CUR_OP_BAL  IS
       SELECT SUM(NVL(ABAL_FC_MTD_DR,0) - NVL(ABAL_FC_MTD_CR,0))
       FROM   FS_CUR_ACNT_BAL
       WHERE  ABAL_COMP_CODE = P_COMP_CODE
       AND    ABAL_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    ABAL_CURR_CODE = P_CURR_CODE
       AND    ABAL_ACNT_YEAR = P_ACNT_YEAR
       AND    (((ABAL_CAL_YEAR = P_CAL_YEAR) AND
                (ABAL_CAL_MONTH < P_CAL_MONTH)) OR
               (ABAL_CAL_YEAR < P_CAL_YEAR));
CURSOR F_PRV_OP_BAL  IS
       SELECT SUM(NVL(ABAL_FC_MTD_DR,0) - NVL(ABAL_FC_MTD_CR,0))
       FROM   FS_PRV_ACNT_BAL
       WHERE  ABAL_COMP_CODE = P_COMP_CODE
       AND    ABAL_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    ABAL_CURR_CODE = P_CURR_CODE
       AND    ABAL_ACNT_YEAR = P_ACNT_YEAR
       AND    (((ABAL_CAL_YEAR = P_CAL_YEAR) AND
                (ABAL_CAL_MONTH < P_CAL_MONTH)) OR
               (ABAL_CAL_YEAR < P_CAL_YEAR));
CURSOR F_CUR_TRAN  IS
       SELECT SUM(DECODE(TD_DOC_DRCR_FLAG, 'D',1,'C',-1,0) *
                  NVL(TD_DOC_AMT, 0))
       FROM   FT_CUR_TRANS_DETAIL, FT_CUR_TRANS_HEADER
       WHERE  TH_COMP_CODE   = P_COMP_CODE
       AND    TH_DOC_DT BETWEEN P_FRM_DT AND (P_TMP_ASOF_DT - 1)
       AND    TH_ACNT_YEAR = P_ACNT_YEAR
       AND    TD_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    TD_CURR_CODE = P_CURR_CODE
       AND    TH_COMP_CODE   = TD_COMP_CODE
       AND    TH_ACNT_YEAR   = TD_ACNT_YEAR
       AND    TH_TRAN_CODE   = TD_TRAN_CODE
       AND    TH_DOC_NO      = TD_DOC_NO;
CURSOR F_PRV_TRAN  IS
       SELECT SUM(DECODE(TD_DOC_DRCR_FLAG, 'D',1,'C',-1,0) *
                  NVL(TD_DOC_AMT, 0))
       FROM   FT_PRV_TRANS_DETAIL, FT_PRV_TRANS_HEADER
       WHERE  TH_COMP_CODE   = P_COMP_CODE
       AND    TH_DOC_DT BETWEEN P_FRM_DT AND (P_TMP_ASOF_DT - 1)
       AND    TH_ACNT_YEAR = P_ACNT_YEAR
       AND    TD_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    TD_CURR_CODE = P_CURR_CODE
       AND    TH_COMP_CODE   = TD_COMP_CODE
       AND    TH_ACNT_YEAR   = TD_ACNT_YEAR
       AND    TH_TRAN_CODE   = TD_TRAN_CODE
       AND    TH_DOC_NO      = TD_DOC_NO;
BEGIN
     P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(P_COMP_CODE);
     P_TMP_ASOF_DT := TO_DATE(TO_CHAR(P_ASOF_DT));
     IF F_ACNT_PERIOD%ISOPEN THEN
           CLOSE F_ACNT_PERIOD;
     END IF;
     OPEN F_ACNT_PERIOD;
     FETCH F_ACNT_PERIOD INTO P_ACNT_YEAR, P_CAL_YEAR,
                              P_CAL_MONTH, P_FRM_DT   ;
     IF F_ACNT_PERIOD%NOTFOUND THEN
          CLOSE F_ACNT_PERIOD;
          RETURN(0);
     END IF;
     IF P_ACNT_YEAR = P_CUR_ACNT_YEAR THEN
         IF F_CUR_OP_BAL%ISOPEN THEN
               CLOSE F_CUR_OP_BAL ;
         END IF;
         OPEN F_CUR_OP_BAL ;
         FETCH F_CUR_OP_BAL INTO P_OP_BAL ;
         IF F_CUR_OP_BAL%NOTFOUND THEN
            P_OP_BAL := 0;
         END IF;
         CLOSE F_CUR_OP_BAL ;
         IF P_FRM_DT = P_TMP_ASOF_DT THEN
            RETURN(P_OP_BAL);
         END IF;
         IF F_CUR_TRAN%ISOPEN THEN
               CLOSE F_CUR_TRAN ;
         END IF;
         OPEN F_CUR_TRAN ;
         FETCH F_CUR_TRAN INTO P_TRAN ;
         IF F_CUR_TRAN%NOTFOUND THEN
            P_TRAN := 0;
         END IF;
         CLOSE F_CUR_TRAN ;
         P_OP_BAL := NVL(P_OP_BAL,0) + NVL(P_TRAN,0);
         RETURN(P_OP_BAL);
     ELSE
         IF F_PRV_OP_BAL%ISOPEN THEN
               CLOSE F_PRV_OP_BAL ;
         END IF;
         OPEN F_PRV_OP_BAL ;
         FETCH F_PRV_OP_BAL INTO P_OP_BAL ;
         IF F_PRV_OP_BAL%NOTFOUND THEN
            P_OP_BAL := 0;
         END IF;
         CLOSE F_PRV_OP_BAL ;
         IF P_FRM_DT = P_TMP_ASOF_DT THEN
            RETURN(P_OP_BAL);
         END IF;
         IF F_PRV_TRAN%ISOPEN THEN
               CLOSE F_PRV_TRAN ;
         END IF;
         OPEN F_PRV_TRAN ;
         FETCH F_PRV_TRAN INTO P_TRAN ;
         IF F_PRV_TRAN%NOTFOUND THEN
            P_TRAN := 0;
         END IF;
         CLOSE F_PRV_TRAN ;
         P_OP_BAL := NVL(P_OP_BAL,0) + NVL(P_TRAN,0);
         RETURN(P_OP_BAL);
     END IF;
END;
/
CREATE OR REPLACE FUNCTION  F_GET_MAIN_LC_OPBAL
                            ( P_COMP_CODE VARCHAR2,
                              P_ASOF_DT DATE,
                              P_MAIN_ACNT_CODE VARCHAR2,
                              P_CURR_CODE VARCHAR2)
                              RETURN NUMBER IS
P_CUR_ACNT_YEAR NUMBER(2);
P_ACNT_YEAR     NUMBER(2);
P_CAL_YEAR      NUMBER(4);
P_CAL_MONTH     NUMBER(2);
P_FRM_DT        DATE;
P_TMP_ASOF_DT   DATE;
P_OP_BAL  NUMBER(14,3);
P_TRAN    NUMBER(14,3);
CURSOR F_ACNT_PERIOD IS
       SELECT APER_ACNT_YEAR, APER_CAL_YEAR, APER_CAL_MONTH,
              TO_DATE(TO_CHAR(APER_FRM_DT))
       FROM   FM_ACNT_PERIOD
       WHERE  (APER_COMP_CODE = P_COMP_CODE)
       AND    (P_TMP_ASOF_DT BETWEEN APER_FRM_DT AND APER_TO_DT);
CURSOR F_CUR_OP_BAL  IS
       SELECT SUM(NVL(ABAL_LC_MTD_DR,0) - NVL(ABAL_LC_MTD_CR,0))
       FROM   FS_CUR_ACNT_BAL
       WHERE  ABAL_COMP_CODE = P_COMP_CODE
       AND    ABAL_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    NVL(ABAL_CURR_CODE, 'XXXX') =
                 NVL(P_CURR_CODE, NVL(ABAL_CURR_CODE,'XXXX'))
       AND    ABAL_ACNT_YEAR = P_ACNT_YEAR
       AND    (((ABAL_CAL_YEAR = P_CAL_YEAR) AND
                (ABAL_CAL_MONTH < P_CAL_MONTH)) OR
               (ABAL_CAL_YEAR < P_CAL_YEAR));
CURSOR F_PRV_OP_BAL  IS
       SELECT SUM(NVL(ABAL_LC_MTD_DR,0) - NVL(ABAL_LC_MTD_CR,0))
       FROM   FS_PRV_ACNT_BAL
       WHERE  ABAL_COMP_CODE = P_COMP_CODE
       AND    ABAL_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    NVL(ABAL_CURR_CODE,'XXXX') =
                 NVL(P_CURR_CODE, NVL(ABAL_CURR_CODE,'XXXX'))
       AND    ABAL_ACNT_YEAR = P_ACNT_YEAR
       AND    (((ABAL_CAL_YEAR = P_CAL_YEAR) AND
                (ABAL_CAL_MONTH < P_CAL_MONTH)) OR
               (ABAL_CAL_YEAR < P_CAL_YEAR));
CURSOR F_CUR_TRAN  IS
       SELECT SUM(DECODE(TD_DOC_DRCR_FLAG, 'D',1,'C',-1,0) *
                  NVL(TD_DOC_AMT, 0))
       FROM   FT_CUR_TRANS_DETAIL, FT_CUR_TRANS_HEADER
       WHERE  TH_COMP_CODE   = P_COMP_CODE
       AND    TH_DOC_DT BETWEEN P_FRM_DT AND (P_TMP_ASOF_DT - 1)
       AND    TH_ACNT_YEAR = P_ACNT_YEAR
       AND    TD_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    NVL(TD_CURR_CODE,'XXXX') =
                 NVL(P_CURR_CODE, NVL(TD_CURR_CODE,'XXXX'))
       AND    TH_COMP_CODE   = TD_COMP_CODE
       AND    TH_ACNT_YEAR   = TD_ACNT_YEAR
       AND    TH_TRAN_CODE   = TD_TRAN_CODE
       AND    TH_DOC_NO      = TD_DOC_NO;
CURSOR F_PRV_TRAN  IS
       SELECT SUM(DECODE(TD_DOC_DRCR_FLAG, 'D',1,'C',-1,0) *
                  NVL(TD_DOC_AMT, 0))
       FROM   FT_PRV_TRANS_DETAIL, FT_PRV_TRANS_HEADER
       WHERE  TH_COMP_CODE   = P_COMP_CODE
       AND    TH_DOC_DT BETWEEN P_FRM_DT AND (P_TMP_ASOF_DT - 1)
       AND    TH_ACNT_YEAR = P_ACNT_YEAR
       AND    TD_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    NVL(TD_CURR_CODE,'XXXX') =
                 NVL(P_CURR_CODE, NVL(TD_CURR_CODE,'XXXX'))
       AND    TH_COMP_CODE   = TD_COMP_CODE
       AND    TH_ACNT_YEAR   = TD_ACNT_YEAR
       AND    TH_TRAN_CODE   = TD_TRAN_CODE
       AND    TH_DOC_NO      = TD_DOC_NO;
BEGIN
     P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(P_COMP_CODE);
     P_TMP_ASOF_DT := TO_DATE(TO_CHAR(P_ASOF_DT));
     IF F_ACNT_PERIOD%ISOPEN THEN
           CLOSE F_ACNT_PERIOD;
     END IF;
     OPEN F_ACNT_PERIOD;
     FETCH F_ACNT_PERIOD INTO P_ACNT_YEAR, P_CAL_YEAR,
                              P_CAL_MONTH, P_FRM_DT   ;
     IF F_ACNT_PERIOD%NOTFOUND THEN
          CLOSE F_ACNT_PERIOD;
          RETURN(0);
     END IF;
     IF P_ACNT_YEAR = P_CUR_ACNT_YEAR THEN
         IF F_CUR_OP_BAL%ISOPEN THEN
               CLOSE F_CUR_OP_BAL ;
         END IF;
         OPEN F_CUR_OP_BAL ;
         FETCH F_CUR_OP_BAL INTO P_OP_BAL ;
         IF F_CUR_OP_BAL%NOTFOUND THEN
            P_OP_BAL := 0;
         END IF;
         CLOSE F_CUR_OP_BAL ;
         IF P_FRM_DT = P_TMP_ASOF_DT THEN
            RETURN(P_OP_BAL);
         END IF;
         IF F_CUR_TRAN%ISOPEN THEN
               CLOSE F_CUR_TRAN ;
         END IF;
         OPEN F_CUR_TRAN ;
         FETCH F_CUR_TRAN INTO P_TRAN ;
         IF F_CUR_TRAN%NOTFOUND THEN
            P_TRAN := 0;
         END IF;
         CLOSE F_CUR_TRAN ;
         P_OP_BAL := NVL(P_OP_BAL,0) + NVL(P_TRAN,0);
         RETURN(P_OP_BAL);
     ELSE
         IF F_PRV_OP_BAL%ISOPEN THEN
               CLOSE F_PRV_OP_BAL ;
         END IF;
         OPEN F_PRV_OP_BAL ;
         FETCH F_PRV_OP_BAL INTO P_OP_BAL ;
         IF F_PRV_OP_BAL%NOTFOUND THEN
            P_OP_BAL := 0;
         END IF;
         CLOSE F_PRV_OP_BAL ;
         IF P_FRM_DT = P_TMP_ASOF_DT THEN
            RETURN(P_OP_BAL);
         END IF;
         IF F_PRV_TRAN%ISOPEN THEN
               CLOSE F_PRV_TRAN ;
         END IF;
         OPEN F_PRV_TRAN ;
         FETCH F_PRV_TRAN INTO P_TRAN ;
         IF F_PRV_TRAN%NOTFOUND THEN
            P_TRAN := 0;
         END IF;
         CLOSE F_PRV_TRAN ;
         P_OP_BAL := NVL(P_OP_BAL,0) + NVL(P_TRAN,0);
         RETURN(P_OP_BAL);
     END IF;
END;
/
CREATE OR REPLACE FUNCTION F_GET_REPORTS_ERROR
                 (P_ERRNO IN NUMBER,
                  P_LANG IN VARCHAR2,
                  P_FIELD_NAME VARCHAR2 ) RETURN VARCHAR2 IS
    CURSOR ERROR_CUR IS
        SELECT EM_ERR_MSG
        FROM   FP_ERROR_MESSAGE
        WHERE  EM_ERR_NO    =  P_ERRNO
        AND    EM_LANG_CODE =  P_LANG;
    P_ERR_MSG     VARCHAR2(65);
BEGIN
    OPEN ERROR_CUR;
    FETCH ERROR_CUR INTO P_ERR_MSG;
    IF ERROR_CUR%NOTFOUND THEN
       P_ERR_MSG := TO_CHAR( P_ERRNO ) || ' Error code does not Exist in Error Table';
    ELSE
       P_ERR_MSG := P_FIELD_NAME || ' ' || P_ERR_MSG ;
    END IF;
    CLOSE ERROR_CUR;
    RETURN(P_ERR_MSG);
END;
/
CREATE OR REPLACE FUNCTION F_GET_STD_ERROR
                 (P_ERRNO     IN NUMBER,
                  P_LANG      IN VARCHAR2 )
                  RETURN VARCHAR2 IS
    CURSOR ERROR_CUR IS
        SELECT EM_ERR_MSG
        FROM   FP_ERROR_MESSAGE
        WHERE  EM_ERR_NO    =  P_ERRNO
        AND    EM_LANG_CODE =  P_LANG;
    P_ERR_MSG     VARCHAR2(65);
BEGIN
    OPEN ERROR_CUR;
    FETCH ERROR_CUR INTO P_ERR_MSG;
    IF ERROR_CUR%NOTFOUND THEN
       P_ERR_MSG := TO_CHAR( P_ERRNO ) ||
                    ' Error code does not Exist in Error Master ';
    END IF;
    CLOSE ERROR_CUR;
    RETURN(P_ERR_MSG);
END;
/
CREATE OR REPLACE FUNCTION  F_GET_SUB_FC_OPBAL
                            ( P_COMP_CODE VARCHAR2,
                              P_ASOF_DT DATE,
                              P_MAIN_ACNT_CODE VARCHAR2,
                              P_SUB_ACNT_CODE VARCHAR2,
                              P_CURR_CODE VARCHAR2)
                              RETURN NUMBER IS
P_CUR_ACNT_YEAR NUMBER(2);
P_ACNT_YEAR     NUMBER(2);
P_CAL_YEAR      NUMBER(4);
P_CAL_MONTH     NUMBER(2);
P_FRM_DT        DATE;
P_TMP_ASOF_DT   DATE;
P_OP_BAL  NUMBER(14,3);
P_TRAN    NUMBER(14,3);
CURSOR F_ACNT_PERIOD IS
       SELECT APER_ACNT_YEAR, APER_CAL_YEAR, APER_CAL_MONTH,
              TO_DATE(TO_CHAR(APER_FRM_DT))
       FROM   FM_ACNT_PERIOD
       WHERE  (APER_COMP_CODE = P_COMP_CODE)
       AND    (P_TMP_ASOF_DT BETWEEN APER_FRM_DT AND APER_TO_DT);
CURSOR F_CUR_OP_BAL  IS
       SELECT SUM(NVL(ABAL_FC_MTD_DR,0) - NVL(ABAL_FC_MTD_CR,0))
       FROM   FS_CUR_ACNT_BAL
       WHERE  ABAL_COMP_CODE = P_COMP_CODE
       AND    ABAL_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    ABAL_SUB_ACNT_CODE = P_SUB_ACNT_CODE
       AND    ABAL_CURR_CODE = P_CURR_CODE
       AND    ABAL_ACNT_YEAR = P_ACNT_YEAR
       AND    (((ABAL_CAL_YEAR = P_CAL_YEAR) AND
                (ABAL_CAL_MONTH < P_CAL_MONTH)) OR
               (ABAL_CAL_YEAR < P_CAL_YEAR));
CURSOR F_PRV_OP_BAL  IS
       SELECT SUM(NVL(ABAL_FC_MTD_DR,0) - NVL(ABAL_FC_MTD_CR,0))
       FROM   FS_PRV_ACNT_BAL
       WHERE  ABAL_COMP_CODE = P_COMP_CODE
       AND    ABAL_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    ABAL_SUB_ACNT_CODE = P_SUB_ACNT_CODE
       AND    ABAL_CURR_CODE = P_CURR_CODE
       AND    ABAL_ACNT_YEAR = P_ACNT_YEAR
       AND    (((ABAL_CAL_YEAR = P_CAL_YEAR) AND
                (ABAL_CAL_MONTH < P_CAL_MONTH)) OR
               (ABAL_CAL_YEAR < P_CAL_YEAR));
CURSOR F_CUR_TRAN  IS
       SELECT SUM(DECODE(TD_DOC_DRCR_FLAG, 'D',1,'C',-1,0) *
                  NVL(TD_DOC_AMT, 0))
       FROM   FT_CUR_TRANS_DETAIL, FT_CUR_TRANS_HEADER
       WHERE  TH_COMP_CODE   = P_COMP_CODE
       AND    TH_DOC_DT BETWEEN P_FRM_DT AND (P_TMP_ASOF_DT - 1)
       AND    TH_ACNT_YEAR = P_ACNT_YEAR
       AND    TD_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    TD_SUB_ACNT_CODE = P_SUB_ACNT_CODE
       AND    TD_CURR_CODE = P_CURR_CODE
       AND    TH_COMP_CODE   = TD_COMP_CODE
       AND    TH_ACNT_YEAR   = TD_ACNT_YEAR
       AND    TH_TRAN_CODE   = TD_TRAN_CODE
       AND    TH_DOC_NO      = TD_DOC_NO;
CURSOR F_PRV_TRAN  IS
       SELECT SUM(DECODE(TD_DOC_DRCR_FLAG, 'D',1,'C',-1,0) *
                  NVL(TD_DOC_AMT, 0))
       FROM   FT_PRV_TRANS_DETAIL, FT_PRV_TRANS_HEADER
       WHERE  TH_COMP_CODE   = P_COMP_CODE
       AND    TH_DOC_DT BETWEEN P_FRM_DT AND (P_TMP_ASOF_DT - 1)
       AND    TH_ACNT_YEAR = P_ACNT_YEAR
       AND    TD_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    TD_SUB_ACNT_CODE = P_SUB_ACNT_CODE
       AND    TD_CURR_CODE = P_CURR_CODE
       AND    TH_COMP_CODE   = TD_COMP_CODE
       AND    TH_ACNT_YEAR   = TD_ACNT_YEAR
       AND    TH_TRAN_CODE   = TD_TRAN_CODE
       AND    TH_DOC_NO      = TD_DOC_NO;
BEGIN
     P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(P_COMP_CODE);
     P_TMP_ASOF_DT := TO_DATE(TO_CHAR(P_ASOF_DT));
     IF F_ACNT_PERIOD%ISOPEN THEN
           CLOSE F_ACNT_PERIOD;
     END IF;
     OPEN F_ACNT_PERIOD;
     FETCH F_ACNT_PERIOD INTO P_ACNT_YEAR, P_CAL_YEAR,
                              P_CAL_MONTH, P_FRM_DT   ;
     IF F_ACNT_PERIOD%NOTFOUND THEN
          CLOSE F_ACNT_PERIOD;
          RETURN(0);
     END IF;
     IF P_ACNT_YEAR = P_CUR_ACNT_YEAR THEN
         IF F_CUR_OP_BAL%ISOPEN THEN
               CLOSE F_CUR_OP_BAL ;
         END IF;
         OPEN F_CUR_OP_BAL ;
         FETCH F_CUR_OP_BAL INTO P_OP_BAL ;
         IF F_CUR_OP_BAL%NOTFOUND THEN
            P_OP_BAL := 0;
         END IF;
         CLOSE F_CUR_OP_BAL ;
         IF P_FRM_DT = P_TMP_ASOF_DT THEN
            RETURN(P_OP_BAL);
         END IF;
         IF F_CUR_TRAN%ISOPEN THEN
               CLOSE F_CUR_TRAN ;
         END IF;
         OPEN F_CUR_TRAN ;
         FETCH F_CUR_TRAN INTO P_TRAN ;
         IF F_CUR_TRAN%NOTFOUND THEN
            P_TRAN := 0;
         END IF;
         CLOSE F_CUR_TRAN ;
         P_OP_BAL := NVL(P_OP_BAL,0) + NVL(P_TRAN,0);
         RETURN(P_OP_BAL);
     ELSE
         IF F_PRV_OP_BAL%ISOPEN THEN
               CLOSE F_PRV_OP_BAL ;
         END IF;
         OPEN F_PRV_OP_BAL ;
         FETCH F_PRV_OP_BAL INTO P_OP_BAL ;
         IF F_PRV_OP_BAL%NOTFOUND THEN
            P_OP_BAL := 0;
         END IF;
         CLOSE F_PRV_OP_BAL ;
         IF P_FRM_DT = P_TMP_ASOF_DT THEN
            RETURN(P_OP_BAL);
         END IF;
         IF F_PRV_TRAN%ISOPEN THEN
               CLOSE F_PRV_TRAN ;
         END IF;
         OPEN F_PRV_TRAN ;
         FETCH F_PRV_TRAN INTO P_TRAN ;
         IF F_PRV_TRAN%NOTFOUND THEN
            P_TRAN := 0;
         END IF;
         CLOSE F_PRV_TRAN ;
         P_OP_BAL := NVL(P_OP_BAL,0) + NVL(P_TRAN,0);
         RETURN(P_OP_BAL);
     END IF;
END;
/
CREATE OR REPLACE PROCEDURE  F_GET_SUB_LC_BAL
                            ( P_COMP_CODE      VARCHAR2,
                              P_ASOF_DT        DATE,
                              P_MAIN_ACNT_CODE VARCHAR2,
                              P_SUB_ACNT_CODE  VARCHAR2,
                              P_CURR_CODE      VARCHAR2,
                              P_MTD_DR  OUT    NUMBER,
                              P_MTD_CR  OUT    NUMBER,
                              P_OPBAL   OUT    NUMBER,
                              P_ERR_NO  OUT    NUMBER) AS
P_CUR_ACNT_YEAR NUMBER(2);
P_ACNT_YEAR     NUMBER(2);
P_CAL_YEAR      NUMBER(4);
P_CAL_MONTH     NUMBER(2);
P_FRM_DT        DATE;
P_TMP_ASOF_DT   DATE;
P_DR_MTD        NUMBER(14,3);
P_CR_MTD        NUMBER(14,3);
P_OP_BAL        NUMBER(14,3);
P_TRAN_DR       NUMBER(14,3);
P_TRAN_CR       NUMBER(14,3);
CURSOR F_ACNT_PERIOD IS
       SELECT APER_ACNT_YEAR, APER_CAL_YEAR, APER_CAL_MONTH,
              TO_DATE(TO_CHAR(APER_FRM_DT,'YYYYMMDD'),'YYYYMMDD')
       FROM   FM_ACNT_PERIOD
       WHERE  (APER_COMP_CODE = P_COMP_CODE)
       AND    (P_TMP_ASOF_DT BETWEEN APER_FRM_DT AND APER_TO_DT);
CURSOR F_CUR_OP_BAL  IS
       SELECT SUM(NVL(ABAL_LC_MTD_DR,0)),
              SUM(NVL(ABAL_LC_MTD_CR,0)),
              SUM(NVL(ABAL_LC_MTD_DR,0) - NVL(ABAL_LC_MTD_CR,0))
       FROM   FS_CUR_ACNT_BAL
       WHERE  ABAL_COMP_CODE = P_COMP_CODE
       AND    ABAL_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    ABAL_SUB_ACNT_CODE = P_SUB_ACNT_CODE
       AND    ABAL_ACNT_YEAR = P_ACNT_YEAR
       AND    NVL(ABAL_CURR_CODE,'XXXX') =
                 NVL(P_CURR_CODE, NVL(ABAL_CURR_CODE,'XXXX'))
       AND    (((ABAL_CAL_YEAR = P_CAL_YEAR) AND
                (ABAL_CAL_MONTH < P_CAL_MONTH)) OR
               (ABAL_CAL_YEAR < P_CAL_YEAR));
CURSOR F_PRV_OP_BAL  IS
       SELECT SUM(NVL(ABAL_LC_MTD_DR,0)),
              SUM(NVL(ABAL_LC_MTD_CR,0)),
              SUM(NVL(ABAL_LC_MTD_DR,0) - NVL(ABAL_LC_MTD_CR,0))
       FROM   FS_PRV_ACNT_BAL
       WHERE  ABAL_COMP_CODE = P_COMP_CODE
       AND    ABAL_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    ABAL_SUB_ACNT_CODE = P_SUB_ACNT_CODE
       AND    ABAL_ACNT_YEAR = P_ACNT_YEAR
       AND    NVL(ABAL_CURR_CODE,'XXXX') =
                 NVL(P_CURR_CODE, NVL(ABAL_CURR_CODE,'XXXX'))
       AND    (((ABAL_CAL_YEAR = P_CAL_YEAR) AND
                (ABAL_CAL_MONTH < P_CAL_MONTH)) OR
               (ABAL_CAL_YEAR < P_CAL_YEAR));
CURSOR F_CUR_TRAN_DR  IS
       SELECT SUM(NVL(TD_DOC_AMT, 0))
       FROM   FT_CUR_TRANS_DETAIL, FT_CUR_TRANS_HEADER
       WHERE  TH_COMP_CODE   = P_COMP_CODE
       AND    TH_DOC_DT BETWEEN P_FRM_DT AND (P_TMP_ASOF_DT - 1)
       AND    TH_ACNT_YEAR = P_ACNT_YEAR
       AND    TD_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    TD_SUB_ACNT_CODE = P_SUB_ACNT_CODE
       AND    NVL(TD_CURR_CODE,'XXXX') =
                 NVL(P_CURR_CODE, NVL(TD_CURR_CODE,'XXXX'))
       AND    TH_COMP_CODE   = TD_COMP_CODE
       AND    TH_ACNT_YEAR   = TD_ACNT_YEAR
       AND    TH_TRAN_CODE   = TD_TRAN_CODE
       AND    TH_DOC_NO      = TD_DOC_NO
       AND    TD_DOC_DRCR_FLAG = 'D';
CURSOR F_CUR_TRAN_CR  IS
       SELECT SUM(NVL(TD_DOC_AMT, 0))
       FROM   FT_CUR_TRANS_DETAIL, FT_CUR_TRANS_HEADER
       WHERE  TH_COMP_CODE   = P_COMP_CODE
       AND    TH_DOC_DT BETWEEN P_FRM_DT AND (P_TMP_ASOF_DT - 1)
       AND    TH_ACNT_YEAR = P_ACNT_YEAR
       AND    TD_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    TD_SUB_ACNT_CODE = P_SUB_ACNT_CODE
       AND    NVL(TD_CURR_CODE,'XXXX') =
                 NVL(P_CURR_CODE, NVL(TD_CURR_CODE,'XXXX'))
       AND    TH_COMP_CODE   = TD_COMP_CODE
       AND    TH_ACNT_YEAR   = TD_ACNT_YEAR
       AND    TH_TRAN_CODE   = TD_TRAN_CODE
       AND    TH_DOC_NO      = TD_DOC_NO
       AND    TD_DOC_DRCR_FLAG = 'C';
CURSOR F_PRV_TRAN_DR  IS
       SELECT SUM(NVL(TD_DOC_AMT, 0))
       FROM   FT_PRV_TRANS_DETAIL, FT_PRV_TRANS_HEADER
       WHERE  TH_COMP_CODE   = P_COMP_CODE
       AND    TH_DOC_DT BETWEEN P_FRM_DT AND (P_TMP_ASOF_DT - 1)
       AND    TH_ACNT_YEAR = P_ACNT_YEAR
       AND    TD_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    TD_SUB_ACNT_CODE = P_SUB_ACNT_CODE
       AND    NVL(TD_CURR_CODE,'XXXX') =
                 NVL(P_CURR_CODE, NVL(TD_CURR_CODE,'XXXX'))
       AND    TH_COMP_CODE   = TD_COMP_CODE
       AND    TH_ACNT_YEAR   = TD_ACNT_YEAR
       AND    TH_TRAN_CODE   = TD_TRAN_CODE
       AND    TH_DOC_NO      = TD_DOC_NO
       AND    TD_DOC_DRCR_FLAG = 'D';
CURSOR F_PRV_TRAN_CR  IS
       SELECT SUM(NVL(TD_DOC_AMT, 0))
       FROM   FT_PRV_TRANS_DETAIL, FT_PRV_TRANS_HEADER
       WHERE  TH_COMP_CODE   = P_COMP_CODE
       AND    TH_DOC_DT BETWEEN P_FRM_DT AND (P_TMP_ASOF_DT - 1)
       AND    TH_ACNT_YEAR = P_ACNT_YEAR
       AND    TD_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    TD_SUB_ACNT_CODE = P_SUB_ACNT_CODE
       AND    NVL(TD_CURR_CODE,'XXXX') =
                 NVL(P_CURR_CODE, NVL(TD_CURR_CODE,'XXXX'))
       AND    TH_COMP_CODE   = TD_COMP_CODE
       AND    TH_ACNT_YEAR   = TD_ACNT_YEAR
       AND    TH_TRAN_CODE   = TD_TRAN_CODE
       AND    TH_DOC_NO      = TD_DOC_NO
       AND    TD_DOC_DRCR_FLAG = 'C';
BEGIN
     P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(P_COMP_CODE);
     P_TMP_ASOF_DT := TO_DATE(TO_CHAR(P_ASOF_DT,'YYYYMMDD'),'YYYYMMDD');
     IF F_ACNT_PERIOD%ISOPEN THEN
           CLOSE F_ACNT_PERIOD;
     END IF;
     OPEN F_ACNT_PERIOD;
     FETCH F_ACNT_PERIOD INTO P_ACNT_YEAR, P_CAL_YEAR,
                              P_CAL_MONTH, P_FRM_DT   ;
     IF F_ACNT_PERIOD%NOTFOUND THEN
        CLOSE F_ACNT_PERIOD;
        RAISE_APPLICATION_ERROR(-20120,
            'Invalid Accounting period') ;
     END IF;
     IF P_ACNT_YEAR = P_CUR_ACNT_YEAR THEN
         IF F_CUR_OP_BAL%ISOPEN THEN
               CLOSE F_CUR_OP_BAL ;
         END IF;
         OPEN F_CUR_OP_BAL ;
         FETCH F_CUR_OP_BAL INTO P_DR_MTD, P_CR_MTD, P_OP_BAL ;
         IF F_CUR_OP_BAL%NOTFOUND THEN
            P_OP_BAL := 0;
         END IF;
         CLOSE F_CUR_OP_BAL ;
         IF P_FRM_DT = P_TMP_ASOF_DT THEN
            P_MTD_DR  :=  NVL(P_DR_MTD,0) + NVL(P_TRAN_DR,0) ;
            P_MTD_CR  :=  NVL(P_CR_MTD,0) + NVL(P_TRAN_CR,0) ;
           P_OP_BAL := NVL(P_OP_BAL,0) + (NVL(P_TRAN_DR,0) - NVL(P_TRAN_CR,0));
         END IF;
         IF F_CUR_TRAN_DR%ISOPEN THEN
               CLOSE F_CUR_TRAN_DR ;
         END IF;
         OPEN F_CUR_TRAN_DR ;
         FETCH F_CUR_TRAN_DR INTO P_TRAN_DR ;
         IF F_CUR_TRAN_DR%NOTFOUND THEN
            P_TRAN_DR := 0;
         END IF;
         CLOSE F_CUR_TRAN_DR ;
         IF F_CUR_TRAN_CR%ISOPEN THEN
               CLOSE F_CUR_TRAN_CR ;
         END IF;
         OPEN F_CUR_TRAN_CR ;
         FETCH F_CUR_TRAN_CR INTO P_TRAN_CR ;
         IF F_CUR_TRAN_CR%NOTFOUND THEN
            P_TRAN_CR := 0;
         END IF;
         CLOSE F_CUR_TRAN_CR ;
         P_MTD_DR  :=  NVL(P_DR_MTD,0) + NVL(P_TRAN_DR,0) ;
         P_MTD_CR  :=  NVL(P_CR_MTD,0) + NVL(P_TRAN_CR,0) ;
         P_OP_BAL := NVL(P_OP_BAL,0) + (NVL(P_TRAN_DR,0) - NVL(P_TRAN_CR,0));
     ELSE
         IF F_PRV_OP_BAL%ISOPEN THEN
               CLOSE F_PRV_OP_BAL ;
         END IF;
         OPEN F_PRV_OP_BAL ;
         FETCH F_PRV_OP_BAL INTO P_DR_MTD, P_CR_MTD, P_OP_BAL ;
         IF F_PRV_OP_BAL%NOTFOUND THEN
            P_OP_BAL := 0;
         END IF;
         CLOSE F_PRV_OP_BAL ;
         IF P_FRM_DT = P_TMP_ASOF_DT THEN
           P_MTD_DR  :=  NVL(P_DR_MTD,0) + NVL(P_TRAN_DR,0) ;
           P_MTD_CR  :=  NVL(P_CR_MTD,0) + NVL(P_TRAN_CR,0) ;
           P_OP_BAL := NVL(P_OP_BAL,0) + (NVL(P_TRAN_DR,0) - NVL(P_TRAN_CR,0));
         END IF;
         IF F_PRV_TRAN_DR%ISOPEN THEN
               CLOSE F_PRV_TRAN_DR ;
         END IF;
         OPEN F_PRV_TRAN_DR ;
         FETCH F_PRV_TRAN_DR INTO P_TRAN_DR ;
         IF F_PRV_TRAN_DR%NOTFOUND THEN
            P_TRAN_DR := 0;
         END IF;
         CLOSE F_PRV_TRAN_DR ;
         IF F_PRV_TRAN_CR%ISOPEN THEN
               CLOSE F_PRV_TRAN_CR ;
         END IF;
         OPEN F_PRV_TRAN_CR ;
         FETCH F_PRV_TRAN_CR INTO P_TRAN_CR ;
         IF F_PRV_TRAN_CR%NOTFOUND THEN
            P_TRAN_CR := 0;
         END IF;
         CLOSE F_PRV_TRAN_CR ;
         P_MTD_DR  :=  NVL(P_DR_MTD,0) + NVL(P_TRAN_DR,0) ;
         P_MTD_CR  :=  NVL(P_CR_MTD,0) + NVL(P_TRAN_CR,0) ;
         P_OP_BAL := NVL(P_OP_BAL,0) + (NVL(P_TRAN_DR,0) - NVL(P_TRAN_CR,0));
     END IF;
END;
/
CREATE OR REPLACE FUNCTION  F_GET_SUB_LC_OPBAL
                            ( P_COMP_CODE VARCHAR2,
                              P_ASOF_DT DATE,
                              P_MAIN_ACNT_CODE VARCHAR2,
                              P_SUB_ACNT_CODE VARCHAR2,
                              P_CURR_CODE VARCHAR2)
                              RETURN NUMBER IS
P_CUR_ACNT_YEAR NUMBER(2);
P_ACNT_YEAR     NUMBER(2);
P_CAL_YEAR      NUMBER(4);
P_CAL_MONTH     NUMBER(2);
P_FRM_DT        DATE;
P_TMP_ASOF_DT   DATE;
P_OP_BAL  NUMBER(14,3);
P_TRAN    NUMBER(14,3);
CURSOR F_ACNT_PERIOD IS
       SELECT APER_ACNT_YEAR, APER_CAL_YEAR, APER_CAL_MONTH,
              TO_DATE(TO_CHAR(APER_FRM_DT))
       FROM   FM_ACNT_PERIOD
       WHERE  (APER_COMP_CODE = P_COMP_CODE)
       AND    (P_TMP_ASOF_DT BETWEEN APER_FRM_DT AND APER_TO_DT);
CURSOR F_CUR_OP_BAL  IS
       SELECT SUM(NVL(ABAL_LC_MTD_DR,0) - NVL(ABAL_LC_MTD_CR,0))
       FROM   FS_CUR_ACNT_BAL
       WHERE  ABAL_COMP_CODE = P_COMP_CODE
       AND    ABAL_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    ABAL_SUB_ACNT_CODE = P_SUB_ACNT_CODE
       AND    ABAL_ACNT_YEAR = P_ACNT_YEAR
       AND    NVL(ABAL_CURR_CODE,'XXXX') =
                 NVL(P_CURR_CODE, NVL(ABAL_CURR_CODE,'XXXX'))
       AND    (((ABAL_CAL_YEAR = P_CAL_YEAR) AND
                (ABAL_CAL_MONTH < P_CAL_MONTH)) OR
               (ABAL_CAL_YEAR < P_CAL_YEAR));
CURSOR F_PRV_OP_BAL  IS
       SELECT SUM(NVL(ABAL_LC_MTD_DR,0) - NVL(ABAL_LC_MTD_CR,0))
       FROM   FS_PRV_ACNT_BAL
       WHERE  ABAL_COMP_CODE = P_COMP_CODE
       AND    ABAL_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    ABAL_SUB_ACNT_CODE = P_SUB_ACNT_CODE
       AND    ABAL_ACNT_YEAR = P_ACNT_YEAR
       AND    NVL(ABAL_CURR_CODE,'XXXX') =
                 NVL(P_CURR_CODE, NVL(ABAL_CURR_CODE,'XXXX'))
       AND    (((ABAL_CAL_YEAR = P_CAL_YEAR) AND
                (ABAL_CAL_MONTH < P_CAL_MONTH)) OR
               (ABAL_CAL_YEAR < P_CAL_YEAR));
CURSOR F_CUR_TRAN  IS
       SELECT SUM(DECODE(TD_DOC_DRCR_FLAG, 'D',1,'C',-1,0) *
                  NVL(TD_DOC_AMT, 0))
       FROM   FT_CUR_TRANS_DETAIL, FT_CUR_TRANS_HEADER
       WHERE  TH_COMP_CODE   = P_COMP_CODE
       AND    TH_DOC_DT BETWEEN P_FRM_DT AND (P_TMP_ASOF_DT - 1)
       AND    TH_ACNT_YEAR = P_ACNT_YEAR
       AND    TD_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    TD_SUB_ACNT_CODE = P_SUB_ACNT_CODE
       AND    NVL(TD_CURR_CODE,'XXXX') =
                 NVL(P_CURR_CODE, NVL(TD_CURR_CODE,'XXXX'))
       AND    TH_COMP_CODE   = TD_COMP_CODE
       AND    TH_ACNT_YEAR   = TD_ACNT_YEAR
       AND    TH_TRAN_CODE   = TD_TRAN_CODE
       AND    TH_DOC_NO      = TD_DOC_NO;
CURSOR F_PRV_TRAN  IS
       SELECT SUM(DECODE(TD_DOC_DRCR_FLAG, 'D',1,'C',-1,0) *
                  NVL(TD_DOC_AMT, 0))
       FROM   FT_PRV_TRANS_DETAIL, FT_PRV_TRANS_HEADER
       WHERE  TH_COMP_CODE   = P_COMP_CODE
       AND    TH_DOC_DT BETWEEN P_FRM_DT AND (P_TMP_ASOF_DT - 1)
       AND    TH_ACNT_YEAR = P_ACNT_YEAR
       AND    TD_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    TD_SUB_ACNT_CODE = P_SUB_ACNT_CODE
       AND    NVL(TD_CURR_CODE,'XXXX') =
                 NVL(P_CURR_CODE, NVL(TD_CURR_CODE,'XXXX'))
       AND    TH_COMP_CODE   = TD_COMP_CODE
       AND    TH_ACNT_YEAR   = TD_ACNT_YEAR
       AND    TH_TRAN_CODE   = TD_TRAN_CODE
       AND    TH_DOC_NO      = TD_DOC_NO;
BEGIN
     P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(P_COMP_CODE);
     P_TMP_ASOF_DT := TO_DATE(TO_CHAR(P_ASOF_DT));
     IF F_ACNT_PERIOD%ISOPEN THEN
           CLOSE F_ACNT_PERIOD;
     END IF;
     OPEN F_ACNT_PERIOD;
     FETCH F_ACNT_PERIOD INTO P_ACNT_YEAR, P_CAL_YEAR,
                              P_CAL_MONTH, P_FRM_DT   ;
     IF F_ACNT_PERIOD%NOTFOUND THEN
          CLOSE F_ACNT_PERIOD;
          RETURN(0);
     END IF;
     IF P_ACNT_YEAR = P_CUR_ACNT_YEAR THEN
         IF F_CUR_OP_BAL%ISOPEN THEN
               CLOSE F_CUR_OP_BAL ;
         END IF;
         OPEN F_CUR_OP_BAL ;
         FETCH F_CUR_OP_BAL INTO P_OP_BAL ;
         IF F_CUR_OP_BAL%NOTFOUND THEN
            P_OP_BAL := 0;
         END IF;
         CLOSE F_CUR_OP_BAL ;
         IF P_FRM_DT = P_TMP_ASOF_DT THEN
            RETURN(P_OP_BAL);
         END IF;
         IF F_CUR_TRAN%ISOPEN THEN
               CLOSE F_CUR_TRAN ;
         END IF;
         OPEN F_CUR_TRAN ;
         FETCH F_CUR_TRAN INTO P_TRAN ;
         IF F_CUR_TRAN%NOTFOUND THEN
            P_TRAN := 0;
         END IF;
         CLOSE F_CUR_TRAN ;
         P_OP_BAL := NVL(P_OP_BAL,0) + NVL(P_TRAN,0);
         RETURN(P_OP_BAL);
     ELSE
         IF F_PRV_OP_BAL%ISOPEN THEN
               CLOSE F_PRV_OP_BAL ;
         END IF;
         OPEN F_PRV_OP_BAL ;
         FETCH F_PRV_OP_BAL INTO P_OP_BAL ;
         IF F_PRV_OP_BAL%NOTFOUND THEN
            P_OP_BAL := 0;
         END IF;
         CLOSE F_PRV_OP_BAL ;
         IF P_FRM_DT = P_TMP_ASOF_DT THEN
            RETURN(P_OP_BAL);
         END IF;
         IF F_PRV_TRAN%ISOPEN THEN
               CLOSE F_PRV_TRAN ;
         END IF;
         OPEN F_PRV_TRAN ;
         FETCH F_PRV_TRAN INTO P_TRAN ;
         IF F_PRV_TRAN%NOTFOUND THEN
            P_TRAN := 0;
         END IF;
         CLOSE F_PRV_TRAN ;
         P_OP_BAL := NVL(P_OP_BAL,0) + NVL(P_TRAN,0);
         RETURN(P_OP_BAL);
     END IF;
END;
/
CREATE OR REPLACE PROCEDURE F_LEVEL (P_FORMAT_ID IN OUT NUMBER) AS
P_PREV_FORMAT_ID  NUMBER(3);
P_LVL_CODE        VARCHAR2(6);
P_LVL_PARENT_CODE VARCHAR2(6);
P_LEVEL           NUMBER(2);
P_SEQ_NO          NUMBER(3);
P_PREV_LEVEL      NUMBER(2);
P_PARENT_SEQ      VARCHAR2(27);
P_SEQ             VARCHAR2(27);
P_LVL_ONE_SEQ     NUMBER(3);
P_LVL_TYPE        VARCHAR(1);
CURSOR  F_SEL_LEVEL IS
SELECT  LVL_FORMAT_ID, LVL_CODE, LVL_PARENT_CODE, LEVEL,
        LVL_ACNT_TYPE
FROM    FM_COA_LEVEL
WHERE   LVL_FORMAT_ID = P_FORMAT_ID
CONNECT BY PRIOR NVL(LVL_CODE,0) = NVL(LVL_PARENT_CODE,0) AND
           PRIOR NVL(LVL_FORMAT_ID,0) = NVL(LVL_FORMAT_ID,0)
START WITH LVL_PARENT_CODE IS NULL
ORDER BY LVL_FORMAT_ID, 4,
         DECODE(LVL_ACNT_TYPE,'A',1,'L',2,'I',3,'E',4,9), LVL_CODE;
CURSOR F_SEL_SEQ IS
SELECT LS_LVL_SEQ, LS_LVL_TYPE
FROM   FW_LEVEL
WHERE  LS_FORMAT_ID = P_FORMAT_ID
AND    LS_LVL_CODE = P_LVL_PARENT_CODE;
CURSOR F_SEQ_KEY IS
SELECT LS_FORMAT_ID, LS_LVL_CODE
FROM   FW_LEVEL
WHERE  LS_FORMAT_ID = P_FORMAT_ID
ORDER BY LS_LVL_SEQ;
BEGIN
DELETE FROM FW_LEVEL
       WHERE LS_FORMAT_ID = P_FORMAT_ID;
IF F_SEL_LEVEL%ISOPEN THEN
     CLOSE F_SEL_LEVEL;
END IF;
OPEN F_SEL_LEVEL;
P_LVL_ONE_SEQ := 100;
P_PREV_LEVEL := 0;
LOOP
FETCH F_SEL_LEVEL INTO P_FORMAT_ID, P_LVL_CODE, P_LVL_PARENT_CODE, P_LEVEL,
                       P_LVL_TYPE;
EXIT WHEN F_SEL_LEVEL%NOTFOUND;
IF P_PREV_LEVEL = 0 THEN
   P_SEQ_NO := 100;
   P_PREV_FORMAT_ID := P_FORMAT_ID;
   P_PREV_LEVEL := P_LEVEL;
ELSE
     IF P_FORMAT_ID != P_PREV_FORMAT_ID THEN
        P_SEQ_NO := 100;
        P_PREV_FORMAT_ID := P_FORMAT_ID;
        P_PREV_LEVEL := P_LEVEL;
     ELSE
        IF P_LEVEL != P_PREV_LEVEL THEN
           P_SEQ_NO := 100;
           P_PREV_LEVEL := P_LEVEL;
        END IF;
     END IF;
END IF;
IF P_LEVEL != 1 THEN
     IF F_SEL_SEQ%ISOPEN THEN
          CLOSE F_SEL_SEQ;
     END IF;
     OPEN F_SEL_SEQ;
     FETCH F_SEL_SEQ INTO P_PARENT_SEQ, P_LVL_TYPE;
     IF F_SEL_SEQ%NOTFOUND THEN
          P_PARENT_SEQ := NULL;
     END IF;
     CLOSE F_SEL_SEQ;
ELSE
     P_PARENT_SEQ := P_LVL_ONE_SEQ;
     P_SEQ_NO     := NULL;
     P_LVL_ONE_SEQ := NVL(P_LVL_ONE_SEQ,0) + 1;
END IF;
P_SEQ := P_PARENT_SEQ || LTRIM(RTRIM(TO_CHAR(P_SEQ_NO)));
P_SEQ_NO := P_SEQ_NO + 1;
INSERT INTO FW_LEVEL
(LS_FORMAT_ID, LS_LVL_CODE, LS_LVL_SEQ, LS_LVL_TYPE)
VALUES
(P_FORMAT_ID, P_LVL_CODE, P_SEQ, P_LVL_TYPE);
END LOOP;
CLOSE F_SEL_LEVEL;
IF F_SEQ_KEY%ISOPEN THEN
     CLOSE F_SEQ_KEY;
END IF;
OPEN F_SEQ_KEY;
P_SEQ_NO := 1;
LOOP
FETCH F_SEQ_KEY INTO P_FORMAT_ID, P_LVL_CODE;
EXIT WHEN F_SEQ_KEY%NOTFOUND;
UPDATE FM_COA_LEVEL
SET    LVL_SEQ_NO = P_SEQ_NO
WHERE  LVL_FORMAT_ID = P_FORMAT_ID
AND    LVL_CODE = P_LVL_CODE;
P_SEQ_NO := P_SEQ_NO + 1;
END LOOP;
CLOSE F_SEQ_KEY;
END;
/
CREATE OR REPLACE PROCEDURE F_MAIN_DEPT_SUM_REP
                 (P_KEY_NO           IN    NUMBER,
                  P_COMP_CODE        IN    VARCHAR2,
                  P_FORMAT_ID        IN    NUMBER,
                  P_DEPT_1           IN    VARCHAR2,
                  P_DEPT_2           IN    VARCHAR2,
                  P_DEPT_3           IN    VARCHAR2,
                  P_DEPT_4           IN    VARCHAR2,
                  P_DEPT_5           IN    VARCHAR2,
                  P_DEPT_6           IN    VARCHAR2,
                  P_DEPT_7           IN    VARCHAR2,
                  P_INCL_ACNT        IN    VARCHAR2,
                  P_ERR_NO          OUT    NUMBER) AS
   PREV_STR             VARCHAR2(27);
   RECORD_SEQ           NUMBER(6);
   HEAD_FLAG            VARCHAR2(1);
   FIRST_REC            NUMBER(1);
   BLANK_REC_FLAG       VARCHAR2(1);
   LVL_TYPE             VARCHAR2(1);
   P_LVL_CODE           VARCHAR2(6);
   P_LVL_NAME           VARCHAR2(60);
   P_LVL_TYPE           VARCHAR2(1);
   P_PARENT_LVL_CODE    VARCHAR2(6);
   P_TOTAL_FLAG         VARCHAR2(1);
   P_YTD_BAL_1          NUMBER(14,3);
   P_YR_OPEN_BAL_1      NUMBER(14,3);
   P_YTD_BAL_2          NUMBER(14,3);
   P_YR_OPEN_BAL_2      NUMBER(14,3);
   P_YTD_BAL_3          NUMBER(14,3);
   P_YR_OPEN_BAL_3      NUMBER(14,3);
   P_YTD_BAL_4          NUMBER(14,3);
   P_YR_OPEN_BAL_4      NUMBER(14,3);
   P_YTD_BAL_5          NUMBER(14,3);
   P_YR_OPEN_BAL_5      NUMBER(14,3);
   P_YTD_BAL_6          NUMBER(14,3);
   P_YR_OPEN_BAL_6      NUMBER(14,3);
   P_YTD_BAL_7          NUMBER(14,3);
   P_YR_OPEN_BAL_7      NUMBER(14,3);
   P_YTD_BAL_O          NUMBER(14,3);
   P_YR_OPEN_BAL_O      NUMBER(14,3);
   T_LVL_CODE           VARCHAR2(6);
   T_LVL_NAME           VARCHAR2(60);
   T_LVL_TYPE           VARCHAR2(1);
   T_LVL_SEQ            NUMBER(6);
   T_PARENT_LVL_CODE    VARCHAR2(6);
   T_MAIN_ACNT_CODE     VARCHAR2(6);
   T_TOTAL_FLAG         VARCHAR2(1);
   T_LVL_STR            VARCHAR2(27);
   T_YTD_BAL_1          NUMBER(14,3);
   T_YR_OPEN_BAL_1      NUMBER(14,3);
   T_YTD_BAL_2          NUMBER(14,3);
   T_YR_OPEN_BAL_2      NUMBER(14,3);
   T_YTD_BAL_3          NUMBER(14,3);
   T_YR_OPEN_BAL_3      NUMBER(14,3);
   T_YTD_BAL_4          NUMBER(14,3);
   T_YR_OPEN_BAL_4      NUMBER(14,3);
   T_YTD_BAL_5          NUMBER(14,3);
   T_YR_OPEN_BAL_5      NUMBER(14,3);
   T_YTD_BAL_6          NUMBER(14,3);
   T_YR_OPEN_BAL_6      NUMBER(14,3);
   T_YTD_BAL_7          NUMBER(14,3);
   T_YR_OPEN_BAL_7      NUMBER(14,3);
   T_YTD_BAL_O          NUMBER(14,3);
   T_YR_OPEN_BAL_O      NUMBER(14,3);
   TEMP_LVL_CODE           VARCHAR2(6);
   TEMP_LVL_NAME           VARCHAR2(60);
   TEMP_LVL_TYPE           VARCHAR2(1);
   TEMP_LVL_SEQ            NUMBER(6);
   TEMP_PARENT_LVL_CODE    VARCHAR2(6);
   TEMP_MAIN_ACNT_CODE     VARCHAR2(6);
   TEMP_TOTAL_FLAG         VARCHAR2(1);
   TEMP_LVL_STR            VARCHAR2(27);
   TEMP_YTD_BAL_1          NUMBER(14,3);
   TEMP_YR_OPEN_BAL_1      NUMBER(14,3);
   TEMP_YTD_BAL_2          NUMBER(14,3);
   TEMP_YR_OPEN_BAL_2      NUMBER(14,3);
   TEMP_YTD_BAL_3          NUMBER(14,3);
   TEMP_YR_OPEN_BAL_3      NUMBER(14,3);
   TEMP_YTD_BAL_4          NUMBER(14,3);
   TEMP_YR_OPEN_BAL_4      NUMBER(14,3);
   TEMP_YTD_BAL_5          NUMBER(14,3);
   TEMP_YR_OPEN_BAL_5      NUMBER(14,3);
   TEMP_YTD_BAL_6          NUMBER(14,3);
   TEMP_YR_OPEN_BAL_6      NUMBER(14,3);
   TEMP_YTD_BAL_7          NUMBER(14,3);
   TEMP_YR_OPEN_BAL_7      NUMBER(14,3);
   TEMP_YTD_BAL_O          NUMBER(14,3);
   TEMP_YR_OPEN_BAL_O      NUMBER(14,3);
   CURSOR C1 IS
          SELECT MYS_LVL_CODE, MYS_LVL_NAME, MYS_LVL_TYPE,
                 MYS_PARENT_LVL_CODE,
                 DECODE(P_INCL_ACNT, 'Y', MYS_MAIN_ACNT_CODE, '0'),
                 LS_LVL_SEQ, NVL(LVL_TOTAL_FLAG, 'N'),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_1, 1, 0) * MYS_YTD_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_1, 1, 0) * MYS_YR_OPEN_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_2, 1, 0) * MYS_YTD_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_2, 1, 0) * MYS_YR_OPEN_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_3, 1, 0) * MYS_YTD_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_3, 1, 0) * MYS_YR_OPEN_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_4, 1, 0) * MYS_YTD_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_4, 1, 0) * MYS_YR_OPEN_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_5, 1, 0) * MYS_YTD_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_5, 1, 0) * MYS_YR_OPEN_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_6, 1, 0) * MYS_YTD_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_6, 1, 0) * MYS_YR_OPEN_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_7, 1, 0) * MYS_YTD_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_7, 1, 0) * MYS_YR_OPEN_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_1, 0,
                     P_DEPT_2, 0, P_DEPT_3, 0, P_DEPT_4, 0, P_DEPT_5, 0,
                     P_DEPT_6, 0, P_DEPT_7, 0, 1) * MYS_YTD_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_1, 0,
                     P_DEPT_2, 0, P_DEPT_3, 0, P_DEPT_4, 0, P_DEPT_5, 0,
                     P_DEPT_6, 0, P_DEPT_7, 0, 1) * MYS_YR_OPEN_BAL_1)
          FROM   FW_LEVEL, FM_COA_LEVEL, FW_MAIN_YEAR_SUM
          WHERE  MYS_KEY_NO = P_KEY_NO
          AND    MYS_FORMAT_ID = P_FORMAT_ID
          AND    LVL_FORMAT_ID = MYS_FORMAT_ID
          AND    LVL_CODE = MYS_LVL_CODE
          AND    LS_FORMAT_ID = LVL_FORMAT_ID
          AND    LS_LVL_CODE = LVL_CODE
          GROUP BY MYS_LVL_CODE, MYS_LVL_NAME, MYS_LVL_TYPE,
                   MYS_PARENT_LVL_CODE,
                   DECODE(P_INCL_ACNT, 'Y', MYS_MAIN_ACNT_CODE, '0'),
                   LS_LVL_SEQ, NVL(LVL_TOTAL_FLAG, 'N')
          ORDER  BY LS_LVL_SEQ,
                   DECODE(P_INCL_ACNT, 'Y', MYS_MAIN_ACNT_CODE, '0');
   CURSOR C2 IS
          SELECT MYS_LVL_CODE, '   TOTAL ' || MYS_LVL_NAME, MYS_LVL_TYPE,
                 MYS_PARENT_LVL_CODE,
                 NVL(LVL_TOTAL_FLAG, 'N'),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_1, 1, 0) * MYS_YTD_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_1, 1, 0) * MYS_YR_OPEN_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_2, 1, 0) * MYS_YTD_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_2, 1, 0) * MYS_YR_OPEN_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_3, 1, 0) * MYS_YTD_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_3, 1, 0) * MYS_YR_OPEN_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_4, 1, 0) * MYS_YTD_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_4, 1, 0) * MYS_YR_OPEN_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_5, 1, 0) * MYS_YTD_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_5, 1, 0) * MYS_YR_OPEN_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_6, 1, 0) * MYS_YTD_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_6, 1, 0) * MYS_YR_OPEN_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_7, 1, 0) * MYS_YTD_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_7, 1, 0) * MYS_YR_OPEN_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_1, 0,
                     P_DEPT_2, 0, P_DEPT_3, 0, P_DEPT_4, 0, P_DEPT_5, 0,
                     P_DEPT_6, 0, P_DEPT_7, 0, 1) * MYS_YTD_BAL_1),
                 SUM(DECODE(MYS_DEPT_CODE, P_DEPT_1, 0,
                     P_DEPT_2, 0, P_DEPT_3, 0, P_DEPT_4, 0, P_DEPT_5, 0,
                     P_DEPT_6, 0, P_DEPT_7, 0, 1) * MYS_YR_OPEN_BAL_1)
          FROM   FM_COA_LEVEL, FW_MAIN_YEAR_SUM, FW_LEVEL
          WHERE  LS_FORMAT_ID = P_FORMAT_ID
          AND    LS_LVL_SEQ = PREV_STR
          AND    MYS_KEY_NO = P_KEY_NO
          AND    MYS_FORMAT_ID = LS_FORMAT_ID
          AND    MYS_LVL_CODE = LS_LVL_CODE
          AND    LVL_FORMAT_ID = MYS_FORMAT_ID
          AND    LVL_CODE = MYS_LVL_CODE
          GROUP BY MYS_LVL_CODE, '   TOTAL ' || MYS_LVL_NAME, MYS_LVL_TYPE,
                   MYS_PARENT_LVL_CODE,
                   LS_LVL_SEQ, NVL(LVL_TOTAL_FLAG, 'N');
  PROCEDURE INSERT_BLANK_REC IS
  BEGIN
     RECORD_SEQ := NVL(RECORD_SEQ,0) + 1;
     LVL_TYPE := T_LVL_TYPE;
     INSERT INTO FW_MAIN_DEPT_SUM_REP
            (MYS_KEY_NO, MYS_FORMAT_ID, MYS_LVL_SEQ, MYS_LVL_TYPE)
     VALUES (P_KEY_NO, P_FORMAT_ID, RECORD_SEQ, LVL_TYPE);
  END;
  PROCEDURE INSERT_HEAD IS
  BEGIN
     RECORD_SEQ := NVL(RECORD_SEQ,0) + 1;
     INSERT INTO FW_MAIN_DEPT_SUM_REP
            (MYS_KEY_NO, MYS_FORMAT_ID, MYS_LVL_CODE,
            MYS_LVL_NAME, MYS_LVL_TYPE, MYS_LVL_SEQ,
            MYS_PARENT_LVL_CODE)
     VALUES (P_KEY_NO, P_FORMAT_ID, T_LVL_CODE,
             T_LVL_NAME, T_LVL_TYPE, RECORD_SEQ,
             T_PARENT_LVL_CODE);
     INSERT_BLANK_REC;
  END;
  PROCEDURE INSERT_REC IS
     CURSOR C3 IS
       SELECT MAIN_ACNT_NAME
       FROM   FM_MAIN_ACCOUNT
       WHERE  MAIN_ACNT_CODE = T_MAIN_ACNT_CODE;
     C3_LVL_NAME	VARCHAR2(60);
     M_DIFF             NUMBER(2);
  BEGIN
     RECORD_SEQ := NVL(RECORD_SEQ,0) + 1;
     IF NVL(T_MAIN_ACNT_CODE, '0') != '0' THEN
        IF C3%ISOPEN THEN
           CLOSE C3;
        END IF;
        OPEN C3;
        FETCH C3 INTO C3_LVL_NAME;
        IF C3%FOUND THEN
             M_DIFF := LENGTH(T_LVL_NAME) - LENGTH(LTRIM(T_LVL_NAME));
             T_LVL_NAME := LPAD(C3_LVL_NAME, LENGTH(C3_LVL_NAME) + M_DIFF);
        ELSE
           CLOSE C3;
           GOTO END_LABEL;
        END IF;
        CLOSE C3;
     END IF;
     INSERT INTO FW_MAIN_DEPT_SUM_REP
            (MYS_KEY_NO, MYS_FORMAT_ID, MYS_LVL_CODE,
            MYS_LVL_NAME, MYS_LVL_TYPE, MYS_LVL_SEQ,
            MYS_PARENT_LVL_CODE, MYS_MAIN_ACNT_CODE,
            MYS_YTD_BAL_1, MYS_YR_OPEN_BAL_1,
            MYS_YTD_BAL_2, MYS_YR_OPEN_BAL_2,
            MYS_YTD_BAL_3, MYS_YR_OPEN_BAL_3,
            MYS_YTD_BAL_4, MYS_YR_OPEN_BAL_4,
            MYS_YTD_BAL_5, MYS_YR_OPEN_BAL_5,
            MYS_YTD_BAL_6, MYS_YR_OPEN_BAL_6,
            MYS_YTD_BAL_7, MYS_YR_OPEN_BAL_7,
            MYS_YTD_BAL_O, MYS_YR_OPEN_BAL_O)
     VALUES (P_KEY_NO, P_FORMAT_ID,
            T_LVL_CODE, T_LVL_NAME, T_LVL_TYPE,
            RECORD_SEQ, T_PARENT_LVL_CODE,
            T_MAIN_ACNT_CODE,
            T_YTD_BAL_1, T_YR_OPEN_BAL_1,
            T_YTD_BAL_2, T_YR_OPEN_BAL_2,
            T_YTD_BAL_3, T_YR_OPEN_BAL_3,
            T_YTD_BAL_4, T_YR_OPEN_BAL_4,
            T_YTD_BAL_5, T_YR_OPEN_BAL_5,
            T_YTD_BAL_6, T_YR_OPEN_BAL_6,
            T_YTD_BAL_7, T_YR_OPEN_BAL_7,
            T_YTD_BAL_O, T_YR_OPEN_BAL_O);
    <<END_LABEL>>
      NULL;
  END;
  PROCEDURE PROCESS_TOTAL IS
  BEGIN
    IF C2%ISOPEN THEN
       CLOSE C2;
    END IF;
    OPEN C2;
    FETCH C2 INTO P_LVL_CODE, P_LVL_NAME, P_LVL_TYPE,
                  P_PARENT_LVL_CODE,
                  P_TOTAL_FLAG,
                  P_YTD_BAL_1, P_YR_OPEN_BAL_1,
                  P_YTD_BAL_2, P_YR_OPEN_BAL_2,
                  P_YTD_BAL_3, P_YR_OPEN_BAL_3,
                  P_YTD_BAL_4, P_YR_OPEN_BAL_4,
                  P_YTD_BAL_5, P_YR_OPEN_BAL_5,
                  P_YTD_BAL_6, P_YR_OPEN_BAL_6,
                  P_YTD_BAL_7, P_YR_OPEN_BAL_7,
                  P_YTD_BAL_O, P_YR_OPEN_BAL_O;
    IF C2%FOUND AND P_TOTAL_FLAG = 'Y' THEN
       RECORD_SEQ := NVL(RECORD_SEQ,0) + 1;
       INSERT INTO FW_MAIN_DEPT_SUM_REP (
              MYS_KEY_NO, MYS_FORMAT_ID, MYS_LVL_CODE,
              MYS_LVL_NAME, MYS_LVL_TYPE, MYS_LVL_SEQ,
              MYS_PARENT_LVL_CODE,
              MYS_YTD_BAL_1, MYS_YR_OPEN_BAL_1,
              MYS_YTD_BAL_2, MYS_YR_OPEN_BAL_2,
              MYS_YTD_BAL_3, MYS_YR_OPEN_BAL_3,
              MYS_YTD_BAL_4, MYS_YR_OPEN_BAL_4,
              MYS_YTD_BAL_5, MYS_YR_OPEN_BAL_5,
              MYS_YTD_BAL_6, MYS_YR_OPEN_BAL_6,
              MYS_YTD_BAL_7, MYS_YR_OPEN_BAL_7,
              MYS_YTD_BAL_O, MYS_YR_OPEN_BAL_O)
       VALUES (P_KEY_NO, P_FORMAT_ID, P_LVL_CODE,
              P_LVL_NAME, P_LVL_TYPE, RECORD_SEQ,
              P_PARENT_LVL_CODE,
              P_YTD_BAL_1, P_YR_OPEN_BAL_1,
              P_YTD_BAL_2, P_YR_OPEN_BAL_2,
              P_YTD_BAL_3, P_YR_OPEN_BAL_3,
              P_YTD_BAL_4, P_YR_OPEN_BAL_4,
              P_YTD_BAL_5, P_YR_OPEN_BAL_5,
              P_YTD_BAL_6, P_YR_OPEN_BAL_6,
              P_YTD_BAL_7, P_YR_OPEN_BAL_7,
              P_YTD_BAL_O, P_YR_OPEN_BAL_O);
       INSERT_BLANK_REC;
    END IF;
    CLOSE C2;
    HEAD_FLAG := 'N';
END;
BEGIN
   DELETE FROM FW_MAIN_DEPT_SUM_REP
          WHERE MYS_KEY_NO = P_KEY_NO;
   PREV_STR := '';
   RECORD_SEQ := 0;
   HEAD_FLAG := 'N';
   FIRST_REC := 0;
   BLANK_REC_FLAG := 'N';
   IF C1%ISOPEN THEN
      CLOSE C1;
   END IF;
   OPEN C1;
LOOP
   FETCH C1 INTO TEMP_LVL_CODE, TEMP_LVL_NAME, TEMP_LVL_TYPE,
                 TEMP_PARENT_LVL_CODE,
                 TEMP_MAIN_ACNT_CODE,
                 TEMP_LVL_STR, TEMP_TOTAL_FLAG,
                 TEMP_YTD_BAL_1, TEMP_YR_OPEN_BAL_1,
                 TEMP_YTD_BAL_2, TEMP_YR_OPEN_BAL_2,
                 TEMP_YTD_BAL_3, TEMP_YR_OPEN_BAL_3,
                 TEMP_YTD_BAL_4, TEMP_YR_OPEN_BAL_4,
                 TEMP_YTD_BAL_5, TEMP_YR_OPEN_BAL_5,
                 TEMP_YTD_BAL_6, TEMP_YR_OPEN_BAL_6,
                 TEMP_YTD_BAL_7, TEMP_YR_OPEN_BAL_7,
                 TEMP_YTD_BAL_O, TEMP_YR_OPEN_BAL_O;
    IF FIRST_REC = 0 THEN
       IF C1%NOTFOUND THEN
          EXIT;
       END IF;
       FIRST_REC := 1;
    ELSE
      IF C1%NOTFOUND THEN
         INSERT_REC;
         EXIT;
      END IF;
      IF LENGTH(T_LVL_STR) > LENGTH(TEMP_LVL_STR) THEN
         INSERT_REC;
         INSERT_BLANK_REC;
	 PROCESS_TOTAL;
         LOOP
            PREV_STR := SUBSTR(PREV_STR, 1, LENGTH(PREV_STR)-3);
            IF LENGTH(PREV_STR) >= LENGTH(TEMP_LVL_STR) THEN
	       PROCESS_TOTAL;
            ELSE
               EXIT;
            END IF;
         END LOOP;
         BLANK_REC_FLAG := 'N';
      ELSIF LENGTH(T_LVL_STR) < LENGTH(TEMP_LVL_STR) THEN
            PREV_STR := T_LVL_STR;
            IF T_TOTAL_FLAG = 'Y' THEN
               IF BLANK_REC_FLAG = 'D' THEN
                  INSERT_BLANK_REC;
                  BLANK_REC_FLAG := 'N';
               END IF;
               INSERT_HEAD;
            END IF;
      ELSE
        BLANK_REC_FLAG := 'D';
        IF NVL(P_INCL_ACNT, 'N') = 'N' THEN
           INSERT_REC;
           IF NVL(SUBSTR(T_LVL_STR, 1, LENGTH(T_LVL_STR) - 3), '1') !=
              NVL(SUBSTR(TEMP_LVL_STR, 1, LENGTH(TEMP_LVL_STR) - 3), '2') THEN
                INSERT_BLANK_REC;
                BLANK_REC_FLAG := 'N';
           END IF;
        END IF;
        IF NVL(P_INCL_ACNT, 'N') = 'N' THEN
           NULL;
        ELSIF T_LVL_STR != TEMP_LVL_STR THEN
              INSERT_REC;
              INSERT_BLANK_REC;
              IF HEAD_FLAG = 'T' THEN
                 PROCESS_TOTAL;
                 PREV_STR := SUBSTR(PREV_STR, 1, LENGTH(PREV_STR)-3);
              END IF;
        ELSIF T_LVL_STR = TEMP_LVL_STR THEN
              IF T_TOTAL_FLAG = 'Y' AND HEAD_FLAG = 'N' THEN
                 INSERT_HEAD;
                 PREV_STR := T_LVL_STR;
                 HEAD_FLAG := 'T';
              END IF;
              INSERT_REC;
        END IF;
      END IF;
   END IF;
      SELECT TEMP_LVL_CODE, TEMP_LVL_NAME, TEMP_LVL_TYPE,
             TEMP_LVL_SEQ, TEMP_PARENT_LVL_CODE,
             TEMP_MAIN_ACNT_CODE,
             TEMP_LVL_STR, TEMP_TOTAL_FLAG,
             TEMP_YTD_BAL_1, TEMP_YR_OPEN_BAL_1,
             TEMP_YTD_BAL_2, TEMP_YR_OPEN_BAL_2,
             TEMP_YTD_BAL_3, TEMP_YR_OPEN_BAL_3,
             TEMP_YTD_BAL_4, TEMP_YR_OPEN_BAL_4,
             TEMP_YTD_BAL_5, TEMP_YR_OPEN_BAL_5,
             TEMP_YTD_BAL_6, TEMP_YR_OPEN_BAL_6,
             TEMP_YTD_BAL_7, TEMP_YR_OPEN_BAL_7,
             TEMP_YTD_BAL_O, TEMP_YR_OPEN_BAL_O
      INTO   T_LVL_CODE, T_LVL_NAME, T_LVL_TYPE,
             T_LVL_SEQ, T_PARENT_LVL_CODE,
             T_MAIN_ACNT_CODE,
             T_LVL_STR, T_TOTAL_FLAG,
             T_YTD_BAL_1, T_YR_OPEN_BAL_1,
             T_YTD_BAL_2, T_YR_OPEN_BAL_2,
             T_YTD_BAL_3, T_YR_OPEN_BAL_3,
             T_YTD_BAL_4, T_YR_OPEN_BAL_4,
             T_YTD_BAL_5, T_YR_OPEN_BAL_5,
             T_YTD_BAL_6, T_YR_OPEN_BAL_6,
             T_YTD_BAL_7, T_YR_OPEN_BAL_7,
             T_YTD_BAL_O, T_YR_OPEN_BAL_O
      FROM   DUAL;
END LOOP;
   CLOSE C1;
   INSERT_BLANK_REC;
   IF PREV_STR IS NOT NULL THEN
      PROCESS_TOTAL;
   END IF;
   LOOP
      PREV_STR := SUBSTR(PREV_STR, 1, LENGTH(PREV_STR)-3);
      IF LENGTH(PREV_STR) > 0 THEN
	 PROCESS_TOTAL;
      ELSE
         EXIT;
      END IF;
   END LOOP;
END;
/
CREATE OR REPLACE PROCEDURE F_MAIN_LEVEL_BC_SUM_REP
                 (P_KEY_NO           IN    NUMBER,
                  P_COMP_CODE        IN    VARCHAR2,
                  P_FORMAT_ID        IN    NUMBER,
                  P_ERR_NO          OUT    NUMBER) AS
   PREV_STR             VARCHAR2(27);
   RECORD_SEQ           NUMBER(6);
   HEAD_FLAG            VARCHAR2(1);
   FIRST_REC            NUMBER(1);
   BLANK_REC_FLAG       VARCHAR2(1);
   LVL_TYPE             VARCHAR2(1);
   P_LVL_CODE           VARCHAR2(6);
   P_LVL_NAME           VARCHAR2(60);
   P_LVL_TYPE           VARCHAR2(1);
   P_PARENT_LVL_CODE    VARCHAR2(6);
   P_TOTAL_FLAG         VARCHAR2(1);
   P_MTD_BAL            NUMBER(14,3);
   P_YTD_BAL            NUMBER(14,3);
   P_ANN_BAL            NUMBER(14,3);
   P_YR_OPEN_BAL        NUMBER(14,3);
   P_PREV_MTD_BAL       NUMBER(14,3);
   P_PREV_YTD_BAL       NUMBER(14,3);
   P_PREV_ANN_BAL       NUMBER(14,3);
   P_PREV_YR_OPEN_BAL   NUMBER(14,3);
   P_MTD_BUD            NUMBER(14,3);
   P_YTD_BUD            NUMBER(14,3);
   P_ANN_BUD            NUMBER(14,3);
   P_NEXT_MTD_BUD       NUMBER(14,3);
   P_NEXT_YTD_BUD       NUMBER(14,3);
   P_NEXT_ANN_BUD       NUMBER(14,3);
   P_M01_BUD            NUMBER(14,3);
   P_M02_BUD            NUMBER(14,3);
   P_M03_BUD            NUMBER(14,3);
   P_M04_BUD            NUMBER(14,3);
   P_M05_BUD            NUMBER(14,3);
   P_M06_BUD            NUMBER(14,3);
   P_M07_BUD            NUMBER(14,3);
   P_M08_BUD            NUMBER(14,3);
   P_M09_BUD            NUMBER(14,3);
   P_M10_BUD            NUMBER(14,3);
   P_M11_BUD            NUMBER(14,3);
   P_M12_BUD            NUMBER(14,3);
   T_DIVN_CODE          VARCHAR2(6);
   T_DEPT_CODE          VARCHAR2(6);
   T_LVL_CODE           VARCHAR2(6);
   T_LVL_NAME           VARCHAR2(60);
   T_LVL_TYPE           VARCHAR2(1);
   T_LVL_SEQ            NUMBER(6);
   T_PARENT_LVL_CODE    VARCHAR2(6);
   T_MAIN_ACNT_CODE     VARCHAR2(6);
   T_TOTAL_FLAG         VARCHAR2(1);
   T_LVL_STR            VARCHAR2(27);
   T_MTD_BAL            NUMBER(14,3);
   T_YTD_BAL            NUMBER(14,3);
   T_ANN_BAL            NUMBER(14,3);
   T_YR_OPEN_BAL        NUMBER(14,3);
   T_PREV_MTD_BAL       NUMBER(14,3);
   T_PREV_YTD_BAL       NUMBER(14,3);
   T_PREV_ANN_BAL       NUMBER(14,3);
   T_PREV_YR_OPEN_BAL   NUMBER(14,3);
   T_MTD_BUD            NUMBER(14,3);
   T_YTD_BUD            NUMBER(14,3);
   T_ANN_BUD            NUMBER(14,3);
   T_NEXT_MTD_BUD       NUMBER(14,3);
   T_NEXT_YTD_BUD       NUMBER(14,3);
   T_NEXT_ANN_BUD       NUMBER(14,3);
   T_M01_BUD            NUMBER(14,3);
   T_M02_BUD            NUMBER(14,3);
   T_M03_BUD            NUMBER(14,3);
   T_M04_BUD            NUMBER(14,3);
   T_M05_BUD            NUMBER(14,3);
   T_M06_BUD            NUMBER(14,3);
   T_M07_BUD            NUMBER(14,3);
   T_M08_BUD            NUMBER(14,3);
   T_M09_BUD            NUMBER(14,3);
   T_M10_BUD            NUMBER(14,3);
   T_M11_BUD            NUMBER(14,3);
   T_M12_BUD            NUMBER(14,3);
   TEMP_DIVN_CODE          VARCHAR2(6);
   TEMP_DEPT_CODE          VARCHAR2(6);
   TEMP_LVL_CODE           VARCHAR2(6);
   TEMP_LVL_NAME           VARCHAR2(60);
   TEMP_LVL_TYPE           VARCHAR2(1);
   TEMP_LVL_SEQ            NUMBER(6);
   TEMP_PARENT_LVL_CODE    VARCHAR2(6);
   TEMP_MAIN_ACNT_CODE     VARCHAR2(6);
   TEMP_TOTAL_FLAG         VARCHAR2(1);
   TEMP_LVL_STR            VARCHAR2(27);
   TEMP_MTD_BAL            NUMBER(14,3);
   TEMP_YTD_BAL            NUMBER(14,3);
   TEMP_ANN_BAL            NUMBER(14,3);
   TEMP_YR_OPEN_BAL        NUMBER(14,3);
   TEMP_PREV_MTD_BAL       NUMBER(14,3);
   TEMP_PREV_YTD_BAL       NUMBER(14,3);
   TEMP_PREV_ANN_BAL       NUMBER(14,3);
   TEMP_PREV_YR_OPEN_BAL   NUMBER(14,3);
   TEMP_MTD_BUD            NUMBER(14,3);
   TEMP_YTD_BUD            NUMBER(14,3);
   TEMP_ANN_BUD            NUMBER(14,3);
   TEMP_NEXT_MTD_BUD       NUMBER(14,3);
   TEMP_NEXT_YTD_BUD       NUMBER(14,3);
   TEMP_NEXT_ANN_BUD       NUMBER(14,3);
   TEMP_M01_BUD            NUMBER(14,3);
   TEMP_M02_BUD            NUMBER(14,3);
   TEMP_M03_BUD            NUMBER(14,3);
   TEMP_M04_BUD            NUMBER(14,3);
   TEMP_M05_BUD            NUMBER(14,3);
   TEMP_M06_BUD            NUMBER(14,3);
   TEMP_M07_BUD            NUMBER(14,3);
   TEMP_M08_BUD            NUMBER(14,3);
   TEMP_M09_BUD            NUMBER(14,3);
   TEMP_M10_BUD            NUMBER(14,3);
   TEMP_M11_BUD            NUMBER(14,3);
   TEMP_M12_BUD            NUMBER(14,3);
   CURSOR C1 IS
          SELECT DECODE(MLS_MAIN_ACNT_CODE, '0', '0', MLS_DIVN_CODE),
                 DECODE(MLS_MAIN_ACNT_CODE, '0', '0', MLS_DEPT_CODE),
                 MLS_LVL_CODE, MLS_LVL_NAME, MLS_LVL_TYPE,
                 MLS_PARENT_LVL_CODE,
                 MLS_MAIN_ACNT_CODE,
                 LS_LVL_SEQ, NVL(LVL_TOTAL_FLAG, 'N'),
                 SUM(MLS_MTD_BAL), SUM(MLS_YTD_BAL), SUM(MLS_ANN_BAL),
                 SUM(MLS_YR_OPEN_BAL), SUM(MLS_PREV_MTD_BAL),
                 SUM(MLS_PREV_YTD_BAL), SUM(MLS_PREV_ANN_BAL),
                 SUM(MLS_PREV_YR_OPEN_BAL),
                 SUM(MLS_MTD_BUD), SUM(MLS_YTD_BUD),
                 SUM(MLS_ANN_BUD),
                 SUM(MLS_NEXT_MTD_BUD), SUM(MLS_NEXT_YTD_BUD),
                 SUM(MLS_NEXT_ANN_BUD), SUM(MLS_M01_BUD),
                 SUM(MLS_M02_BUD), SUM(MLS_M03_BUD),
                 SUM(MLS_M04_BUD), SUM(MLS_M05_BUD),
                 SUM(MLS_M06_BUD), SUM(MLS_M07_BUD),
                 SUM(MLS_M08_BUD), SUM(MLS_M09_BUD),
                 SUM(MLS_M10_BUD), SUM(MLS_M11_BUD),
                 SUM(MLS_M12_BUD)
          FROM   FW_LEVEL, FM_COA_LEVEL, FW_MAIN_LEVEL_SUM
          WHERE  MLS_KEY_NO = P_KEY_NO
          AND    MLS_FORMAT_ID = P_FORMAT_ID
          AND    LVL_FORMAT_ID = MLS_FORMAT_ID
          AND    LVL_CODE = MLS_LVL_CODE
          AND    LS_FORMAT_ID = LVL_FORMAT_ID
          AND    LS_LVL_CODE = LVL_CODE
          GROUP BY DECODE(MLS_MAIN_ACNT_CODE, '0', '0', MLS_DIVN_CODE),
                   DECODE(MLS_MAIN_ACNT_CODE, '0', '0', MLS_DEPT_CODE),
		   MLS_LVL_CODE,
                   MLS_LVL_NAME, MLS_LVL_TYPE,
                   MLS_PARENT_LVL_CODE,
                   MLS_MAIN_ACNT_CODE,
                   LS_LVL_SEQ, NVL(LVL_TOTAL_FLAG, 'N')
          ORDER  BY LS_LVL_SEQ,
                   MLS_MAIN_ACNT_CODE,
                   DECODE(MLS_MAIN_ACNT_CODE, '0', '0', MLS_DIVN_CODE),
                   DECODE(MLS_MAIN_ACNT_CODE, '0', '0', MLS_DEPT_CODE);
   CURSOR C2 IS
          SELECT MLS_LVL_CODE, '   TOTAL ' || MLS_LVL_NAME, MLS_LVL_TYPE,
                 MLS_PARENT_LVL_CODE,
                 NVL(LVL_TOTAL_FLAG, 'N'),
                 SUM(MLS_MTD_BAL), SUM(MLS_YTD_BAL), SUM(MLS_ANN_BAL),
                 SUM(MLS_YR_OPEN_BAL), SUM(MLS_PREV_MTD_BAL),
                 SUM(MLS_PREV_YTD_BAL), SUM(MLS_PREV_ANN_BAL),
                 SUM(MLS_PREV_YR_OPEN_BAL),
                 SUM(MLS_MTD_BUD), SUM(MLS_YTD_BUD),
                 SUM(MLS_ANN_BUD),
                 SUM(MLS_NEXT_MTD_BUD), SUM(MLS_NEXT_YTD_BUD),
                 SUM(MLS_NEXT_ANN_BUD), SUM(MLS_M01_BUD),
                 SUM(MLS_M02_BUD), SUM(MLS_M03_BUD),
                 SUM(MLS_M04_BUD), SUM(MLS_M05_BUD),
                 SUM(MLS_M06_BUD), SUM(MLS_M07_BUD),
                 SUM(MLS_M08_BUD), SUM(MLS_M09_BUD),
                 SUM(MLS_M10_BUD), SUM(MLS_M11_BUD),
                 SUM(MLS_M12_BUD)
          FROM   FM_COA_LEVEL, FW_MAIN_LEVEL_SUM, FW_LEVEL
          WHERE  LS_FORMAT_ID = P_FORMAT_ID
          AND    LS_LVL_SEQ = PREV_STR
          AND    MLS_KEY_NO = P_KEY_NO
          AND    MLS_FORMAT_ID = LS_FORMAT_ID
          AND    MLS_LVL_CODE = LS_LVL_CODE
          AND    LVL_FORMAT_ID = MLS_FORMAT_ID
          AND    LVL_CODE = MLS_LVL_CODE
          GROUP BY MLS_LVL_CODE, '   TOTAL ' || MLS_LVL_NAME, MLS_LVL_TYPE,
                   MLS_PARENT_LVL_CODE,
                   LS_LVL_SEQ, NVL(LVL_TOTAL_FLAG, 'N');
  PROCEDURE INSERT_BLANK_REC IS
  BEGIN
     RECORD_SEQ := NVL(RECORD_SEQ,0) + 1;
     LVL_TYPE := T_LVL_TYPE;
     INSERT INTO FW_MAIN_LEVEL_SUM_REP
            (MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_SEQ,
             MLS_LVL_TYPE)
     VALUES (P_KEY_NO, P_FORMAT_ID, RECORD_SEQ,
             LVL_TYPE);
  END;
  PROCEDURE INSERT_HEAD IS
  BEGIN
     RECORD_SEQ := NVL(RECORD_SEQ,0) + 1;
     INSERT INTO FW_MAIN_LEVEL_SUM_REP
            (MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_CODE,
            MLS_LVL_NAME, MLS_LVL_TYPE, MLS_LVL_SEQ,
            MLS_PARENT_LVL_CODE)
     VALUES (P_KEY_NO, P_FORMAT_ID, T_LVL_CODE,
             T_LVL_NAME, T_LVL_TYPE, RECORD_SEQ,
             T_PARENT_LVL_CODE);
     INSERT_BLANK_REC;
  END;
  PROCEDURE INSERT_REC IS
     CURSOR C3 IS
       SELECT MAIN_ACNT_NAME
       FROM   FM_MAIN_ACCOUNT
       WHERE  MAIN_ACNT_CODE = T_MAIN_ACNT_CODE;
     C3_LVL_NAME	VARCHAR2(60);
     M_DIFF             NUMBER(2);
  BEGIN
     RECORD_SEQ := NVL(RECORD_SEQ,0) + 1;
     IF NVL(T_MAIN_ACNT_CODE, '0') != '0' THEN
        IF C3%ISOPEN THEN
           CLOSE C3;
        END IF;
        OPEN C3;
        FETCH C3 INTO C3_LVL_NAME;
        IF C3%FOUND THEN
             M_DIFF := LENGTH(T_LVL_NAME) - LENGTH(LTRIM(T_LVL_NAME));
             T_LVL_NAME := LPAD(C3_LVL_NAME, LENGTH(C3_LVL_NAME) + M_DIFF);
        END IF;
        CLOSE C3;
     END IF;
     INSERT INTO FW_MAIN_LEVEL_SUM_REP
            (MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_CODE,
            MLS_LVL_NAME, MLS_LVL_TYPE, MLS_LVL_SEQ,
            MLS_PARENT_LVL_CODE,
            MLS_MAIN_ACNT_CODE, MLS_DIVN_CODE, MLS_DEPT_CODE,
            MLS_MTD_BAL, MLS_YTD_BAL, MLS_ANN_BAL, MLS_YR_OPEN_BAL,
            MLS_PREV_MTD_BAL, MLS_PREV_YTD_BAL, MLS_PREV_ANN_BAL,
            MLS_PREV_YR_OPEN_BAL, MLS_MTD_BUD, MLS_YTD_BUD,
            MLS_ANN_BUD,
            MLS_NEXT_MTD_BUD, MLS_NEXT_YTD_BUD, MLS_NEXT_ANN_BUD,
            MLS_M01_BUD, MLS_M02_BUD, MLS_M03_BUD, MLS_M04_BUD,
            MLS_M05_BUD, MLS_M06_BUD, MLS_M07_BUD, MLS_M08_BUD,
            MLS_M09_BUD, MLS_M10_BUD, MLS_M11_BUD, MLS_M12_BUD)
     VALUES (P_KEY_NO, P_FORMAT_ID,
            T_LVL_CODE, T_LVL_NAME, T_LVL_TYPE,
            RECORD_SEQ, T_PARENT_LVL_CODE,
            T_MAIN_ACNT_CODE, T_DIVN_CODE, T_DEPT_CODE,
            T_MTD_BAL, T_YTD_BAL, T_ANN_BAL,
            T_YR_OPEN_BAL, T_PREV_MTD_BAL,
            T_PREV_YTD_BAL, T_PREV_ANN_BAL, T_PREV_YR_OPEN_BAL,
            T_MTD_BUD, T_YTD_BUD, T_ANN_BUD,
            T_NEXT_MTD_BUD, T_NEXT_YTD_BUD, T_NEXT_ANN_BUD,
            T_M01_BUD, T_M02_BUD, T_M03_BUD, T_M04_BUD,
            T_M05_BUD, T_M06_BUD, T_M07_BUD, T_M08_BUD,
            T_M09_BUD, T_M10_BUD, T_M11_BUD, T_M12_BUD);
  END;
  PROCEDURE PROCESS_TOTAL IS
  BEGIN
    IF C2%ISOPEN THEN
       CLOSE C2;
    END IF;
    OPEN C2;
    FETCH C2 INTO P_LVL_CODE, P_LVL_NAME, P_LVL_TYPE,
                  P_PARENT_LVL_CODE,
                  P_TOTAL_FLAG,
                  P_MTD_BAL, P_YTD_BAL, P_ANN_BAL, P_YR_OPEN_BAL,
                  P_PREV_MTD_BAL, P_PREV_YTD_BAL,
                  P_PREV_ANN_BAL, P_PREV_YR_OPEN_BAL,
                  P_MTD_BUD, P_YTD_BUD, P_ANN_BUD,
                  P_NEXT_MTD_BUD, P_NEXT_YTD_BUD, P_NEXT_ANN_BUD,
                  P_M01_BUD, P_M02_BUD, P_M03_BUD, P_M04_BUD,
                  P_M05_BUD, P_M06_BUD, P_M07_BUD, P_M08_BUD,
                  P_M09_BUD, P_M10_BUD, P_M11_BUD, P_M12_BUD;
    IF C2%FOUND AND P_TOTAL_FLAG = 'Y' THEN
       RECORD_SEQ := NVL(RECORD_SEQ,0) + 1;
       INSERT INTO FW_MAIN_LEVEL_SUM_REP (
              MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_CODE,
              MLS_LVL_NAME, MLS_LVL_TYPE, MLS_LVL_SEQ,
              MLS_PARENT_LVL_CODE,
              MLS_MTD_BAL, MLS_YTD_BAL, MLS_ANN_BAL, MLS_YR_OPEN_BAL,
              MLS_PREV_MTD_BAL, MLS_PREV_YTD_BAL,
              MLS_PREV_ANN_BAL, MLS_PREV_YR_OPEN_BAL,
              MLS_MTD_BUD, MLS_YTD_BUD, MLS_ANN_BUD,
              MLS_NEXT_MTD_BUD, MLS_NEXT_YTD_BUD, MLS_NEXT_ANN_BUD,
              MLS_M01_BUD, MLS_M02_BUD, MLS_M03_BUD, MLS_M04_BUD,
              MLS_M05_BUD, MLS_M06_BUD, MLS_M07_BUD, MLS_M08_BUD,
              MLS_M09_BUD, MLS_M10_BUD, MLS_M11_BUD, MLS_M12_BUD)
       VALUES (P_KEY_NO, P_FORMAT_ID, P_LVL_CODE,
              P_LVL_NAME, P_LVL_TYPE, RECORD_SEQ,
              P_PARENT_LVL_CODE,
              P_MTD_BAL, P_YTD_BAL, P_ANN_BAL, P_YR_OPEN_BAL,
              P_PREV_MTD_BAL, P_PREV_YTD_BAL,
              P_PREV_ANN_BAL, P_PREV_YR_OPEN_BAL,
              P_MTD_BUD, P_YTD_BUD, P_ANN_BUD,
              P_NEXT_MTD_BUD, P_NEXT_YTD_BUD, P_NEXT_ANN_BUD,
              P_M01_BUD, P_M02_BUD, P_M03_BUD, P_M04_BUD,
              P_M05_BUD, P_M06_BUD, P_M07_BUD, P_M08_BUD,
              P_M09_BUD, P_M10_BUD, P_M11_BUD, P_M12_BUD);
       INSERT_BLANK_REC;
    END IF;
    CLOSE C2;
    HEAD_FLAG := 'N';
END;
BEGIN
   DELETE FROM FW_MAIN_LEVEL_SUM_REP
          WHERE MLS_KEY_NO = P_KEY_NO;
   PREV_STR := '';
   RECORD_SEQ := 0;
   HEAD_FLAG := 'N';
   FIRST_REC := 0;
   BLANK_REC_FLAG := 'N';
   IF C1%ISOPEN THEN
      CLOSE C1;
   END IF;
   OPEN C1;
LOOP
   FETCH C1 INTO TEMP_DIVN_CODE, TEMP_DEPT_CODE,
                 TEMP_LVL_CODE, TEMP_LVL_NAME, TEMP_LVL_TYPE,
                 TEMP_PARENT_LVL_CODE,
                 TEMP_MAIN_ACNT_CODE,
                 TEMP_LVL_STR, TEMP_TOTAL_FLAG,
                 TEMP_MTD_BAL, TEMP_YTD_BAL, TEMP_ANN_BAL, TEMP_YR_OPEN_BAL,
                 TEMP_PREV_MTD_BAL, TEMP_PREV_YTD_BAL,
                 TEMP_PREV_ANN_BAL, TEMP_PREV_YR_OPEN_BAL,
                 TEMP_MTD_BUD, TEMP_YTD_BUD, TEMP_ANN_BUD,
                 TEMP_NEXT_MTD_BUD, TEMP_NEXT_YTD_BUD, TEMP_NEXT_ANN_BUD,
                 TEMP_M01_BUD, TEMP_M02_BUD, TEMP_M03_BUD, TEMP_M04_BUD,
                 TEMP_M05_BUD, TEMP_M06_BUD, TEMP_M07_BUD, TEMP_M08_BUD,
                 TEMP_M09_BUD, TEMP_M10_BUD, TEMP_M11_BUD, TEMP_M12_BUD;
    IF FIRST_REC = 0 THEN
       IF C1%NOTFOUND THEN
          EXIT;
       END IF;
       FIRST_REC := 1;
    ELSE
      IF C1%NOTFOUND THEN
         INSERT_REC;
         EXIT;
      END IF;
      IF LENGTH(T_LVL_STR) > LENGTH(TEMP_LVL_STR) THEN
         INSERT_REC;
         INSERT_BLANK_REC;
	 PROCESS_TOTAL;
         LOOP
            PREV_STR := SUBSTR(PREV_STR, 1, LENGTH(PREV_STR)-3);
            IF LENGTH(PREV_STR) >= LENGTH(TEMP_LVL_STR) THEN
	       PROCESS_TOTAL;
            ELSE
               EXIT;
            END IF;
         END LOOP;
         BLANK_REC_FLAG := 'N';
      ELSIF LENGTH(T_LVL_STR) < LENGTH(TEMP_LVL_STR) THEN
            PREV_STR := T_LVL_STR;
            IF T_TOTAL_FLAG = 'Y' THEN
               IF BLANK_REC_FLAG = 'D' THEN
                  INSERT_BLANK_REC;
                  BLANK_REC_FLAG := 'N';
               END IF;
               INSERT_HEAD;
            END IF;
      ELSE
        BLANK_REC_FLAG := 'D';
        IF T_LVL_STR != TEMP_LVL_STR THEN
              INSERT_REC;
              INSERT_BLANK_REC;
              IF HEAD_FLAG = 'T' THEN
                 PROCESS_TOTAL;
                 PREV_STR := SUBSTR(PREV_STR, 1, LENGTH(PREV_STR)-3);
              END IF;
        ELSIF T_LVL_STR = TEMP_LVL_STR THEN
              IF T_TOTAL_FLAG = 'Y' AND HEAD_FLAG = 'N' THEN
                 INSERT_HEAD;
                 PREV_STR := T_LVL_STR;
                 HEAD_FLAG := 'T';
              END IF;
              INSERT_REC;
        END IF;
      END IF;
   END IF;
      SELECT TEMP_DIVN_CODE, TEMP_DEPT_CODE,
             TEMP_LVL_CODE, TEMP_LVL_NAME, TEMP_LVL_TYPE,
             TEMP_LVL_SEQ, TEMP_PARENT_LVL_CODE,
             TEMP_MAIN_ACNT_CODE,
             TEMP_LVL_STR, TEMP_TOTAL_FLAG,
             TEMP_MTD_BAL, TEMP_YTD_BAL, TEMP_ANN_BAL, TEMP_YR_OPEN_BAL,
             TEMP_PREV_MTD_BAL, TEMP_PREV_YTD_BAL,
             TEMP_PREV_ANN_BAL, TEMP_PREV_YR_OPEN_BAL,
             TEMP_MTD_BUD, TEMP_YTD_BUD, TEMP_ANN_BUD,
             TEMP_NEXT_MTD_BUD, TEMP_NEXT_YTD_BUD, TEMP_NEXT_ANN_BUD,
             TEMP_M01_BUD, TEMP_M02_BUD, TEMP_M03_BUD, TEMP_M04_BUD,
             TEMP_M05_BUD, TEMP_M06_BUD, TEMP_M07_BUD, TEMP_M08_BUD,
             TEMP_M09_BUD, TEMP_M10_BUD, TEMP_M11_BUD, TEMP_M12_BUD
      INTO   T_DIVN_CODE, T_DEPT_CODE, T_LVL_CODE, T_LVL_NAME, T_LVL_TYPE,
             T_LVL_SEQ, T_PARENT_LVL_CODE,
             T_MAIN_ACNT_CODE,
             T_LVL_STR, T_TOTAL_FLAG,
             T_MTD_BAL, T_YTD_BAL, T_ANN_BAL, T_YR_OPEN_BAL,
             T_PREV_MTD_BAL, T_PREV_YTD_BAL,
             T_PREV_ANN_BAL, T_PREV_YR_OPEN_BAL,
             T_MTD_BUD, T_YTD_BUD, T_ANN_BUD,
             T_NEXT_MTD_BUD, T_NEXT_YTD_BUD, T_NEXT_ANN_BUD,
             T_M01_BUD, T_M02_BUD, T_M03_BUD, T_M04_BUD,
             T_M05_BUD, T_M06_BUD, T_M07_BUD, T_M08_BUD,
             T_M09_BUD, T_M10_BUD, T_M11_BUD, T_M12_BUD
      FROM   DUAL;
END LOOP;
   CLOSE C1;
   INSERT_BLANK_REC;
   IF PREV_STR IS NOT NULL THEN
      PROCESS_TOTAL;
   END IF;
   LOOP
      PREV_STR := SUBSTR(PREV_STR, 1, LENGTH(PREV_STR)-3);
      IF LENGTH(PREV_STR) > 0 THEN
	 PROCESS_TOTAL;
      ELSE
         EXIT;
      END IF;
   END LOOP;
END;
/
CREATE OR REPLACE PROCEDURE F_MAIN_LEVEL_DEPT_SUM_REP
                 (P_KEY_NO           IN    NUMBER,
                  P_COMP_CODE        IN    VARCHAR2,
                  P_FORMAT_ID        IN    NUMBER,
                  P_INCL_ACNT        IN    VARCHAR2,
                  P_ERR_NO          OUT    NUMBER) AS
   PREV_STR             VARCHAR2(27);
   RECORD_SEQ           NUMBER(6);
   HEAD_FLAG            VARCHAR2(1);
   FIRST_REC            NUMBER(1);
   BLANK_REC_FLAG       VARCHAR2(1);
   LVL_TYPE             VARCHAR2(1);
   P_LVL_CODE           VARCHAR2(6);
   P_LVL_NAME           VARCHAR2(60);
   P_LVL_TYPE           VARCHAR2(1);
   P_PARENT_LVL_CODE    VARCHAR2(6);
   P_TOTAL_FLAG         VARCHAR2(1);
   P_MTD_BAL            NUMBER(14,3);
   P_YTD_BAL            NUMBER(14,3);
   P_ANN_BAL            NUMBER(14,3);
   P_YR_OPEN_BAL        NUMBER(14,3);
   P_PREV_MTD_BAL       NUMBER(14,3);
   P_PREV_YTD_BAL       NUMBER(14,3);
   P_PREV_ANN_BAL       NUMBER(14,3);
   P_PREV_YR_OPEN_BAL   NUMBER(14,3);
   P_MTD_BUD            NUMBER(14,3);
   P_YTD_BUD            NUMBER(14,3);
   P_ANN_BUD            NUMBER(14,3);
   P_NEXT_MTD_BUD       NUMBER(14,3);
   P_NEXT_YTD_BUD       NUMBER(14,3);
   P_NEXT_ANN_BUD       NUMBER(14,3);
   P_M01_BUD            NUMBER(14,3);
   P_M02_BUD            NUMBER(14,3);
   P_M03_BUD            NUMBER(14,3);
   P_M04_BUD            NUMBER(14,3);
   P_M05_BUD            NUMBER(14,3);
   P_M06_BUD            NUMBER(14,3);
   P_M07_BUD            NUMBER(14,3);
   P_M08_BUD            NUMBER(14,3);
   P_M09_BUD            NUMBER(14,3);
   P_M10_BUD            NUMBER(14,3);
   P_M11_BUD            NUMBER(14,3);
   P_M12_BUD            NUMBER(14,3);
   T_DIVN_CODE          VARCHAR2(6);
   T_DEPT_CODE          VARCHAR2(6);
   T_LVL_CODE           VARCHAR2(6);
   T_LVL_NAME           VARCHAR2(60);
   T_LVL_TYPE           VARCHAR2(1);
   T_LVL_SEQ            NUMBER(6);
   T_PARENT_LVL_CODE    VARCHAR2(6);
   T_MAIN_ACNT_CODE     VARCHAR2(6);
   T_TOTAL_FLAG         VARCHAR2(1);
   T_LVL_STR            VARCHAR2(27);
   T_MTD_BAL            NUMBER(14,3);
   T_YTD_BAL            NUMBER(14,3);
   T_ANN_BAL            NUMBER(14,3);
   T_YR_OPEN_BAL        NUMBER(14,3);
   T_PREV_MTD_BAL       NUMBER(14,3);
   T_PREV_YTD_BAL       NUMBER(14,3);
   T_PREV_ANN_BAL       NUMBER(14,3);
   T_PREV_YR_OPEN_BAL   NUMBER(14,3);
   T_MTD_BUD            NUMBER(14,3);
   T_YTD_BUD            NUMBER(14,3);
   T_ANN_BUD            NUMBER(14,3);
   T_NEXT_MTD_BUD       NUMBER(14,3);
   T_NEXT_YTD_BUD       NUMBER(14,3);
   T_NEXT_ANN_BUD       NUMBER(14,3);
   T_M01_BUD            NUMBER(14,3);
   T_M02_BUD            NUMBER(14,3);
   T_M03_BUD            NUMBER(14,3);
   T_M04_BUD            NUMBER(14,3);
   T_M05_BUD            NUMBER(14,3);
   T_M06_BUD            NUMBER(14,3);
   T_M07_BUD            NUMBER(14,3);
   T_M08_BUD            NUMBER(14,3);
   T_M09_BUD            NUMBER(14,3);
   T_M10_BUD            NUMBER(14,3);
   T_M11_BUD            NUMBER(14,3);
   T_M12_BUD            NUMBER(14,3);
   TEMP_DIVN_CODE          VARCHAR2(6);
   TEMP_DEPT_CODE          VARCHAR2(6);
   TEMP_LVL_CODE           VARCHAR2(6);
   TEMP_LVL_NAME           VARCHAR2(60);
   TEMP_LVL_TYPE           VARCHAR2(1);
   TEMP_LVL_SEQ            NUMBER(6);
   TEMP_PARENT_LVL_CODE    VARCHAR2(6);
   TEMP_MAIN_ACNT_CODE     VARCHAR2(6);
   TEMP_TOTAL_FLAG         VARCHAR2(1);
   TEMP_LVL_STR            VARCHAR2(27);
   TEMP_MTD_BAL            NUMBER(14,3);
   TEMP_YTD_BAL            NUMBER(14,3);
   TEMP_ANN_BAL            NUMBER(14,3);
   TEMP_YR_OPEN_BAL        NUMBER(14,3);
   TEMP_PREV_MTD_BAL       NUMBER(14,3);
   TEMP_PREV_YTD_BAL       NUMBER(14,3);
   TEMP_PREV_ANN_BAL       NUMBER(14,3);
   TEMP_PREV_YR_OPEN_BAL   NUMBER(14,3);
   TEMP_MTD_BUD            NUMBER(14,3);
   TEMP_YTD_BUD            NUMBER(14,3);
   TEMP_ANN_BUD            NUMBER(14,3);
   TEMP_NEXT_MTD_BUD       NUMBER(14,3);
   TEMP_NEXT_YTD_BUD       NUMBER(14,3);
   TEMP_NEXT_ANN_BUD       NUMBER(14,3);
   TEMP_M01_BUD            NUMBER(14,3);
   TEMP_M02_BUD            NUMBER(14,3);
   TEMP_M03_BUD            NUMBER(14,3);
   TEMP_M04_BUD            NUMBER(14,3);
   TEMP_M05_BUD            NUMBER(14,3);
   TEMP_M06_BUD            NUMBER(14,3);
   TEMP_M07_BUD            NUMBER(14,3);
   TEMP_M08_BUD            NUMBER(14,3);
   TEMP_M09_BUD            NUMBER(14,3);
   TEMP_M10_BUD            NUMBER(14,3);
   TEMP_M11_BUD            NUMBER(14,3);
   TEMP_M12_BUD            NUMBER(14,3);
   CURSOR C1 IS
          SELECT MLS_DIVN_CODE, MLS_DEPT_CODE,
                 MLS_LVL_CODE, MLS_LVL_NAME, MLS_LVL_TYPE,
                 MLS_PARENT_LVL_CODE,
                 DECODE(P_INCL_ACNT, 'Y', MLS_MAIN_ACNT_CODE, '0'),
                 LS_LVL_SEQ, NVL(LVL_TOTAL_FLAG, 'N'),
                 SUM(MLS_MTD_BAL), SUM(MLS_YTD_BAL), SUM(MLS_ANN_BAL),
                 SUM(MLS_YR_OPEN_BAL), SUM(MLS_PREV_MTD_BAL),
                 SUM(MLS_PREV_YTD_BAL), SUM(MLS_PREV_ANN_BAL),
                 SUM(MLS_PREV_YR_OPEN_BAL),
                 SUM(MLS_MTD_BUD), SUM(MLS_YTD_BUD),
                 SUM(MLS_ANN_BUD),
                 SUM(MLS_NEXT_MTD_BUD), SUM(MLS_NEXT_YTD_BUD),
                 SUM(MLS_NEXT_ANN_BUD), SUM(MLS_M01_BUD),
                 SUM(MLS_M02_BUD), SUM(MLS_M03_BUD),
                 SUM(MLS_M04_BUD), SUM(MLS_M05_BUD),
                 SUM(MLS_M06_BUD), SUM(MLS_M07_BUD),
                 SUM(MLS_M08_BUD), SUM(MLS_M09_BUD),
                 SUM(MLS_M10_BUD), SUM(MLS_M11_BUD),
                 SUM(MLS_M12_BUD)
          FROM   FW_LEVEL, FM_COA_LEVEL, FW_MAIN_LEVEL_SUM
          WHERE  MLS_KEY_NO = P_KEY_NO
          AND    MLS_FORMAT_ID = P_FORMAT_ID
          AND    LVL_FORMAT_ID = MLS_FORMAT_ID
          AND    LVL_CODE = MLS_LVL_CODE
          AND    LS_FORMAT_ID = LVL_FORMAT_ID
          AND    LS_LVL_CODE = LVL_CODE
          GROUP BY MLS_DIVN_CODE, MLS_DEPT_CODE, MLS_LVL_CODE,
                   MLS_LVL_NAME, MLS_LVL_TYPE,
                   MLS_PARENT_LVL_CODE,
                   DECODE(P_INCL_ACNT, 'Y', MLS_MAIN_ACNT_CODE, '0'),
                   LS_LVL_SEQ, NVL(LVL_TOTAL_FLAG, 'N')
          ORDER  BY MLS_DIVN_CODE, MLS_DEPT_CODE, LS_LVL_SEQ,
                   DECODE(P_INCL_ACNT, 'Y', MLS_MAIN_ACNT_CODE, '0');
   CURSOR C2 IS
          SELECT MLS_LVL_CODE, '   TOTAL ' || MLS_LVL_NAME, MLS_LVL_TYPE,
                 MLS_PARENT_LVL_CODE,
                 NVL(LVL_TOTAL_FLAG, 'N'),
                 SUM(MLS_MTD_BAL), SUM(MLS_YTD_BAL), SUM(MLS_ANN_BAL),
                 SUM(MLS_YR_OPEN_BAL), SUM(MLS_PREV_MTD_BAL),
                 SUM(MLS_PREV_YTD_BAL), SUM(MLS_PREV_ANN_BAL),
                 SUM(MLS_PREV_YR_OPEN_BAL),
                 SUM(MLS_MTD_BUD), SUM(MLS_YTD_BUD),
                 SUM(MLS_ANN_BUD),
                 SUM(MLS_NEXT_MTD_BUD), SUM(MLS_NEXT_YTD_BUD),
                 SUM(MLS_NEXT_ANN_BUD), SUM(MLS_M01_BUD),
                 SUM(MLS_M02_BUD), SUM(MLS_M03_BUD),
                 SUM(MLS_M04_BUD), SUM(MLS_M05_BUD),
                 SUM(MLS_M06_BUD), SUM(MLS_M07_BUD),
                 SUM(MLS_M08_BUD), SUM(MLS_M09_BUD),
                 SUM(MLS_M10_BUD), SUM(MLS_M11_BUD),
                 SUM(MLS_M12_BUD)
          FROM   FM_COA_LEVEL, FW_MAIN_LEVEL_SUM, FW_LEVEL
          WHERE  LS_FORMAT_ID = P_FORMAT_ID
          AND    LS_LVL_SEQ = PREV_STR
          AND    MLS_KEY_NO = P_KEY_NO
          AND    MLS_FORMAT_ID = LS_FORMAT_ID
          AND    MLS_LVL_CODE = LS_LVL_CODE
          AND    MLS_DIVN_CODE = T_DIVN_CODE
          AND    MLS_DEPT_CODE = T_DEPT_CODE
          AND    LVL_FORMAT_ID = MLS_FORMAT_ID
          AND    LVL_CODE = MLS_LVL_CODE
          GROUP BY MLS_LVL_CODE, '   TOTAL ' || MLS_LVL_NAME, MLS_LVL_TYPE,
                   MLS_PARENT_LVL_CODE,
                   LS_LVL_SEQ, NVL(LVL_TOTAL_FLAG, 'N');
  PROCEDURE INSERT_BLANK_REC IS
  BEGIN
     RECORD_SEQ := NVL(RECORD_SEQ,0) + 1;
     LVL_TYPE := T_LVL_TYPE;
     INSERT INTO FW_MAIN_LEVEL_SUM_REP
            (MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_SEQ,
             MLS_LVL_TYPE, MLS_DIVN_CODE, MLS_DEPT_CODE)
     VALUES (P_KEY_NO, P_FORMAT_ID, RECORD_SEQ,
             LVL_TYPE, T_DIVN_CODE, T_DEPT_CODE);
  END;
  PROCEDURE INSERT_HEAD IS
  BEGIN
     RECORD_SEQ := NVL(RECORD_SEQ,0) + 1;
     INSERT INTO FW_MAIN_LEVEL_SUM_REP
            (MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_CODE,
            MLS_LVL_NAME, MLS_LVL_TYPE, MLS_LVL_SEQ,
            MLS_PARENT_LVL_CODE, MLS_DIVN_CODE, MLS_DEPT_CODE)
     VALUES (P_KEY_NO, P_FORMAT_ID, T_LVL_CODE,
             T_LVL_NAME, T_LVL_TYPE, RECORD_SEQ,
             T_PARENT_LVL_CODE, T_DIVN_CODE, T_DEPT_CODE);
     INSERT_BLANK_REC;
  END;
  PROCEDURE INSERT_REC IS
     CURSOR C3 IS
       SELECT MAIN_ACNT_NAME
       FROM   FM_MAIN_ACCOUNT
       WHERE  MAIN_ACNT_CODE = T_MAIN_ACNT_CODE;
     C3_LVL_NAME	VARCHAR2(60);
     M_DIFF             NUMBER(2);
  BEGIN
     RECORD_SEQ := NVL(RECORD_SEQ,0) + 1;
     IF NVL(T_MAIN_ACNT_CODE, '0') != '0' THEN
        IF C3%ISOPEN THEN
           CLOSE C3;
        END IF;
        OPEN C3;
        FETCH C3 INTO C3_LVL_NAME;
        IF C3%FOUND THEN
             M_DIFF := LENGTH(T_LVL_NAME) - LENGTH(LTRIM(T_LVL_NAME));
             T_LVL_NAME := LPAD(C3_LVL_NAME, LENGTH(C3_LVL_NAME) + M_DIFF);
        END IF;
        CLOSE C3;
     END IF;
     INSERT INTO FW_MAIN_LEVEL_SUM_REP
            (MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_CODE,
            MLS_LVL_NAME, MLS_LVL_TYPE, MLS_LVL_SEQ,
            MLS_PARENT_LVL_CODE,
            MLS_MAIN_ACNT_CODE, MLS_DIVN_CODE, MLS_DEPT_CODE,
            MLS_MTD_BAL, MLS_YTD_BAL, MLS_ANN_BAL, MLS_YR_OPEN_BAL,
            MLS_PREV_MTD_BAL, MLS_PREV_YTD_BAL, MLS_PREV_ANN_BAL,
            MLS_PREV_YR_OPEN_BAL, MLS_MTD_BUD, MLS_YTD_BUD,
            MLS_ANN_BUD,
            MLS_NEXT_MTD_BUD, MLS_NEXT_YTD_BUD, MLS_NEXT_ANN_BUD,
            MLS_M01_BUD, MLS_M02_BUD, MLS_M03_BUD, MLS_M04_BUD,
            MLS_M05_BUD, MLS_M06_BUD, MLS_M07_BUD, MLS_M08_BUD,
            MLS_M09_BUD, MLS_M10_BUD, MLS_M11_BUD, MLS_M12_BUD)
     VALUES (P_KEY_NO, P_FORMAT_ID,
            T_LVL_CODE, T_LVL_NAME, T_LVL_TYPE,
            RECORD_SEQ, T_PARENT_LVL_CODE,
            T_MAIN_ACNT_CODE, T_DIVN_CODE, T_DEPT_CODE,
            T_MTD_BAL, T_YTD_BAL, T_ANN_BAL,
            T_YR_OPEN_BAL, T_PREV_MTD_BAL,
            T_PREV_YTD_BAL, T_PREV_ANN_BAL, T_PREV_YR_OPEN_BAL,
            T_MTD_BUD, T_YTD_BUD, T_ANN_BUD,
            T_NEXT_MTD_BUD, T_NEXT_YTD_BUD, T_NEXT_ANN_BUD,
            T_M01_BUD, T_M02_BUD, T_M03_BUD, T_M04_BUD,
            T_M05_BUD, T_M06_BUD, T_M07_BUD, T_M08_BUD,
            T_M09_BUD, T_M10_BUD, T_M11_BUD, T_M12_BUD);
  END;
  PROCEDURE PROCESS_TOTAL IS
  BEGIN
    IF C2%ISOPEN THEN
       CLOSE C2;
    END IF;
    OPEN C2;
    FETCH C2 INTO P_LVL_CODE, P_LVL_NAME, P_LVL_TYPE,
                  P_PARENT_LVL_CODE,
                  P_TOTAL_FLAG,
                  P_MTD_BAL, P_YTD_BAL, P_ANN_BAL, P_YR_OPEN_BAL,
                  P_PREV_MTD_BAL, P_PREV_YTD_BAL,
                  P_PREV_ANN_BAL, P_PREV_YR_OPEN_BAL,
                  P_MTD_BUD, P_YTD_BUD, P_ANN_BUD,
                  P_NEXT_MTD_BUD, P_NEXT_YTD_BUD, P_NEXT_ANN_BUD,
                  P_M01_BUD, P_M02_BUD, P_M03_BUD, P_M04_BUD,
                  P_M05_BUD, P_M06_BUD, P_M07_BUD, P_M08_BUD,
                  P_M09_BUD, P_M10_BUD, P_M11_BUD, P_M12_BUD;
    IF C2%FOUND AND P_TOTAL_FLAG = 'Y' THEN
       RECORD_SEQ := NVL(RECORD_SEQ,0) + 1;
       INSERT INTO FW_MAIN_LEVEL_SUM_REP (
              MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_CODE,
              MLS_LVL_NAME, MLS_LVL_TYPE, MLS_LVL_SEQ,
              MLS_PARENT_LVL_CODE, MLS_DIVN_CODE, MLS_DEPT_CODE,
              MLS_MTD_BAL, MLS_YTD_BAL, MLS_ANN_BAL, MLS_YR_OPEN_BAL,
              MLS_PREV_MTD_BAL, MLS_PREV_YTD_BAL,
              MLS_PREV_ANN_BAL, MLS_PREV_YR_OPEN_BAL,
              MLS_MTD_BUD, MLS_YTD_BUD, MLS_ANN_BUD,
              MLS_NEXT_MTD_BUD, MLS_NEXT_YTD_BUD, MLS_NEXT_ANN_BUD,
              MLS_M01_BUD, MLS_M02_BUD, MLS_M03_BUD, MLS_M04_BUD,
              MLS_M05_BUD, MLS_M06_BUD, MLS_M07_BUD, MLS_M08_BUD,
              MLS_M09_BUD, MLS_M10_BUD, MLS_M11_BUD, MLS_M12_BUD)
       VALUES (P_KEY_NO, P_FORMAT_ID, P_LVL_CODE,
              P_LVL_NAME, P_LVL_TYPE, RECORD_SEQ,
              P_PARENT_LVL_CODE, T_DIVN_CODE, T_DEPT_CODE,
              P_MTD_BAL, P_YTD_BAL, P_ANN_BAL, P_YR_OPEN_BAL,
              P_PREV_MTD_BAL, P_PREV_YTD_BAL,
              P_PREV_ANN_BAL, P_PREV_YR_OPEN_BAL,
              P_MTD_BUD, P_YTD_BUD, P_ANN_BUD,
              P_NEXT_MTD_BUD, P_NEXT_YTD_BUD, P_NEXT_ANN_BUD,
              P_M01_BUD, P_M02_BUD, P_M03_BUD, P_M04_BUD,
              P_M05_BUD, P_M06_BUD, P_M07_BUD, P_M08_BUD,
              P_M09_BUD, P_M10_BUD, P_M11_BUD, P_M12_BUD);
       INSERT_BLANK_REC;
    END IF;
    CLOSE C2;
    HEAD_FLAG := 'N';
END;
BEGIN
   DELETE FROM FW_MAIN_LEVEL_SUM_REP
          WHERE MLS_KEY_NO = P_KEY_NO;
   PREV_STR := '';
   RECORD_SEQ := 0;
   HEAD_FLAG := 'N';
   FIRST_REC := 0;
   BLANK_REC_FLAG := 'N';
   IF C1%ISOPEN THEN
      CLOSE C1;
   END IF;
   OPEN C1;
LOOP
   FETCH C1 INTO TEMP_DIVN_CODE, TEMP_DEPT_CODE,
                 TEMP_LVL_CODE, TEMP_LVL_NAME, TEMP_LVL_TYPE,
                 TEMP_PARENT_LVL_CODE,
                 TEMP_MAIN_ACNT_CODE,
                 TEMP_LVL_STR, TEMP_TOTAL_FLAG,
                 TEMP_MTD_BAL, TEMP_YTD_BAL, TEMP_ANN_BAL, TEMP_YR_OPEN_BAL,
                 TEMP_PREV_MTD_BAL, TEMP_PREV_YTD_BAL,
                 TEMP_PREV_ANN_BAL, TEMP_PREV_YR_OPEN_BAL,
                 TEMP_MTD_BUD, TEMP_YTD_BUD, TEMP_ANN_BUD,
                 TEMP_NEXT_MTD_BUD, TEMP_NEXT_YTD_BUD, TEMP_NEXT_ANN_BUD,
                 TEMP_M01_BUD, TEMP_M02_BUD, TEMP_M03_BUD, TEMP_M04_BUD,
                 TEMP_M05_BUD, TEMP_M06_BUD, TEMP_M07_BUD, TEMP_M08_BUD,
                 TEMP_M09_BUD, TEMP_M10_BUD, TEMP_M11_BUD, TEMP_M12_BUD;
    IF FIRST_REC = 0 THEN
       IF C1%NOTFOUND THEN
          EXIT;
       END IF;
       FIRST_REC := 1;
    ELSE
      IF C1%NOTFOUND THEN
         INSERT_REC;
         EXIT;
      END IF;
      IF LENGTH(T_LVL_STR) > LENGTH(TEMP_LVL_STR) THEN
         INSERT_REC;
         INSERT_BLANK_REC;
	 PROCESS_TOTAL;
         LOOP
            PREV_STR := SUBSTR(PREV_STR, 1, LENGTH(PREV_STR)-3);
            IF LENGTH(PREV_STR) >= LENGTH(TEMP_LVL_STR) THEN
	       PROCESS_TOTAL;
            ELSE
               EXIT;
            END IF;
         END LOOP;
         BLANK_REC_FLAG := 'N';
      ELSIF LENGTH(T_LVL_STR) < LENGTH(TEMP_LVL_STR) THEN
            PREV_STR := T_LVL_STR;
            IF T_TOTAL_FLAG = 'Y' THEN
               IF BLANK_REC_FLAG = 'D' THEN
                  INSERT_BLANK_REC;
                  BLANK_REC_FLAG := 'N';
               END IF;
               INSERT_HEAD;
            END IF;
      ELSE
        BLANK_REC_FLAG := 'D';
        IF NVL(P_INCL_ACNT, 'N') = 'N' THEN
           INSERT_REC;
           IF NVL(SUBSTR(T_LVL_STR, 1, LENGTH(T_LVL_STR) - 3), '1') !=
              NVL(SUBSTR(TEMP_LVL_STR, 1, LENGTH(TEMP_LVL_STR) - 3), '2') THEN
                INSERT_BLANK_REC;
                BLANK_REC_FLAG := 'N';
           END IF;
        END IF;
        IF NVL(P_INCL_ACNT, 'N') = 'N' THEN
           NULL;
        ELSIF T_LVL_STR != TEMP_LVL_STR THEN
              INSERT_REC;
              INSERT_BLANK_REC;
              IF HEAD_FLAG = 'T' THEN
                 PROCESS_TOTAL;
                 PREV_STR := SUBSTR(PREV_STR, 1, LENGTH(PREV_STR)-3);
              END IF;
        ELSIF T_LVL_STR = TEMP_LVL_STR THEN
              IF T_TOTAL_FLAG = 'Y' AND HEAD_FLAG = 'N' THEN
                 INSERT_HEAD;
                 PREV_STR := T_LVL_STR;
                 HEAD_FLAG := 'T';
              END IF;
              INSERT_REC;
        END IF;
      END IF;
   END IF;
      SELECT TEMP_DIVN_CODE, TEMP_DEPT_CODE,
             TEMP_LVL_CODE, TEMP_LVL_NAME, TEMP_LVL_TYPE,
             TEMP_LVL_SEQ, TEMP_PARENT_LVL_CODE,
             TEMP_MAIN_ACNT_CODE,
             TEMP_LVL_STR, TEMP_TOTAL_FLAG,
             TEMP_MTD_BAL, TEMP_YTD_BAL, TEMP_ANN_BAL, TEMP_YR_OPEN_BAL,
             TEMP_PREV_MTD_BAL, TEMP_PREV_YTD_BAL,
             TEMP_PREV_ANN_BAL, TEMP_PREV_YR_OPEN_BAL,
             TEMP_MTD_BUD, TEMP_YTD_BUD, TEMP_ANN_BUD,
             TEMP_NEXT_MTD_BUD, TEMP_NEXT_YTD_BUD, TEMP_NEXT_ANN_BUD,
             TEMP_M01_BUD, TEMP_M02_BUD, TEMP_M03_BUD, TEMP_M04_BUD,
             TEMP_M05_BUD, TEMP_M06_BUD, TEMP_M07_BUD, TEMP_M08_BUD,
             TEMP_M09_BUD, TEMP_M10_BUD, TEMP_M11_BUD, TEMP_M12_BUD
      INTO   T_DIVN_CODE, T_DEPT_CODE, T_LVL_CODE, T_LVL_NAME, T_LVL_TYPE,
             T_LVL_SEQ, T_PARENT_LVL_CODE,
             T_MAIN_ACNT_CODE,
             T_LVL_STR, T_TOTAL_FLAG,
             T_MTD_BAL, T_YTD_BAL, T_ANN_BAL, T_YR_OPEN_BAL,
             T_PREV_MTD_BAL, T_PREV_YTD_BAL,
             T_PREV_ANN_BAL, T_PREV_YR_OPEN_BAL,
             T_MTD_BUD, T_YTD_BUD, T_ANN_BUD,
             T_NEXT_MTD_BUD, T_NEXT_YTD_BUD, T_NEXT_ANN_BUD,
             T_M01_BUD, T_M02_BUD, T_M03_BUD, T_M04_BUD,
             T_M05_BUD, T_M06_BUD, T_M07_BUD, T_M08_BUD,
             T_M09_BUD, T_M10_BUD, T_M11_BUD, T_M12_BUD
      FROM   DUAL;
END LOOP;
   CLOSE C1;
   INSERT_BLANK_REC;
   IF PREV_STR IS NOT NULL THEN
      PROCESS_TOTAL;
   END IF;
   LOOP
      PREV_STR := SUBSTR(PREV_STR, 1, LENGTH(PREV_STR)-3);
      IF LENGTH(PREV_STR) > 0 THEN
	 PROCESS_TOTAL;
      ELSE
         EXIT;
      END IF;
   END LOOP;
END;
/
CREATE OR REPLACE PROCEDURE F_MAIN_LEVEL_SUM
                 (P_KEY_NO           IN    NUMBER,
                  P_COMP_CODE        IN    VARCHAR2,
                  P_FORMAT_ID        IN    NUMBER,
                  P_FRM_DT           IN    DATE,
                  P_TO_DT            IN    DATE,
                  P_INCL_BUD         IN    VARCHAR2,
                  P_INCL_MTH         IN    VARCHAR2,
                  P_INCL_ANN         IN    VARCHAR2,
                  P_INCL_ZERO        IN    VARCHAR2,
                  P_ERR_NO          OUT    NUMBER) AS
P_CUR_ACNT_YEAR        NUMBER(2);
P_AS_OF_DT             DATE;
P_FRM_ACNT_YEAR        NUMBER(2);
P_FRM_CAL_YEAR         NUMBER(4);
P_FRM_CAL_MONTH        NUMBER(2);
P_FRM_BEGIN_DT         DATE;
P_FRM_END_DT           DATE;
P_TO_BEGIN_DT          DATE;
P_TO_END_DT            DATE;
P_WORK_FRM_DT          DATE;
P_WORK_TO_DT           DATE;
P_FRM_READ_TRAN_FLAG   VARCHAR2(1);
P_FRM_CUR_YEAR_FLAG    VARCHAR2(1);
P_TO_ACNT_YEAR         NUMBER(2);
P_TO_CAL_YEAR          NUMBER(4);
P_TO_CAL_MONTH         NUMBER(2);
P_TO_READ_TRAN_FLAG    VARCHAR2(1);
P_TO_CUR_YEAR_FLAG     VARCHAR2(1);
P_FRM_CAL_YEAR_MONTH   NUMBER(6);
P_TO_CAL_YEAR_MONTH    NUMBER(6);
P_MAX_LENGTH           NUMBER(3);
P_LENGTH               NUMBER(3);
P_PAD_LENGTH           NUMBER(2);
P_LVL_CODE             VARCHAR2(6);
P_ACNT_CODE            VARCHAR2(6);
P_DIVN_CODE            VARCHAR2(6);
P_DEPT_CODE            VARCHAR2(6);
P_HEAD_NO_1            NUMBER(1);
P_ANLY_CODE_1          VARCHAR(6);
P_HEAD_NO_2            NUMBER(1);
P_ANLY_CODE_2          VARCHAR(6);
P_ANN_BAL              NUMBER(14,3);
P_YTD_BAL              NUMBER(14,3);
P_MTD_BAL              NUMBER(14,3);
P_YR_OPEN_BAL          NUMBER(14,3);
P_CL_BAL               NUMBER(14,3);
P_MTD_BAL_SUB_1        NUMBER(14,3);
P_MTD_BAL_SUB_2        NUMBER(14,3);
P_M01_BUD              NUMBER(14,3);
P_M02_BUD              NUMBER(14,3);
P_M03_BUD              NUMBER(14,3);
P_M04_BUD              NUMBER(14,3);
P_M05_BUD              NUMBER(14,3);
P_M06_BUD              NUMBER(14,3);
P_M07_BUD              NUMBER(14,3);
P_M08_BUD              NUMBER(14,3);
P_M09_BUD              NUMBER(14,3);
P_M10_BUD              NUMBER(14,3);
P_M11_BUD              NUMBER(14,3);
P_M12_BUD              NUMBER(14,3);
CURSOR F_FRM_PERIOD IS
SELECT APER_ACNT_YEAR, APER_CAL_YEAR, APER_CAL_MONTH,
       APER_FRM_DT, APER_TO_DT,
       DECODE(TRUNC(P_AS_OF_DT), TRUNC(APER_FRM_DT), 'N', 'Y'),
       DECODE(APER_ACNT_YEAR, P_CUR_ACNT_YEAR, 'Y', 'N')
FROM   FM_ACNT_PERIOD
WHERE  APER_COMP_CODE = P_COMP_CODE
AND    TRUNC(P_AS_OF_DT) BETWEEN APER_FRM_DT AND APER_TO_DT ;
CURSOR F_TO_PERIOD IS
SELECT APER_ACNT_YEAR, APER_CAL_YEAR, APER_CAL_MONTH,
       APER_FRM_DT, APER_TO_DT,
       DECODE(TRUNC(P_AS_OF_DT), TRUNC(APER_TO_DT), 'N',
              TRUNC(SYSDATE), 'N', 'Y'),
       DECODE(APER_ACNT_YEAR, P_CUR_ACNT_YEAR, 'Y', 'N')
FROM   FM_ACNT_PERIOD
WHERE  APER_COMP_CODE = P_COMP_CODE
AND    TRUNC(P_AS_OF_DT) BETWEEN TRUNC(APER_FRM_DT) AND TRUNC(APER_TO_DT);
CURSOR F_SUMM_CUR IS
SELECT CAF_LVL_CODE, CAF_MAIN_ACNT_CODE,
       NVL(ABAL_DIVN_CODE, '0'),
       NVL(ABAL_DEPT_CODE, '0'),
       NVL(ABAL_HEAD_NO_1, 0),
       NVL(ABAL_ANLY_CODE_1, '0'),
       NVL(ABAL_HEAD_NO_2, 0),
       NVL(ABAL_ANLY_CODE_2, '0'),
       SUM(DECODE(ABAL_CAL_MONTH, 0,
                         NVL(ABAL_LC_MTD_DR,0) - NVL(ABAL_LC_MTD_CR,0), 0)),
       SUM(DECODE(SIGN((ABAL_CAL_YEAR * 100 + ABAL_CAL_MONTH) -
                       P_FRM_CAL_YEAR_MONTH),
                  -1, 0,
                  DECODE(
                         SIGN((ABAL_CAL_YEAR * 100 + ABAL_CAL_MONTH) -
                              P_TO_CAL_YEAR_MONTH),
                         1, 0,
                         NVL(ABAL_LC_MTD_DR,0) - NVL(ABAL_LC_MTD_CR,0)))),
       SUM(DECODE(SIGN((ABAL_CAL_YEAR * 100 + ABAL_CAL_MONTH) -
                    P_TO_CAL_YEAR_MONTH), 1, 0,
                    NVL(ABAL_LC_MTD_DR,0) - NVL(ABAL_LC_MTD_CR,0))),
       DECODE(P_INCL_ANN, 'Y',
              SUM(NVL(ABAL_LC_MTD_DR,0) - NVL(ABAL_LC_MTD_CR,0)), 0)
FROM   FS_CUR_ACNT_BAL, FM_COA_ACNT_FORMAT
WHERE  CAF_FORMAT_ID = P_FORMAT_ID
AND    CAF_MAIN_ACNT_CODE = ABAL_MAIN_ACNT_CODE
AND    ABAL_COMP_CODE = P_COMP_CODE
AND    ABAL_ACNT_YEAR = P_TO_ACNT_YEAR
AND    ABAL_CAL_YEAR * 100 + ABAL_CAL_MONTH <=
         DECODE(P_INCL_ANN, 'Y', ABAL_CAL_YEAR * 100 + ABAL_CAL_MONTH,
                                 P_TO_CAL_YEAR * 100 + P_TO_CAL_MONTH)
GROUP BY CAF_LVL_CODE, CAF_MAIN_ACNT_CODE,
       NVL(ABAL_DIVN_CODE, '0'),
       NVL(ABAL_DEPT_CODE, '0'),
       NVL(ABAL_HEAD_NO_1, 0),
       NVL(ABAL_ANLY_CODE_1, '0'),
       NVL(ABAL_HEAD_NO_2, 0),
       NVL(ABAL_ANLY_CODE_2, '0');
CURSOR F_DETL_CUR IS
SELECT CAF_LVL_CODE, CAF_MAIN_ACNT_CODE,
       NVL(TD_DIVN_CODE, '0'),
       NVL(TD_DEPT_CODE, '0'),
       NVL(TD_HEAD_NO_1, 0),
       NVL(TD_ANLY_CODE_1, '0'),
       NVL(TD_HEAD_NO_2, 0),
       NVL(TD_ANLY_CODE_2, '0'),
       SUM(DECODE(SIGN(TRUNC(TH_DOC_DT) - TRUNC(P_WORK_FRM_DT)),
               -1, DECODE(TD_DOC_DRCR_FLAG,'D',1,-1) * NVL(TD_DOC_AMT,0), 0)),
       SUM(DECODE(SIGN(TRUNC(TH_DOC_DT) - TRUNC(P_WORK_TO_DT)),
               1, DECODE(TD_DOC_DRCR_FLAG,'D',1,-1) * NVL(TD_DOC_AMT,0), 0))
FROM   FT_CUR_TRANS_HEADER, FT_CUR_TRANS_DETAIL, FM_COA_ACNT_FORMAT
WHERE  CAF_FORMAT_ID = P_FORMAT_ID
AND    CAF_MAIN_ACNT_CODE = TD_MAIN_ACNT_CODE
AND    TRUNC(TH_DOC_DT) BETWEEN TRUNC(P_FRM_BEGIN_DT) AND
                             TRUNC(P_TO_END_DT)
AND    TH_COMP_CODE = P_COMP_CODE
AND    TH_ACNT_YEAR = P_TO_ACNT_YEAR
AND    TH_COMP_CODE = TD_COMP_CODE
AND    TH_TRAN_CODE = TD_TRAN_CODE
AND    TH_DOC_NO = TD_DOC_NO
AND    TH_ACNT_YEAR = TD_ACNT_YEAR
GROUP BY CAF_LVL_CODE, CAF_MAIN_ACNT_CODE,
       NVL(TD_DIVN_CODE, '0'),
       NVL(TD_DEPT_CODE, '0'),
       NVL(TD_HEAD_NO_1, 0),
       NVL(TD_ANLY_CODE_1, '0'),
       NVL(TD_HEAD_NO_2, 0),
       NVL(TD_ANLY_CODE_2, '0');
CURSOR F_SUMM_PRV IS
SELECT CAF_LVL_CODE, CAF_MAIN_ACNT_CODE,
       NVL(ABAL_DIVN_CODE, '0'),
       NVL(ABAL_DEPT_CODE, '0'),
       NVL(ABAL_HEAD_NO_1, 0),
       NVL(ABAL_ANLY_CODE_1, '0'),
       NVL(ABAL_HEAD_NO_2, 0),
       NVL(ABAL_ANLY_CODE_2, '0'),
       SUM(DECODE(ABAL_CAL_MONTH, 0,
                         NVL(ABAL_LC_MTD_DR,0) - NVL(ABAL_LC_MTD_CR,0), 0)),
       SUM(DECODE(SIGN((ABAL_CAL_YEAR * 100 + ABAL_CAL_MONTH) -
                       P_FRM_CAL_YEAR_MONTH),
                  -1, 0,
                  DECODE(SIGN((ABAL_CAL_YEAR * 100 + ABAL_CAL_MONTH) -
                              P_TO_CAL_YEAR_MONTH), 1, 0,
                         NVL(ABAL_LC_MTD_DR,0) - NVL(ABAL_LC_MTD_CR,0)))),
       SUM(DECODE(SIGN((ABAL_CAL_YEAR * 100 + ABAL_CAL_MONTH) -
                    P_TO_CAL_YEAR_MONTH), 1, 0,
                    NVL(ABAL_LC_MTD_DR,0) - NVL(ABAL_LC_MTD_CR,0))),
       DECODE(P_INCL_ANN, 'Y',
              SUM(NVL(ABAL_LC_MTD_DR,0) - NVL(ABAL_LC_MTD_CR,0)), 0)
FROM   FS_PRV_ACNT_BAL, FM_COA_ACNT_FORMAT
WHERE  CAF_FORMAT_ID = P_FORMAT_ID
AND    CAF_MAIN_ACNT_CODE = ABAL_MAIN_ACNT_CODE
AND    ABAL_COMP_CODE = P_COMP_CODE
AND    ABAL_ACNT_YEAR = P_TO_ACNT_YEAR
AND    ABAL_CAL_YEAR * 100 + ABAL_CAL_MONTH <=
         DECODE(P_INCL_ANN, 'Y', ABAL_CAL_YEAR * 100 + ABAL_CAL_MONTH,
                                 P_TO_CAL_YEAR * 100 + P_TO_CAL_MONTH)
GROUP BY CAF_LVL_CODE, CAF_MAIN_ACNT_CODE,
       NVL(ABAL_DIVN_CODE, '0'),
       NVL(ABAL_DEPT_CODE, '0'),
       NVL(ABAL_HEAD_NO_1, 0),
       NVL(ABAL_ANLY_CODE_1, '0'),
       NVL(ABAL_HEAD_NO_2, 0),
       NVL(ABAL_ANLY_CODE_2, '0');
CURSOR F_DETL_PRV IS
SELECT CAF_LVL_CODE, CAF_MAIN_ACNT_CODE,
       NVL(TD_DIVN_CODE, '0'),
       NVL(TD_DEPT_CODE, '0'),
       NVL(TD_HEAD_NO_1, 0),
       NVL(TD_ANLY_CODE_1, '0'),
       NVL(TD_HEAD_NO_2, 0),
       NVL(TD_ANLY_CODE_2, '0'),
       SUM(DECODE(SIGN(TRUNC(TH_DOC_DT) - TRUNC(P_WORK_FRM_DT)),
               -1, DECODE(TD_DOC_DRCR_FLAG,'D',1,-1) * NVL(TD_DOC_AMT,0), 0)),
       SUM(DECODE(SIGN(TRUNC(TH_DOC_DT) - TRUNC(P_WORK_TO_DT)),
               1, DECODE(TD_DOC_DRCR_FLAG,'D',1,-1) * NVL(TD_DOC_AMT,0), 0))
FROM   FT_PRV_TRANS_HEADER, FT_PRV_TRANS_DETAIL, FM_COA_ACNT_FORMAT
WHERE  CAF_FORMAT_ID = P_FORMAT_ID
AND    CAF_MAIN_ACNT_CODE = TD_MAIN_ACNT_CODE
AND    TH_COMP_CODE = P_COMP_CODE
AND    TH_ACNT_YEAR = P_TO_ACNT_YEAR
AND    TRUNC(TH_DOC_DT) BETWEEN TRUNC(P_FRM_BEGIN_DT) AND TRUNC(P_TO_END_DT)
AND    TH_COMP_CODE = TD_COMP_CODE
AND    TH_TRAN_CODE = TD_TRAN_CODE
AND    TH_DOC_NO = TD_DOC_NO
AND    TH_ACNT_YEAR = TD_ACNT_YEAR
GROUP BY CAF_LVL_CODE, CAF_MAIN_ACNT_CODE,
       NVL(TD_DIVN_CODE, '0'),
       NVL(TD_DEPT_CODE, '0'),
       NVL(TD_HEAD_NO_1, 0),
       NVL(TD_ANLY_CODE_1, '0'),
       NVL(TD_HEAD_NO_2, 0),
       NVL(TD_ANLY_CODE_2, '0');
CURSOR BUD_FIGURES IS
SELECT CAF_LVL_CODE, CAF_MAIN_ACNT_CODE,
       NVL(MBUD_DIVN_CODE, '0'),
       NVL(MBUD_DEPT_CODE, '0'),
       NVL(MBUD_HEAD_NO_1, 0),
       NVL(MBUD_ANLY_CODE_1, '0'),
       NVL(MBUD_HEAD_NO_2, 0),
       NVL(MBUD_ANLY_CODE_2, '0'),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(SIGN((MBUD_CAL_YEAR * 100 + MBUD_CAL_MONTH) -
                       P_FRM_CAL_YEAR_MONTH), -1, 0,
                  DECODE(SIGN((MBUD_CAL_YEAR * 100 + MBUD_CAL_MONTH) -
                              P_TO_CAL_YEAR_MONTH), 1, 0,
                         NVL(MBUD_ORGL_AMT,0)))),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE( SIGN((MBUD_CAL_YEAR * 100 + MBUD_CAL_MONTH) -
                              P_TO_CAL_YEAR_MONTH), 1, 0,
                         NVL(MBUD_ORGL_AMT,0))),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   NVL(MBUD_ORGL_AMT,0))
FROM   FM_YEARLY_BUDGET, FM_MONTHLY_BUDGET, FM_COA_ACNT_FORMAT
WHERE  CAF_FORMAT_ID = P_FORMAT_ID
AND    CAF_MAIN_ACNT_CODE = MBUD_MAIN_ACNT_CODE
AND    MBUD_COMP_CODE = P_COMP_CODE
AND    MBUD_ACNT_YEAR = P_TO_ACNT_YEAR
AND    MBUD_YEAR_FLAG = 'C'
AND    YBUD_COMP_CODE = MBUD_COMP_CODE
AND    YBUD_ACNT_YEAR = MBUD_ACNT_YEAR
AND    YBUD_MAIN_ACNT_CODE = MBUD_MAIN_ACNT_CODE
AND    NVL(YBUD_SUB_ACNT_CODE,'0') = NVL(MBUD_SUB_ACNT_CODE,'0')
AND    NVL(YBUD_DIVN_CODE,'0') = NVL(MBUD_DIVN_CODE,'0')
AND    NVL(YBUD_DEPT_CODE,'0') = NVL(MBUD_DEPT_CODE,'0')
AND    NVL(YBUD_HEAD_NO_1,0) = NVL(MBUD_HEAD_NO_1,0)
AND    NVL(YBUD_ANLY_CODE_1,'0') = NVL(MBUD_ANLY_CODE_1,'0')
AND    NVL(YBUD_HEAD_NO_2,0) = NVL(MBUD_HEAD_NO_2,0)
AND    NVL(YBUD_ANLY_CODE_2,'0') = NVL(MBUD_ANLY_CODE_2,'0')
GROUP  BY CAF_LVL_CODE, CAF_MAIN_ACNT_CODE,
       NVL(MBUD_DIVN_CODE, '0'),
       NVL(MBUD_DEPT_CODE, '0'),
       NVL(MBUD_HEAD_NO_1, 0),
       NVL(MBUD_ANLY_CODE_1, '0'),
       NVL(MBUD_HEAD_NO_2, 0),
       NVL(MBUD_ANLY_CODE_2, '0');
CURSOR NEXT_BUD_FIGURES IS
SELECT CAF_LVL_CODE, CAF_MAIN_ACNT_CODE,
       NVL(MBUD_DIVN_CODE, '0'),
       NVL(MBUD_DEPT_CODE, '0'),
       NVL(MBUD_HEAD_NO_1, 0),
       NVL(MBUD_ANLY_CODE_1, '0'),
       NVL(MBUD_HEAD_NO_2, 0),
       NVL(MBUD_ANLY_CODE_2, '0'),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(SIGN((MBUD_CAL_YEAR * 100 + MBUD_CAL_MONTH) -
                       P_FRM_CAL_YEAR_MONTH),
                  -1, 0,
                  DECODE(
                         SIGN((MBUD_CAL_YEAR * 100 + MBUD_CAL_MONTH) -
                              P_TO_CAL_YEAR_MONTH),
                         1, 0,
                         NVL(MBUD_ORGL_AMT,0)))),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE( SIGN((MBUD_CAL_YEAR * 100 + MBUD_CAL_MONTH) -
                              P_TO_CAL_YEAR_MONTH),
                         1, 0,
                         NVL(MBUD_ORGL_AMT,0))),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   NVL(MBUD_ORGL_AMT,0))
FROM   FM_YEARLY_BUDGET, FM_MONTHLY_BUDGET, FM_COA_ACNT_FORMAT
WHERE  CAF_FORMAT_ID = P_FORMAT_ID
AND    CAF_MAIN_ACNT_CODE = MBUD_MAIN_ACNT_CODE
AND    MBUD_COMP_CODE = P_COMP_CODE
AND    MBUD_ACNT_YEAR = (P_TO_ACNT_YEAR + 1)
AND    MBUD_YEAR_FLAG = 'N'
AND    YBUD_COMP_CODE = MBUD_COMP_CODE
AND    YBUD_ACNT_YEAR = MBUD_ACNT_YEAR
AND    YBUD_MAIN_ACNT_CODE = MBUD_MAIN_ACNT_CODE
AND    NVL(YBUD_SUB_ACNT_CODE,'0') = NVL(MBUD_SUB_ACNT_CODE,'0')
AND    NVL(YBUD_DIVN_CODE,'0') = NVL(MBUD_DIVN_CODE,'0')
AND    NVL(YBUD_DEPT_CODE,'0') = NVL(MBUD_DEPT_CODE,'0')
AND    NVL(YBUD_HEAD_NO_1,0) = NVL(MBUD_HEAD_NO_1,0)
AND    NVL(YBUD_ANLY_CODE_1,'0') = NVL(MBUD_ANLY_CODE_1,'0')
AND    NVL(YBUD_HEAD_NO_2,0) = NVL(MBUD_HEAD_NO_2,0)
AND    NVL(YBUD_ANLY_CODE_2,'0') = NVL(MBUD_ANLY_CODE_2,'0')
GROUP  BY CAF_LVL_CODE, CAF_MAIN_ACNT_CODE,
       NVL(MBUD_DIVN_CODE, '0'),
       NVL(MBUD_DEPT_CODE, '0'),
       NVL(MBUD_HEAD_NO_1, 0),
       NVL(MBUD_ANLY_CODE_1, '0'),
       NVL(MBUD_HEAD_NO_2, 0),
       NVL(MBUD_ANLY_CODE_2, '0');
CURSOR BUD_MONTHS IS
SELECT CAF_LVL_CODE, CAF_MAIN_ACNT_CODE,
       NVL(MBUD_DIVN_CODE, '0'),
       NVL(MBUD_DEPT_CODE, '0'),
       NVL(MBUD_HEAD_NO_1, 0),
       NVL(MBUD_ANLY_CODE_1, '0'),
       NVL(MBUD_HEAD_NO_2, 0),
       NVL(MBUD_ANLY_CODE_2, '0'),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 1, NVL(MBUD_ORGL_AMT,0), 0)),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 2, NVL(MBUD_ORGL_AMT,0), 0)),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 3, NVL(MBUD_ORGL_AMT,0), 0)),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 4, NVL(MBUD_ORGL_AMT,0), 0)),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 5, NVL(MBUD_ORGL_AMT,0), 0)),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 6, NVL(MBUD_ORGL_AMT,0), 0)),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 7, NVL(MBUD_ORGL_AMT,0), 0)),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 8, NVL(MBUD_ORGL_AMT,0), 0)),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 9, NVL(MBUD_ORGL_AMT,0), 0)),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 10, NVL(MBUD_ORGL_AMT,0), 0)),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 11, NVL(MBUD_ORGL_AMT,0), 0)),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 12, NVL(MBUD_ORGL_AMT,0), 0))
FROM   FM_YEARLY_BUDGET, FM_MONTHLY_BUDGET, FM_COA_ACNT_FORMAT
WHERE  CAF_FORMAT_ID = P_FORMAT_ID
AND    CAF_MAIN_ACNT_CODE = MBUD_MAIN_ACNT_CODE
AND    MBUD_COMP_CODE = P_COMP_CODE
AND    MBUD_ACNT_YEAR = P_TO_ACNT_YEAR
AND    MBUD_YEAR_FLAG = 'C'
AND    YBUD_COMP_CODE = MBUD_COMP_CODE
AND    YBUD_ACNT_YEAR = MBUD_ACNT_YEAR
AND    YBUD_MAIN_ACNT_CODE = MBUD_MAIN_ACNT_CODE
AND    NVL(YBUD_SUB_ACNT_CODE,'0') = NVL(MBUD_SUB_ACNT_CODE,'0')
AND    NVL(YBUD_DIVN_CODE,'0') = NVL(MBUD_DIVN_CODE,'0')
AND    NVL(YBUD_DEPT_CODE,'0') = NVL(MBUD_DEPT_CODE,'0')
AND    NVL(YBUD_HEAD_NO_1,0) = NVL(MBUD_HEAD_NO_1,0)
AND    NVL(YBUD_ANLY_CODE_1,'0') = NVL(MBUD_ANLY_CODE_1,'0')
AND    NVL(YBUD_HEAD_NO_2,0) = NVL(MBUD_HEAD_NO_2,0)
AND    NVL(YBUD_ANLY_CODE_2,'0') = NVL(MBUD_ANLY_CODE_2,'0')
GROUP  BY CAF_LVL_CODE, CAF_MAIN_ACNT_CODE,
       NVL(MBUD_DIVN_CODE, '0'),
       NVL(MBUD_DEPT_CODE, '0'),
       NVL(MBUD_HEAD_NO_1, 0),
       NVL(MBUD_ANLY_CODE_1, '0'),
       NVL(MBUD_HEAD_NO_2, 0),
       NVL(MBUD_ANLY_CODE_2, '0');
CURSOR NEXT_BUD_MONTHS IS
SELECT CAF_LVL_CODE, CAF_MAIN_ACNT_CODE,
       NVL(MBUD_DIVN_CODE, '0'),
       NVL(MBUD_DEPT_CODE, '0'),
       NVL(MBUD_HEAD_NO_1, 0),
       NVL(MBUD_ANLY_CODE_1, '0'),
       NVL(MBUD_HEAD_NO_2, 0),
       NVL(MBUD_ANLY_CODE_2, '0'),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 1, NVL(MBUD_ORGL_AMT,0), 0)),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 2, NVL(MBUD_ORGL_AMT,0), 0)),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 3, NVL(MBUD_ORGL_AMT,0), 0)),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 4, NVL(MBUD_ORGL_AMT,0), 0)),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 5, NVL(MBUD_ORGL_AMT,0), 0)),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 6, NVL(MBUD_ORGL_AMT,0), 0)),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 7, NVL(MBUD_ORGL_AMT,0), 0)),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 8, NVL(MBUD_ORGL_AMT,0), 0)),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 9, NVL(MBUD_ORGL_AMT,0), 0)),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 10, NVL(MBUD_ORGL_AMT,0), 0)),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 11, NVL(MBUD_ORGL_AMT,0), 0)),
       SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	   DECODE(MBUD_CAL_MONTH, 12, NVL(MBUD_ORGL_AMT,0), 0))
FROM   FM_YEARLY_BUDGET, FM_MONTHLY_BUDGET, FM_COA_ACNT_FORMAT
WHERE  CAF_FORMAT_ID = P_FORMAT_ID
AND    CAF_MAIN_ACNT_CODE = MBUD_MAIN_ACNT_CODE
AND    MBUD_COMP_CODE = P_COMP_CODE
AND    MBUD_ACNT_YEAR = (P_TO_ACNT_YEAR + 1)
AND    MBUD_YEAR_FLAG = 'N'
AND    YBUD_COMP_CODE = MBUD_COMP_CODE
AND    YBUD_ACNT_YEAR = MBUD_ACNT_YEAR
AND    YBUD_MAIN_ACNT_CODE = MBUD_MAIN_ACNT_CODE
AND    NVL(YBUD_SUB_ACNT_CODE,'0') = NVL(MBUD_SUB_ACNT_CODE,'0')
AND    NVL(YBUD_DIVN_CODE,'0') = NVL(MBUD_DIVN_CODE,'0')
AND    NVL(YBUD_DEPT_CODE,'0') = NVL(MBUD_DEPT_CODE,'0')
AND    NVL(YBUD_HEAD_NO_1,0) = NVL(MBUD_HEAD_NO_1,0)
AND    NVL(YBUD_ANLY_CODE_1,'0') = NVL(MBUD_ANLY_CODE_1,'0')
AND    NVL(YBUD_HEAD_NO_2,0) = NVL(MBUD_HEAD_NO_2,0)
AND    NVL(YBUD_ANLY_CODE_2,'0') = NVL(MBUD_ANLY_CODE_2,'0')
GROUP  BY CAF_LVL_CODE, CAF_MAIN_ACNT_CODE,
       NVL(MBUD_DIVN_CODE, '0'),
       NVL(MBUD_DEPT_CODE, '0'),
       NVL(MBUD_HEAD_NO_1, 0),
       NVL(MBUD_ANLY_CODE_1, '0'),
       NVL(MBUD_HEAD_NO_2, 0),
       NVL(MBUD_ANLY_CODE_2, '0');
BEGIN
DELETE FROM FW_MAIN_LEVEL_SUM_TEMP
       WHERE MLS_KEY_NO = P_KEY_NO;
DELETE FROM FW_MAIN_LEVEL_SUM
       WHERE MLS_KEY_NO = P_KEY_NO;
P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(P_COMP_CODE);
P_WORK_FRM_DT := P_FRM_DT;
P_WORK_TO_DT  := P_TO_DT;
P_AS_OF_DT := P_WORK_FRM_DT;
IF F_FRM_PERIOD%ISOPEN THEN
     CLOSE F_FRM_PERIOD;
END IF;
OPEN F_FRM_PERIOD;
FETCH F_FRM_PERIOD INTO P_FRM_ACNT_YEAR, P_FRM_CAL_YEAR, P_FRM_CAL_MONTH,
                    P_FRM_BEGIN_DT, P_FRM_END_DT,
                    P_FRM_READ_TRAN_FLAG, P_FRM_CUR_YEAR_FLAG;
IF F_FRM_PERIOD%NOTFOUND THEN
     P_ERR_NO := 909;
     CLOSE F_FRM_PERIOD;
     RETURN;
END IF;
CLOSE F_FRM_PERIOD;
P_AS_OF_DT := P_WORK_TO_DT;
IF F_TO_PERIOD%ISOPEN THEN
     CLOSE F_TO_PERIOD;
END IF;
OPEN F_TO_PERIOD;
FETCH F_TO_PERIOD INTO P_TO_ACNT_YEAR, P_TO_CAL_YEAR, P_TO_CAL_MONTH,
                    P_TO_BEGIN_DT, P_TO_END_DT,
                    P_TO_READ_TRAN_FLAG, P_TO_CUR_YEAR_FLAG;
IF F_TO_PERIOD%NOTFOUND THEN
     P_ERR_NO := 909;
     CLOSE F_TO_PERIOD;
     RETURN;
END IF;
CLOSE F_TO_PERIOD;
IF P_FRM_ACNT_YEAR != P_TO_ACNT_YEAR THEN
     P_ERR_NO := 910;
     RETURN;
END IF;
P_FRM_CAL_YEAR_MONTH := P_FRM_CAL_YEAR * 100 + P_FRM_CAL_MONTH;
P_TO_CAL_YEAR_MONTH  := P_TO_CAL_YEAR * 100 + P_TO_CAL_MONTH;
IF P_TO_ACNT_YEAR = P_CUR_ACNT_YEAR THEN
     IF F_SUMM_CUR%ISOPEN THEN
          CLOSE F_SUMM_CUR;
     END IF;
     OPEN F_SUMM_CUR;
     <<INS_DET_LEVEL_SUMM_CUR>>
     LOOP
     FETCH F_SUMM_CUR INTO P_LVL_CODE, P_ACNT_CODE,
                           P_DIVN_CODE, P_DEPT_CODE,
                           P_HEAD_NO_1, P_ANLY_CODE_1,
                           P_HEAD_NO_2, P_ANLY_CODE_2,
                           P_YR_OPEN_BAL,
                           P_MTD_BAL, P_YTD_BAL, P_ANN_BAL;
     EXIT WHEN F_SUMM_CUR%NOTFOUND;
     INSERT INTO FW_MAIN_LEVEL_SUM_TEMP (
            MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_CODE, MLS_ACNT_YEAR,
            MLS_COMP_CODE, MLS_DIVN_CODE, MLS_DEPT_CODE, MLS_HEAD_NO_1,
            MLS_ANLY_CODE_1, MLS_HEAD_NO_2, MLS_ANLY_CODE_2,
            MLS_MAIN_ACNT_CODE,
            MLS_YR_OPEN_BAL, MLS_MTD_BAL, MLS_YTD_BAL, MLS_ANN_BAL)
     VALUES (P_KEY_NO, P_FORMAT_ID, P_LVL_CODE, P_TO_ACNT_YEAR,
            P_COMP_CODE, P_DIVN_CODE, P_DEPT_CODE, P_HEAD_NO_1,
            P_ANLY_CODE_1, P_HEAD_NO_2, P_ANLY_CODE_2, P_ACNT_CODE,
            P_YR_OPEN_BAL, P_MTD_BAL, P_YTD_BAL, P_ANN_BAL);
     END LOOP INS_DET_LEVEL_SUMM_CUR;
     CLOSE F_SUMM_CUR;
     IF P_TO_READ_TRAN_FLAG = 'Y' THEN
          IF F_DETL_CUR%ISOPEN THEN
               CLOSE F_DETL_CUR;
          END IF;
          OPEN F_DETL_CUR;
          <<INS_DET_LEVEL_DET_CUR>>
          LOOP
          FETCH F_DETL_CUR INTO P_LVL_CODE, P_ACNT_CODE,
                                P_DIVN_CODE, P_DEPT_CODE,
                                P_HEAD_NO_1, P_ANLY_CODE_1,
                                P_HEAD_NO_2, P_ANLY_CODE_2,
                                P_MTD_BAL_SUB_1, P_MTD_BAL_SUB_2;
          EXIT WHEN F_DETL_CUR%NOTFOUND;
          P_MTD_BAL := -1 * (NVL(P_MTD_BAL_SUB_1,0) + NVL(P_MTD_BAL_SUB_2,0));
          P_YTD_BAL := -1 * NVL(P_MTD_BAL_SUB_2,0);
          INSERT INTO FW_MAIN_LEVEL_SUM_TEMP (
                MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_CODE, MLS_ACNT_YEAR,
                MLS_COMP_CODE, MLS_DIVN_CODE, MLS_DEPT_CODE, MLS_HEAD_NO_1,
                MLS_ANLY_CODE_1, MLS_HEAD_NO_2, MLS_ANLY_CODE_2,
                MLS_MAIN_ACNT_CODE,
                MLS_MTD_OPBAL, MLS_MTD_BAL, MLS_YTD_BAL)
          VALUES (P_KEY_NO, P_FORMAT_ID, P_LVL_CODE, P_TO_ACNT_YEAR,
                P_COMP_CODE, P_DIVN_CODE, P_DEPT_CODE, P_HEAD_NO_1,
                P_ANLY_CODE_1, P_HEAD_NO_2, P_ANLY_CODE_2, P_ACNT_CODE,
                P_MTD_BAL_SUB_1, P_MTD_BAL, P_YTD_BAL);
          END LOOP INS_DET_LEVEL_DET_CUR;
          CLOSE F_DETL_CUR;
     END IF;
ELSE
     IF F_SUMM_PRV%ISOPEN THEN
          CLOSE F_SUMM_PRV;
     END IF;
     OPEN F_SUMM_PRV;
     <<INS_DET_LEVEL_SUMM_PRV>>
     LOOP
     FETCH F_SUMM_PRV INTO P_LVL_CODE, P_ACNT_CODE,
                           P_DIVN_CODE, P_DEPT_CODE,
                           P_HEAD_NO_1, P_ANLY_CODE_1,
                           P_HEAD_NO_2, P_ANLY_CODE_2,
                           P_YR_OPEN_BAL, P_MTD_BAL, P_YTD_BAL, P_ANN_BAL;
     EXIT WHEN F_SUMM_PRV%NOTFOUND;
     INSERT INTO FW_MAIN_LEVEL_SUM_TEMP (
            MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_CODE, MLS_ACNT_YEAR,
            MLS_COMP_CODE, MLS_DIVN_CODE, MLS_DEPT_CODE, MLS_HEAD_NO_1,
            MLS_ANLY_CODE_1, MLS_HEAD_NO_2, MLS_ANLY_CODE_2,
            MLS_MAIN_ACNT_CODE,
            MLS_YR_OPEN_BAL, MLS_MTD_BAL, MLS_YTD_BAL, MLS_ANN_BAL)
     VALUES (P_KEY_NO, P_FORMAT_ID, P_LVL_CODE, P_TO_ACNT_YEAR,
            P_COMP_CODE, P_DIVN_CODE, P_DEPT_CODE, P_HEAD_NO_1,
            P_ANLY_CODE_1, P_HEAD_NO_2, P_ANLY_CODE_2, P_ACNT_CODE,
            P_YR_OPEN_BAL, P_MTD_BAL, P_YTD_BAL, P_ANN_BAL);
     END LOOP INS_DET_LEVEL_SUMM_PRV;
     CLOSE F_SUMM_PRV;
     IF P_TO_READ_TRAN_FLAG = 'Y' THEN
          IF F_DETL_PRV%ISOPEN THEN
               CLOSE F_DETL_PRV;
          END IF;
          OPEN F_DETL_PRV;
          <<INS_DET_LEVEL_DET_PRV>>
          LOOP
          FETCH F_DETL_PRV INTO P_LVL_CODE, P_ACNT_CODE,
                                P_DIVN_CODE, P_DEPT_CODE,
                                P_HEAD_NO_1, P_ANLY_CODE_1,
                                P_HEAD_NO_2, P_ANLY_CODE_2,
                                P_MTD_BAL_SUB_1, P_MTD_BAL_SUB_2;
          EXIT WHEN F_DETL_PRV%NOTFOUND;
          P_MTD_BAL := -1 * (NVL(P_MTD_BAL_SUB_1,0) + NVL(P_MTD_BAL_SUB_2,0));
          P_YTD_BAL := -1 * NVL(P_MTD_BAL_SUB_2,0);
          END LOOP INS_DET_LEVEL_DET_PRV;
          INSERT INTO FW_MAIN_LEVEL_SUM_TEMP (
                 MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_CODE, MLS_ACNT_YEAR,
                 MLS_COMP_CODE, MLS_DIVN_CODE, MLS_DEPT_CODE, MLS_HEAD_NO_1,
                 MLS_ANLY_CODE_1, MLS_HEAD_NO_2, MLS_ANLY_CODE_2,
                 MLS_MAIN_ACNT_CODE,
                 MLS_MTD_OPBAL, MLS_MTD_BAL, MLS_YTD_BAL)
          VALUES (P_KEY_NO, P_FORMAT_ID, P_LVL_CODE, P_TO_ACNT_YEAR,
                 P_COMP_CODE, P_DIVN_CODE, P_DEPT_CODE, P_HEAD_NO_1,
                 P_ANLY_CODE_1, P_HEAD_NO_2, P_ANLY_CODE_2, P_ACNT_CODE,
                 P_MTD_BAL_SUB_1, P_MTD_BAL, P_YTD_BAL);
          CLOSE F_DETL_PRV;
     END IF;
END IF;
P_WORK_FRM_DT := ADD_MONTHS(P_FRM_DT,-12) ;
P_WORK_TO_DT  := ADD_MONTHS(P_TO_DT,-12)  ;
P_AS_OF_DT    := P_WORK_FRM_DT;
IF F_FRM_PERIOD%ISOPEN THEN
     CLOSE F_FRM_PERIOD;
END IF;
OPEN F_FRM_PERIOD;
FETCH F_FRM_PERIOD INTO P_FRM_ACNT_YEAR, P_FRM_CAL_YEAR, P_FRM_CAL_MONTH,
                    P_FRM_BEGIN_DT, P_FRM_END_DT,
                    P_FRM_READ_TRAN_FLAG, P_FRM_CUR_YEAR_FLAG;
IF F_FRM_PERIOD%NOTFOUND THEN
     CLOSE F_FRM_PERIOD;
     GOTO  CALC_BUDGET;
END IF;
CLOSE F_FRM_PERIOD;
P_AS_OF_DT := P_WORK_TO_DT;
IF F_TO_PERIOD%ISOPEN THEN
     CLOSE F_TO_PERIOD;
END IF;
OPEN F_TO_PERIOD;
FETCH F_TO_PERIOD INTO P_TO_ACNT_YEAR, P_TO_CAL_YEAR, P_TO_CAL_MONTH,
                    P_TO_BEGIN_DT, P_TO_END_DT,
                    P_TO_READ_TRAN_FLAG, P_TO_CUR_YEAR_FLAG;
IF F_TO_PERIOD%NOTFOUND THEN
     CLOSE F_TO_PERIOD;
     GOTO  CALC_BUDGET;
END IF;
CLOSE F_TO_PERIOD;
IF P_FRM_ACNT_YEAR != P_TO_ACNT_YEAR THEN
     GOTO  CALC_BUDGET;
END IF;
P_FRM_CAL_YEAR_MONTH := P_FRM_CAL_YEAR * 100 + P_FRM_CAL_MONTH;
P_TO_CAL_YEAR_MONTH  := P_TO_CAL_YEAR * 100 + P_TO_CAL_MONTH;
IF F_SUMM_PRV%ISOPEN THEN
     CLOSE F_SUMM_PRV;
END IF;
OPEN F_SUMM_PRV;
<<INS_DET_LEVEL_SUMM_PRV>>
LOOP
     FETCH F_SUMM_PRV INTO P_LVL_CODE, P_ACNT_CODE,
                           P_DIVN_CODE, P_DEPT_CODE,
                           P_HEAD_NO_1, P_ANLY_CODE_1,
                           P_HEAD_NO_2, P_ANLY_CODE_2,
                           P_YR_OPEN_BAL, P_MTD_BAL, P_YTD_BAL, P_ANN_BAL;
     EXIT WHEN F_SUMM_PRV%NOTFOUND;
     INSERT INTO FW_MAIN_LEVEL_SUM_TEMP (
            MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_CODE, MLS_ACNT_YEAR,
            MLS_COMP_CODE, MLS_DIVN_CODE, MLS_DEPT_CODE, MLS_HEAD_NO_1,
            MLS_ANLY_CODE_1, MLS_HEAD_NO_2, MLS_ANLY_CODE_2,
            MLS_MAIN_ACNT_CODE,
            MLS_PREV_YR_OPEN_BAL, MLS_PREV_MTD_BAL, MLS_PREV_YTD_BAL,
            MLS_PREV_ANN_BAL)
     VALUES (P_KEY_NO, P_FORMAT_ID, P_LVL_CODE, P_TO_ACNT_YEAR,
            P_COMP_CODE, P_DIVN_CODE, P_DEPT_CODE, P_HEAD_NO_1,
            P_ANLY_CODE_1, P_HEAD_NO_2, P_ANLY_CODE_2, P_ACNT_CODE,
            P_YR_OPEN_BAL, P_MTD_BAL, P_YTD_BAL, P_ANN_BAL);
EXIT WHEN F_SUMM_PRV%NOTFOUND;
END LOOP INS_DET_LEVEL_SUMM_PRV;
CLOSE F_SUMM_PRV;
IF P_TO_READ_TRAN_FLAG = 'Y' THEN
     IF F_DETL_PRV%ISOPEN THEN
          CLOSE F_DETL_PRV;
     END IF;
     OPEN F_DETL_PRV;
     <<INS_DET_LEVEL_DET_PRV>>
     LOOP
     FETCH F_DETL_PRV INTO P_LVL_CODE, P_ACNT_CODE,
                           P_DIVN_CODE, P_DEPT_CODE,
                           P_HEAD_NO_1, P_ANLY_CODE_1,
                           P_HEAD_NO_2, P_ANLY_CODE_2,
                           P_MTD_BAL_SUB_1, P_MTD_BAL_SUB_2;
     EXIT WHEN F_DETL_PRV%NOTFOUND;
     P_MTD_BAL := -1 * (NVL(P_MTD_BAL_SUB_1,0) + NVL(P_MTD_BAL_SUB_2,0));
     P_YTD_BAL := -1 * NVL(P_MTD_BAL_SUB_2,0);
     INSERT INTO FW_MAIN_LEVEL_SUM_TEMP (
            MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_CODE, MLS_ACNT_YEAR,
            MLS_COMP_CODE, MLS_DIVN_CODE, MLS_DEPT_CODE, MLS_HEAD_NO_1,
            MLS_ANLY_CODE_1, MLS_HEAD_NO_2, MLS_ANLY_CODE_2,
            MLS_MAIN_ACNT_CODE,
            MLS_PREV_YR_OPEN_BAL, MLS_PREV_MTD_OPBAL,
	    MLS_PREV_MTD_BAL, MLS_PREV_YTD_BAL)
     VALUES (P_KEY_NO, P_FORMAT_ID, P_LVL_CODE, P_TO_ACNT_YEAR,
            P_COMP_CODE, P_DIVN_CODE, P_DEPT_CODE, P_HEAD_NO_1,
            P_ANLY_CODE_1, P_HEAD_NO_2, P_ANLY_CODE_2, P_ACNT_CODE,
            P_YR_OPEN_BAL, P_MTD_BAL_SUB_1, P_MTD_BAL, P_YTD_BAL);
     END LOOP INS_DET_LEVEL_DET_PRV;
     CLOSE F_DETL_PRV;
END IF;
<<CALC_BUDGET>>
P_WORK_FRM_DT := P_FRM_DT;
P_WORK_TO_DT  := P_TO_DT;
P_AS_OF_DT := P_WORK_FRM_DT;
IF F_FRM_PERIOD%ISOPEN THEN
     CLOSE F_FRM_PERIOD;
END IF;
OPEN F_FRM_PERIOD;
FETCH F_FRM_PERIOD INTO P_FRM_ACNT_YEAR, P_FRM_CAL_YEAR, P_FRM_CAL_MONTH,
                        P_FRM_BEGIN_DT, P_FRM_END_DT,
                        P_FRM_READ_TRAN_FLAG, P_FRM_CUR_YEAR_FLAG;
IF F_FRM_PERIOD%NOTFOUND THEN
     P_ERR_NO := 909;
     CLOSE F_FRM_PERIOD;
     RETURN;
END IF;
CLOSE F_FRM_PERIOD;
P_AS_OF_DT := P_WORK_TO_DT;
IF F_TO_PERIOD%ISOPEN THEN
     CLOSE F_TO_PERIOD;
END IF;
OPEN F_TO_PERIOD;
FETCH F_TO_PERIOD INTO P_TO_ACNT_YEAR, P_TO_CAL_YEAR, P_TO_CAL_MONTH,
                       P_TO_BEGIN_DT, P_TO_END_DT,
                       P_TO_READ_TRAN_FLAG, P_TO_CUR_YEAR_FLAG;
IF F_TO_PERIOD%NOTFOUND THEN
     P_ERR_NO := 909;
     CLOSE F_TO_PERIOD;
     RETURN;
END IF;
CLOSE F_TO_PERIOD;
      IF P_INCL_BUD IN ('C', 'B') THEN
         P_FRM_CAL_YEAR_MONTH := P_FRM_CAL_YEAR * 100 + P_FRM_CAL_MONTH;
         P_TO_CAL_YEAR_MONTH  := P_TO_CAL_YEAR * 100 + P_TO_CAL_MONTH;
         IF BUD_FIGURES%ISOPEN THEN
            CLOSE BUD_FIGURES;
         END IF;
         OPEN BUD_FIGURES;
         <<BUD_FIG_SUMMARY>>
         LOOP
         FETCH BUD_FIGURES INTO P_LVL_CODE, P_ACNT_CODE,
                                P_DIVN_CODE, P_DEPT_CODE,
                                P_HEAD_NO_1, P_ANLY_CODE_1,
                                P_HEAD_NO_2, P_ANLY_CODE_2,
                                P_MTD_BAL, P_YTD_BAL, P_ANN_BAL;
         EXIT WHEN BUD_FIGURES%NOTFOUND;
         INSERT INTO FW_MAIN_LEVEL_SUM_TEMP (
                MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_CODE, MLS_ACNT_YEAR,
                MLS_COMP_CODE, MLS_DIVN_CODE, MLS_DEPT_CODE, MLS_HEAD_NO_1,
                MLS_ANLY_CODE_1, MLS_HEAD_NO_2, MLS_ANLY_CODE_2,
                MLS_MAIN_ACNT_CODE,
                MLS_MTD_BUD, MLS_YTD_BUD, MLS_ANN_BUD)
         VALUES (P_KEY_NO, P_FORMAT_ID, P_LVL_CODE, P_TO_ACNT_YEAR,
                P_COMP_CODE, P_DIVN_CODE, P_DEPT_CODE, P_HEAD_NO_1,
                P_ANLY_CODE_1, P_HEAD_NO_2, P_ANLY_CODE_2, P_ACNT_CODE,
                P_MTD_BAL, P_YTD_BAL, P_ANN_BAL);
         END LOOP BUD_FIG_SUMMARY;
         CLOSE BUD_FIGURES;
      END IF;
      IF P_INCL_BUD IN ('N', 'B') THEN
         P_FRM_CAL_YEAR_MONTH := P_FRM_CAL_YEAR * 100 + P_FRM_CAL_MONTH;
         P_TO_CAL_YEAR_MONTH  := P_TO_CAL_YEAR * 100 + P_TO_CAL_MONTH;
         IF NEXT_BUD_FIGURES%ISOPEN THEN
            CLOSE NEXT_BUD_FIGURES;
         END IF;
         OPEN NEXT_BUD_FIGURES;
         <<NEXT_BUD_FIG_SUMMARY>>
         LOOP
         FETCH NEXT_BUD_FIGURES INTO P_LVL_CODE, P_ACNT_CODE,
                                     P_DIVN_CODE, P_DEPT_CODE,
                                     P_HEAD_NO_1, P_ANLY_CODE_1,
                                     P_HEAD_NO_2, P_ANLY_CODE_2,
                                     P_MTD_BAL, P_YTD_BAL, P_ANN_BAL;
         EXIT WHEN NEXT_BUD_FIGURES%NOTFOUND;
         INSERT INTO FW_MAIN_LEVEL_SUM_TEMP (
                MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_CODE, MLS_ACNT_YEAR,
                MLS_COMP_CODE, MLS_DIVN_CODE, MLS_DEPT_CODE, MLS_HEAD_NO_1,
                MLS_ANLY_CODE_1, MLS_HEAD_NO_2, MLS_ANLY_CODE_2,
                MLS_MAIN_ACNT_CODE,
                MLS_NEXT_MTD_BUD, MLS_NEXT_YTD_BUD, MLS_NEXT_ANN_BUD)
         VALUES (P_KEY_NO, P_FORMAT_ID, P_LVL_CODE, P_TO_ACNT_YEAR,
                P_COMP_CODE, P_DIVN_CODE, P_DEPT_CODE, P_HEAD_NO_1,
                P_ANLY_CODE_1, P_HEAD_NO_2, P_ANLY_CODE_2, P_ACNT_CODE,
                P_MTD_BAL, P_YTD_BAL, P_ANN_BAL);
         END LOOP NEXT_BUD_FIG_SUMMARY;
         CLOSE NEXT_BUD_FIGURES;
      END IF;
    IF P_INCL_MTH = 'C' THEN
       P_FRM_CAL_YEAR_MONTH := P_FRM_CAL_YEAR * 100 + P_FRM_CAL_MONTH;
       P_TO_CAL_YEAR_MONTH  := P_TO_CAL_YEAR * 100 + P_TO_CAL_MONTH;
       IF BUD_MONTHS%ISOPEN THEN
          CLOSE BUD_MONTHS;
       END IF;
       OPEN BUD_MONTHS;
       <<BUD_MON_SUMMARY>>
       LOOP
       FETCH BUD_MONTHS INTO  P_LVL_CODE, P_ACNT_CODE,
                              P_DIVN_CODE, P_DEPT_CODE,
                              P_HEAD_NO_1, P_ANLY_CODE_1,
                              P_HEAD_NO_2, P_ANLY_CODE_2,
                              P_M01_BUD, P_M02_BUD, P_M03_BUD,
                              P_M04_BUD, P_M05_BUD, P_M06_BUD,
                              P_M07_BUD, P_M08_BUD, P_M09_BUD,
                              P_M10_BUD, P_M11_BUD, P_M12_BUD;
       EXIT WHEN BUD_MONTHS%NOTFOUND;
       INSERT INTO FW_MAIN_LEVEL_SUM_TEMP (
              MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_CODE, MLS_ACNT_YEAR,
              MLS_COMP_CODE, MLS_DIVN_CODE, MLS_DEPT_CODE, MLS_HEAD_NO_1,
              MLS_ANLY_CODE_1, MLS_HEAD_NO_2, MLS_ANLY_CODE_2,
              MLS_MAIN_ACNT_CODE,
              MLS_M01_BUD, MLS_M02_BUD, MLS_M03_BUD, MLS_M04_BUD,
              MLS_M05_BUD, MLS_M06_BUD, MLS_M07_BUD, MLS_M08_BUD,
              MLS_M09_BUD, MLS_M10_BUD, MLS_M11_BUD, MLS_M12_BUD)
       VALUES (P_KEY_NO, P_FORMAT_ID, P_LVL_CODE, P_TO_ACNT_YEAR,
              P_COMP_CODE, P_DIVN_CODE, P_DEPT_CODE, P_HEAD_NO_1,
              P_ANLY_CODE_1, P_HEAD_NO_2, P_ANLY_CODE_2, P_ACNT_CODE,
              P_M01_BUD, P_M02_BUD, P_M03_BUD, P_M04_BUD,
              P_M05_BUD, P_M06_BUD, P_M07_BUD, P_M08_BUD,
              P_M09_BUD, P_M10_BUD, P_M11_BUD, P_M12_BUD);
       END LOOP BUD_MON_SUMMARY;
       CLOSE BUD_MONTHS;
    END IF;
    IF P_INCL_MTH = 'N' THEN
       P_FRM_CAL_YEAR_MONTH := P_FRM_CAL_YEAR * 100 + P_FRM_CAL_MONTH;
       P_TO_CAL_YEAR_MONTH  := P_TO_CAL_YEAR * 100 + P_TO_CAL_MONTH;
       IF NEXT_BUD_MONTHS%ISOPEN THEN
          CLOSE NEXT_BUD_MONTHS;
       END IF;
       OPEN NEXT_BUD_MONTHS;
       <<NEXT_BUD_MON_SUMMARY>>
       LOOP
       FETCH NEXT_BUD_MONTHS INTO  P_LVL_CODE, P_ACNT_CODE,
                              P_DIVN_CODE, P_DEPT_CODE,
                              P_HEAD_NO_1, P_ANLY_CODE_1,
                              P_HEAD_NO_2, P_ANLY_CODE_2,
                              P_M01_BUD, P_M02_BUD, P_M03_BUD,
                              P_M04_BUD, P_M05_BUD, P_M06_BUD,
                              P_M07_BUD, P_M08_BUD, P_M09_BUD,
                              P_M10_BUD, P_M11_BUD, P_M12_BUD;
       EXIT WHEN NEXT_BUD_MONTHS%NOTFOUND;
       INSERT INTO FW_MAIN_LEVEL_SUM_TEMP (
              MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_CODE, MLS_ACNT_YEAR,
              MLS_COMP_CODE, MLS_DIVN_CODE, MLS_DEPT_CODE, MLS_HEAD_NO_1,
              MLS_ANLY_CODE_1, MLS_HEAD_NO_2, MLS_ANLY_CODE_2,
              MLS_MAIN_ACNT_CODE,
              MLS_M01_BUD, MLS_M02_BUD, MLS_M03_BUD, MLS_M04_BUD,
              MLS_M05_BUD, MLS_M06_BUD, MLS_M07_BUD, MLS_M08_BUD,
              MLS_M09_BUD, MLS_M10_BUD, MLS_M11_BUD, MLS_M12_BUD)
       VALUES (P_KEY_NO, P_FORMAT_ID, P_LVL_CODE, P_TO_ACNT_YEAR,
              P_COMP_CODE, P_DIVN_CODE, P_DEPT_CODE, P_HEAD_NO_1,
              P_ANLY_CODE_1, P_HEAD_NO_2, P_ANLY_CODE_2, P_ACNT_CODE,
              P_M01_BUD, P_M02_BUD, P_M03_BUD, P_M04_BUD,
              P_M05_BUD, P_M06_BUD, P_M07_BUD, P_M08_BUD,
              P_M09_BUD, P_M10_BUD, P_M11_BUD, P_M12_BUD);
       END LOOP NEXT_BUD_MON_SUMMARY;
       CLOSE NEXT_BUD_MONTHS;
    END IF;
SELECT MAX(LENGTH(LS_LVL_SEQ))
INTO   P_MAX_LENGTH
FROM   FW_LEVEL
WHERE  LS_FORMAT_ID = P_FORMAT_ID;
IF P_MAX_LENGTH > 18 THEN
     P_PAD_LENGTH := 1;
ELSE
     P_PAD_LENGTH := 2;
END IF;
INSERT INTO FW_MAIN_LEVEL_SUM (
    MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_CODE, MLS_LVL_NAME,
    MLS_LVL_TYPE, MLS_LVL_SEQ, MLS_PARENT_LVL_CODE, MLS_ACNT_YEAR,
    MLS_COMP_CODE, MLS_DIVN_CODE, MLS_DEPT_CODE, MLS_HEAD_NO_1,
    MLS_ANLY_CODE_1, MLS_HEAD_NO_2, MLS_ANLY_CODE_2,
    MLS_MAIN_ACNT_CODE,
    MLS_YR_OPEN_BAL, MLS_MTD_OPBAL,
    MLS_MTD_BAL, MLS_YTD_BAL, MLS_ANN_BAL,
    MLS_PREV_YR_OPEN_BAL, MLS_PREV_MTD_OPBAL,
    MLS_PREV_MTD_BAL, MLS_PREV_YTD_BAL,
    MLS_PREV_ANN_BAL,
    MLS_MTD_BUD, MLS_YTD_BUD, MLS_ANN_BUD,
    MLS_NEXT_MTD_BUD, MLS_NEXT_YTD_BUD, MLS_NEXT_ANN_BUD,
    MLS_M01_BUD, MLS_M02_BUD, MLS_M03_BUD, MLS_M04_BUD,
    MLS_M05_BUD, MLS_M06_BUD, MLS_M07_BUD, MLS_M08_BUD,
    MLS_M09_BUD, MLS_M10_BUD, MLS_M11_BUD, MLS_M12_BUD)
SELECT MLS_KEY_NO, MLS_FORMAT_ID, LVL_CODE,
    LPAD(' ', P_PAD_LENGTH * ((LENGTH(LS_LVL_SEQ) / 3) - 1), ' ') ||
    LVL_NAME, LS_LVL_TYPE, LVL_SEQ_NO, LVL_PARENT_CODE,
    MLS_ACNT_YEAR, MLS_COMP_CODE, MLS_DIVN_CODE, MLS_DEPT_CODE,
    MLS_HEAD_NO_1, MLS_ANLY_CODE_1, MLS_HEAD_NO_2, MLS_ANLY_CODE_2,
    MLS_MAIN_ACNT_CODE, SUM(MLS_YR_OPEN_BAL),
    SUM(MLS_MTD_OPBAL),
    SUM(MLS_MTD_BAL), SUM(MLS_YTD_BAL), SUM(MLS_ANN_BAL),
    SUM(MLS_PREV_YR_OPEN_BAL),
    SUM(MLS_PREV_MTD_OPBAL), SUM(MLS_PREV_MTD_BAL),
    SUM(MLS_PREV_YTD_BAL), SUM(MLS_PREV_ANN_BAL),
    SUM(MLS_MTD_BUD), SUM(MLS_YTD_BUD),
    SUM(MLS_ANN_BUD),
    SUM(MLS_NEXT_MTD_BUD), SUM(MLS_NEXT_YTD_BUD),
    SUM(MLS_NEXT_ANN_BUD), SUM(MLS_M01_BUD),
    SUM(MLS_M02_BUD), SUM(MLS_M03_BUD),
    SUM(MLS_M04_BUD), SUM(MLS_M05_BUD),
    SUM(MLS_M06_BUD), SUM(MLS_M07_BUD),
    SUM(MLS_M08_BUD), SUM(MLS_M09_BUD),
    SUM(MLS_M10_BUD), SUM(MLS_M11_BUD),
    SUM(MLS_M12_BUD)
FROM   FM_COA_LEVEL, FW_LEVEL, FW_MAIN_LEVEL_SUM_TEMP
WHERE  MLS_KEY_NO = P_KEY_NO
AND    MLS_FORMAT_ID = P_FORMAT_ID
AND    LS_FORMAT_ID = MLS_FORMAT_ID
AND    LS_LVL_CODE = MLS_LVL_CODE
AND    LVL_FORMAT_ID = LS_FORMAT_ID
AND    LVL_CODE = LS_LVL_CODE
GROUP BY MLS_KEY_NO, MLS_FORMAT_ID, LVL_CODE,
    LPAD(' ', P_PAD_LENGTH * ((LENGTH(LS_LVL_SEQ) / 3) - 1), ' ') ||
    LVL_NAME, LS_LVL_TYPE, LVL_SEQ_NO, LVL_PARENT_CODE,
    MLS_ACNT_YEAR, MLS_COMP_CODE, MLS_DIVN_CODE, MLS_DEPT_CODE,
    MLS_HEAD_NO_1, MLS_ANLY_CODE_1, MLS_HEAD_NO_2, MLS_ANLY_CODE_2,
    MLS_MAIN_ACNT_CODE;
P_LENGTH := 0;
<<INS_LEVEL_SUM>>
LOOP
    P_MAX_LENGTH := P_MAX_LENGTH - 3;
    P_LENGTH := P_LENGTH + 3;
    IF P_MAX_LENGTH <= 0 THEN
       EXIT INS_LEVEL_SUM;
    END IF;
    INSERT INTO FW_MAIN_LEVEL_SUM (
           MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_CODE, MLS_LVL_NAME,
           MLS_LVL_TYPE, MLS_LVL_SEQ, MLS_PARENT_LVL_CODE, MLS_ACNT_YEAR,
           MLS_COMP_CODE, MLS_DIVN_CODE, MLS_DEPT_CODE, MLS_HEAD_NO_1,
           MLS_ANLY_CODE_1, MLS_HEAD_NO_2, MLS_ANLY_CODE_2,
           MLS_MAIN_ACNT_CODE,
           MLS_YR_OPEN_BAL, MLS_MTD_OPBAL,
	   MLS_MTD_BAL, MLS_YTD_BAL, MLS_ANN_BAL,
           MLS_PREV_YR_OPEN_BAL, MLS_PREV_MTD_OPBAL,
	   MLS_PREV_MTD_BAL, MLS_PREV_YTD_BAL,
           MLS_PREV_ANN_BAL,
           MLS_MTD_BUD, MLS_YTD_BUD, MLS_ANN_BUD,
           MLS_NEXT_MTD_BUD, MLS_NEXT_YTD_BUD, MLS_NEXT_ANN_BUD,
           MLS_M01_BUD, MLS_M02_BUD, MLS_M03_BUD, MLS_M04_BUD,
           MLS_M05_BUD, MLS_M06_BUD, MLS_M07_BUD, MLS_M08_BUD,
           MLS_M09_BUD, MLS_M10_BUD, MLS_M11_BUD, MLS_M12_BUD)
    SELECT MLS_KEY_NO, MLS_FORMAT_ID, LVL_CODE,
           LPAD(' ', P_PAD_LENGTH * ((LENGTH(B.LS_LVL_SEQ) / 3) - 1), ' ') ||
           LVL_NAME, B.LS_LVL_TYPE, LVL_SEQ_NO, LVL_PARENT_CODE,
           MLS_ACNT_YEAR, MLS_COMP_CODE, MLS_DIVN_CODE, MLS_DEPT_CODE,
           MLS_HEAD_NO_1, MLS_ANLY_CODE_1, MLS_HEAD_NO_2, MLS_ANLY_CODE_2,
           '0', SUM(MLS_YR_OPEN_BAL),
           SUM(MLS_MTD_OPBAL),
	   SUM(MLS_MTD_BAL), SUM(MLS_YTD_BAL), SUM(MLS_ANN_BAL),
           SUM(MLS_PREV_YR_OPEN_BAL), SUM(MLS_PREV_MTD_OPBAL),
	   SUM(MLS_PREV_MTD_BAL),
           SUM(MLS_PREV_YTD_BAL), SUM(MLS_PREV_ANN_BAL),
           SUM(MLS_MTD_BUD), SUM(MLS_YTD_BUD),
           SUM(MLS_ANN_BUD),
           SUM(MLS_NEXT_MTD_BUD), SUM(MLS_NEXT_YTD_BUD),
           SUM(MLS_NEXT_ANN_BUD), SUM(MLS_M01_BUD),
           SUM(MLS_M02_BUD), SUM(MLS_M03_BUD),
           SUM(MLS_M04_BUD), SUM(MLS_M05_BUD),
           SUM(MLS_M06_BUD), SUM(MLS_M07_BUD),
           SUM(MLS_M08_BUD), SUM(MLS_M09_BUD),
           SUM(MLS_M10_BUD), SUM(MLS_M11_BUD),
           SUM(MLS_M12_BUD)
    FROM   FM_COA_LEVEL, FW_LEVEL B, FW_LEVEL A,
           FW_MAIN_LEVEL_SUM_TEMP
    WHERE  MLS_KEY_NO = P_KEY_NO
    AND    MLS_FORMAT_ID = P_FORMAT_ID
    AND    A.LS_FORMAT_ID = MLS_FORMAT_ID
    AND    A.LS_LVL_CODE = MLS_LVL_CODE
    AND    NVL(LENGTH(A.LS_LVL_SEQ), 0) - P_LENGTH > 0
    AND    B.LS_FORMAT_ID = A.LS_FORMAT_ID
    AND    B.LS_LVL_SEQ = SUBSTR(A.LS_LVL_SEQ, 1,
                          NVL(LENGTH(A.LS_LVL_SEQ), 0) - P_LENGTH)
    AND    LVL_FORMAT_ID = B.LS_FORMAT_ID
    AND    LVL_CODE = B.LS_LVL_CODE
    GROUP BY MLS_KEY_NO, MLS_FORMAT_ID, LVL_CODE,
        LPAD(' ', P_PAD_LENGTH * ((LENGTH(B.LS_LVL_SEQ) / 3) - 1), ' ') ||
        LVL_NAME, B.LS_LVL_TYPE, LVL_SEQ_NO, LVL_PARENT_CODE,
        MLS_ACNT_YEAR, MLS_COMP_CODE, MLS_DIVN_CODE, MLS_DEPT_CODE,
        MLS_HEAD_NO_1, MLS_ANLY_CODE_1, MLS_HEAD_NO_2, MLS_ANLY_CODE_2;
END LOOP INS_LEVEL_SUM;
END;
/
CREATE OR REPLACE PROCEDURE F_MAIN_LEVEL_SUM_REP
                 (P_KEY_NO           IN    NUMBER,
                  P_COMP_CODE        IN    VARCHAR2,
                  P_FORMAT_ID        IN    NUMBER,
                  P_INCL_ACNT        IN    VARCHAR2,
                  P_ERR_NO          OUT    NUMBER) AS
   PREV_STR             VARCHAR2(27);
   RECORD_SEQ           NUMBER(6);
   HEAD_FLAG            VARCHAR2(1);
   FIRST_REC            NUMBER(1);
   BLANK_REC_FLAG       VARCHAR2(1);
   LVL_TYPE             VARCHAR2(1);
   P_LVL_CODE           VARCHAR2(6);
   P_LVL_NAME           VARCHAR2(60);
   P_LVL_TYPE           VARCHAR2(1);
   P_PARENT_LVL_CODE    VARCHAR2(6);
   P_TOTAL_FLAG         VARCHAR2(1);
   P_MTD_BAL            NUMBER(14,3);
   P_YTD_BAL            NUMBER(14,3);
   P_ANN_BAL            NUMBER(14,3);
   P_YR_OPEN_BAL        NUMBER(14,3);
   P_PREV_MTD_BAL       NUMBER(14,3);
   P_PREV_YTD_BAL       NUMBER(14,3);
   P_PREV_ANN_BAL       NUMBER(14,3);
   P_PREV_YR_OPEN_BAL   NUMBER(14,3);
   P_MTD_BUD            NUMBER(14,3);
   P_YTD_BUD            NUMBER(14,3);
   P_ANN_BUD            NUMBER(14,3);
   P_NEXT_MTD_BUD       NUMBER(14,3);
   P_NEXT_YTD_BUD       NUMBER(14,3);
   P_NEXT_ANN_BUD       NUMBER(14,3);
   P_M01_BUD            NUMBER(14,3);
   P_M02_BUD            NUMBER(14,3);
   P_M03_BUD            NUMBER(14,3);
   P_M04_BUD            NUMBER(14,3);
   P_M05_BUD            NUMBER(14,3);
   P_M06_BUD            NUMBER(14,3);
   P_M07_BUD            NUMBER(14,3);
   P_M08_BUD            NUMBER(14,3);
   P_M09_BUD            NUMBER(14,3);
   P_M10_BUD            NUMBER(14,3);
   P_M11_BUD            NUMBER(14,3);
   P_M12_BUD            NUMBER(14,3);
   T_LVL_CODE           VARCHAR2(6);
   T_LVL_NAME           VARCHAR2(60);
   T_LVL_TYPE           VARCHAR2(1);
   T_LVL_SEQ            NUMBER(6);
   T_PARENT_LVL_CODE    VARCHAR2(6);
   T_MAIN_ACNT_CODE     VARCHAR2(6);
   T_TOTAL_FLAG         VARCHAR2(1);
   T_LVL_STR            VARCHAR2(27);
   T_MTD_BAL            NUMBER(14,3);
   T_YTD_BAL            NUMBER(14,3);
   T_ANN_BAL            NUMBER(14,3);
   T_YR_OPEN_BAL        NUMBER(14,3);
   T_PREV_MTD_BAL       NUMBER(14,3);
   T_PREV_YTD_BAL       NUMBER(14,3);
   T_PREV_ANN_BAL       NUMBER(14,3);
   T_PREV_YR_OPEN_BAL   NUMBER(14,3);
   T_MTD_BUD            NUMBER(14,3);
   T_YTD_BUD            NUMBER(14,3);
   T_ANN_BUD            NUMBER(14,3);
   T_NEXT_MTD_BUD       NUMBER(14,3);
   T_NEXT_YTD_BUD       NUMBER(14,3);
   T_NEXT_ANN_BUD       NUMBER(14,3);
   T_M01_BUD            NUMBER(14,3);
   T_M02_BUD            NUMBER(14,3);
   T_M03_BUD            NUMBER(14,3);
   T_M04_BUD            NUMBER(14,3);
   T_M05_BUD            NUMBER(14,3);
   T_M06_BUD            NUMBER(14,3);
   T_M07_BUD            NUMBER(14,3);
   T_M08_BUD            NUMBER(14,3);
   T_M09_BUD            NUMBER(14,3);
   T_M10_BUD            NUMBER(14,3);
   T_M11_BUD            NUMBER(14,3);
   T_M12_BUD            NUMBER(14,3);
   TEMP_LVL_CODE           VARCHAR2(6);
   TEMP_LVL_NAME           VARCHAR2(60);
   TEMP_LVL_TYPE           VARCHAR2(1);
   TEMP_LVL_SEQ            NUMBER(6);
   TEMP_PARENT_LVL_CODE    VARCHAR2(6);
   TEMP_MAIN_ACNT_CODE     VARCHAR2(6);
   TEMP_TOTAL_FLAG         VARCHAR2(1);
   TEMP_LVL_STR            VARCHAR2(27);
   TEMP_MTD_BAL            NUMBER(14,3);
   TEMP_YTD_BAL            NUMBER(14,3);
   TEMP_ANN_BAL            NUMBER(14,3);
   TEMP_YR_OPEN_BAL        NUMBER(14,3);
   TEMP_PREV_MTD_BAL       NUMBER(14,3);
   TEMP_PREV_YTD_BAL       NUMBER(14,3);
   TEMP_PREV_ANN_BAL       NUMBER(14,3);
   TEMP_PREV_YR_OPEN_BAL   NUMBER(14,3);
   TEMP_MTD_BUD            NUMBER(14,3);
   TEMP_YTD_BUD            NUMBER(14,3);
   TEMP_ANN_BUD            NUMBER(14,3);
   TEMP_NEXT_MTD_BUD       NUMBER(14,3);
   TEMP_NEXT_YTD_BUD       NUMBER(14,3);
   TEMP_NEXT_ANN_BUD       NUMBER(14,3);
   TEMP_M01_BUD            NUMBER(14,3);
   TEMP_M02_BUD            NUMBER(14,3);
   TEMP_M03_BUD            NUMBER(14,3);
   TEMP_M04_BUD            NUMBER(14,3);
   TEMP_M05_BUD            NUMBER(14,3);
   TEMP_M06_BUD            NUMBER(14,3);
   TEMP_M07_BUD            NUMBER(14,3);
   TEMP_M08_BUD            NUMBER(14,3);
   TEMP_M09_BUD            NUMBER(14,3);
   TEMP_M10_BUD            NUMBER(14,3);
   TEMP_M11_BUD            NUMBER(14,3);
   TEMP_M12_BUD            NUMBER(14,3);
   CURSOR C1 IS
          SELECT MLS_LVL_CODE, MLS_LVL_NAME, MLS_LVL_TYPE,
                 MLS_PARENT_LVL_CODE,
                 DECODE(P_INCL_ACNT, 'Y', MLS_MAIN_ACNT_CODE, '0'),
                 LS_LVL_SEQ, NVL(LVL_TOTAL_FLAG, 'N'),
                 SUM(MLS_MTD_BAL), SUM(MLS_YTD_BAL), SUM(MLS_ANN_BAL),
                 SUM(MLS_YR_OPEN_BAL), SUM(MLS_PREV_MTD_BAL),
                 SUM(MLS_PREV_YTD_BAL), SUM(MLS_PREV_ANN_BAL),
                 SUM(MLS_PREV_YR_OPEN_BAL),
                 SUM(MLS_MTD_BUD), SUM(MLS_YTD_BUD),
                 SUM(MLS_ANN_BUD),
                 SUM(MLS_NEXT_MTD_BUD), SUM(MLS_NEXT_YTD_BUD),
                 SUM(MLS_NEXT_ANN_BUD), SUM(MLS_M01_BUD),
                 SUM(MLS_M02_BUD), SUM(MLS_M03_BUD),
                 SUM(MLS_M04_BUD), SUM(MLS_M05_BUD),
                 SUM(MLS_M06_BUD), SUM(MLS_M07_BUD),
                 SUM(MLS_M08_BUD), SUM(MLS_M09_BUD),
                 SUM(MLS_M10_BUD), SUM(MLS_M11_BUD),
                 SUM(MLS_M12_BUD)
          FROM   FW_LEVEL, FM_COA_LEVEL, FW_MAIN_LEVEL_SUM
          WHERE  MLS_KEY_NO = P_KEY_NO
          AND    MLS_FORMAT_ID = P_FORMAT_ID
          AND    LVL_FORMAT_ID = MLS_FORMAT_ID
          AND    LVL_CODE = MLS_LVL_CODE
          AND    LS_FORMAT_ID = LVL_FORMAT_ID
          AND    LS_LVL_CODE = LVL_CODE
          GROUP BY MLS_LVL_CODE, MLS_LVL_NAME, MLS_LVL_TYPE,
                   MLS_PARENT_LVL_CODE,
                   DECODE(P_INCL_ACNT, 'Y', MLS_MAIN_ACNT_CODE, '0'),
                   LS_LVL_SEQ, NVL(LVL_TOTAL_FLAG, 'N')
          ORDER  BY LS_LVL_SEQ,
                   DECODE(P_INCL_ACNT, 'Y', MLS_MAIN_ACNT_CODE, '0');
   CURSOR C2 IS
          SELECT MLS_LVL_CODE, '   TOTAL ' || MLS_LVL_NAME, MLS_LVL_TYPE,
                 MLS_PARENT_LVL_CODE,
                 NVL(LVL_TOTAL_FLAG, 'N'),
                 SUM(MLS_MTD_BAL), SUM(MLS_YTD_BAL), SUM(MLS_ANN_BAL),
                 SUM(MLS_YR_OPEN_BAL), SUM(MLS_PREV_MTD_BAL),
                 SUM(MLS_PREV_YTD_BAL), SUM(MLS_PREV_ANN_BAL),
                 SUM(MLS_PREV_YR_OPEN_BAL),
                 SUM(MLS_MTD_BUD), SUM(MLS_YTD_BUD),
                 SUM(MLS_ANN_BUD),
                 SUM(MLS_NEXT_MTD_BUD), SUM(MLS_NEXT_YTD_BUD),
                 SUM(MLS_NEXT_ANN_BUD), SUM(MLS_M01_BUD),
                 SUM(MLS_M02_BUD), SUM(MLS_M03_BUD),
                 SUM(MLS_M04_BUD), SUM(MLS_M05_BUD),
                 SUM(MLS_M06_BUD), SUM(MLS_M07_BUD),
                 SUM(MLS_M08_BUD), SUM(MLS_M09_BUD),
                 SUM(MLS_M10_BUD), SUM(MLS_M11_BUD),
                 SUM(MLS_M12_BUD)
          FROM   FM_COA_LEVEL, FW_MAIN_LEVEL_SUM, FW_LEVEL
          WHERE  LS_FORMAT_ID = P_FORMAT_ID
          AND    LS_LVL_SEQ = PREV_STR
          AND    MLS_KEY_NO = P_KEY_NO
          AND    MLS_FORMAT_ID = LS_FORMAT_ID
          AND    MLS_LVL_CODE = LS_LVL_CODE
          AND    LVL_FORMAT_ID = MLS_FORMAT_ID
          AND    LVL_CODE = MLS_LVL_CODE
          GROUP BY MLS_LVL_CODE, '   TOTAL ' || MLS_LVL_NAME, MLS_LVL_TYPE,
                   MLS_PARENT_LVL_CODE,
                   LS_LVL_SEQ, NVL(LVL_TOTAL_FLAG, 'N');
  PROCEDURE INSERT_BLANK_REC IS
  BEGIN
     RECORD_SEQ := NVL(RECORD_SEQ,0) + 1;
     LVL_TYPE := T_LVL_TYPE;
     INSERT INTO FW_MAIN_LEVEL_SUM_REP
            (MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_SEQ, MLS_LVL_TYPE)
     VALUES (P_KEY_NO, P_FORMAT_ID, RECORD_SEQ, LVL_TYPE);
  END;
  PROCEDURE INSERT_HEAD IS
  BEGIN
     RECORD_SEQ := NVL(RECORD_SEQ,0) + 1;
     INSERT INTO FW_MAIN_LEVEL_SUM_REP
            (MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_CODE,
            MLS_LVL_NAME, MLS_LVL_TYPE, MLS_LVL_SEQ,
            MLS_PARENT_LVL_CODE)
     VALUES (P_KEY_NO, P_FORMAT_ID, T_LVL_CODE,
             T_LVL_NAME, T_LVL_TYPE, RECORD_SEQ,
             T_PARENT_LVL_CODE);
     INSERT_BLANK_REC;
  END;
  PROCEDURE INSERT_REC IS
     CURSOR C3 IS
       SELECT MAIN_ACNT_NAME
       FROM   FM_MAIN_ACCOUNT
       WHERE  MAIN_ACNT_CODE = T_MAIN_ACNT_CODE;
     C3_LVL_NAME	VARCHAR2(60);
     M_DIFF             NUMBER(2);
  BEGIN
     RECORD_SEQ := NVL(RECORD_SEQ,0) + 1;
     IF NVL(T_MAIN_ACNT_CODE, '0') != '0' THEN
        IF C3%ISOPEN THEN
           CLOSE C3;
        END IF;
        OPEN C3;
        FETCH C3 INTO C3_LVL_NAME;
        IF C3%FOUND THEN
             M_DIFF := LENGTH(T_LVL_NAME) - LENGTH(LTRIM(T_LVL_NAME));
             T_LVL_NAME := LPAD(C3_LVL_NAME, LENGTH(C3_LVL_NAME) + M_DIFF);
        END IF;
        CLOSE C3;
     END IF;
     INSERT INTO FW_MAIN_LEVEL_SUM_REP
            (MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_CODE,
            MLS_LVL_NAME, MLS_LVL_TYPE, MLS_LVL_SEQ,
            MLS_PARENT_LVL_CODE, MLS_MAIN_ACNT_CODE,
            MLS_MTD_BAL, MLS_YTD_BAL, MLS_ANN_BAL, MLS_YR_OPEN_BAL,
            MLS_PREV_MTD_BAL, MLS_PREV_YTD_BAL, MLS_PREV_ANN_BAL,
            MLS_PREV_YR_OPEN_BAL, MLS_MTD_BUD, MLS_YTD_BUD,
            MLS_ANN_BUD,
            MLS_NEXT_MTD_BUD, MLS_NEXT_YTD_BUD, MLS_NEXT_ANN_BUD,
            MLS_M01_BUD, MLS_M02_BUD, MLS_M03_BUD, MLS_M04_BUD,
            MLS_M05_BUD, MLS_M06_BUD, MLS_M07_BUD, MLS_M08_BUD,
            MLS_M09_BUD, MLS_M10_BUD, MLS_M11_BUD, MLS_M12_BUD)
     VALUES (P_KEY_NO, P_FORMAT_ID,
            T_LVL_CODE, T_LVL_NAME, T_LVL_TYPE,
            RECORD_SEQ, T_PARENT_LVL_CODE,
            T_MAIN_ACNT_CODE, T_MTD_BAL, T_YTD_BAL, T_ANN_BAL,
            T_YR_OPEN_BAL, T_PREV_MTD_BAL,
            T_PREV_YTD_BAL, T_PREV_ANN_BAL, T_PREV_YR_OPEN_BAL,
            T_MTD_BUD, T_YTD_BUD, T_ANN_BUD,
            T_NEXT_MTD_BUD, T_NEXT_YTD_BUD, T_NEXT_ANN_BUD,
            T_M01_BUD, T_M02_BUD, T_M03_BUD, T_M04_BUD,
            T_M05_BUD, T_M06_BUD, T_M07_BUD, T_M08_BUD,
            T_M09_BUD, T_M10_BUD, T_M11_BUD, T_M12_BUD);
  END;
  PROCEDURE PROCESS_TOTAL IS
  BEGIN
    IF C2%ISOPEN THEN
       CLOSE C2;
    END IF;
    OPEN C2;
    FETCH C2 INTO P_LVL_CODE, P_LVL_NAME, P_LVL_TYPE,
                  P_PARENT_LVL_CODE,
                  P_TOTAL_FLAG,
                  P_MTD_BAL, P_YTD_BAL, P_ANN_BAL, P_YR_OPEN_BAL,
                  P_PREV_MTD_BAL, P_PREV_YTD_BAL, P_PREV_ANN_BAL,
                  P_PREV_YR_OPEN_BAL,
                  P_MTD_BUD, P_YTD_BUD, P_ANN_BUD,
                  P_NEXT_MTD_BUD, P_NEXT_YTD_BUD, P_NEXT_ANN_BUD,
                  P_M01_BUD, P_M02_BUD, P_M03_BUD, P_M04_BUD,
                  P_M05_BUD, P_M06_BUD, P_M07_BUD, P_M08_BUD,
                  P_M09_BUD, P_M10_BUD, P_M11_BUD, P_M12_BUD;
    IF C2%FOUND AND P_TOTAL_FLAG = 'Y' THEN
       RECORD_SEQ := NVL(RECORD_SEQ,0) + 1;
       INSERT INTO FW_MAIN_LEVEL_SUM_REP (
              MLS_KEY_NO, MLS_FORMAT_ID, MLS_LVL_CODE,
              MLS_LVL_NAME, MLS_LVL_TYPE, MLS_LVL_SEQ,
              MLS_PARENT_LVL_CODE,
              MLS_MTD_BAL, MLS_YTD_BAL, MLS_ANN_BAL, MLS_YR_OPEN_BAL,
              MLS_PREV_MTD_BAL, MLS_PREV_YTD_BAL,
              MLS_PREV_ANN_BAL, MLS_PREV_YR_OPEN_BAL,
              MLS_MTD_BUD, MLS_YTD_BUD, MLS_ANN_BUD,
              MLS_NEXT_MTD_BUD, MLS_NEXT_YTD_BUD, MLS_NEXT_ANN_BUD,
              MLS_M01_BUD, MLS_M02_BUD, MLS_M03_BUD, MLS_M04_BUD,
              MLS_M05_BUD, MLS_M06_BUD, MLS_M07_BUD, MLS_M08_BUD,
              MLS_M09_BUD, MLS_M10_BUD, MLS_M11_BUD, MLS_M12_BUD)
       VALUES (P_KEY_NO, P_FORMAT_ID, P_LVL_CODE,
              P_LVL_NAME, P_LVL_TYPE, RECORD_SEQ,
              P_PARENT_LVL_CODE,
              P_MTD_BAL, P_YTD_BAL, P_ANN_BAL, P_YR_OPEN_BAL,
              P_PREV_MTD_BAL, P_PREV_YTD_BAL,
              P_PREV_ANN_BAL, P_PREV_YR_OPEN_BAL,
              P_MTD_BUD, P_YTD_BUD, P_ANN_BUD,
              P_NEXT_MTD_BUD, P_NEXT_YTD_BUD, P_NEXT_ANN_BUD,
              P_M01_BUD, P_M02_BUD, P_M03_BUD, P_M04_BUD,
              P_M05_BUD, P_M06_BUD, P_M07_BUD, P_M08_BUD,
              P_M09_BUD, P_M10_BUD, P_M11_BUD, P_M12_BUD);
       INSERT_BLANK_REC;
    END IF;
    CLOSE C2;
    HEAD_FLAG := 'N';
END;
BEGIN
   DELETE FROM FW_MAIN_LEVEL_SUM_REP
          WHERE MLS_KEY_NO = P_KEY_NO;
   PREV_STR := '';
   RECORD_SEQ := 0;
   HEAD_FLAG := 'N';
   FIRST_REC := 0;
   BLANK_REC_FLAG := 'N';
   IF C1%ISOPEN THEN
      CLOSE C1;
   END IF;
   OPEN C1;
LOOP
   FETCH C1 INTO TEMP_LVL_CODE, TEMP_LVL_NAME, TEMP_LVL_TYPE,
                 TEMP_PARENT_LVL_CODE,
                 TEMP_MAIN_ACNT_CODE,
                 TEMP_LVL_STR, TEMP_TOTAL_FLAG,
                 TEMP_MTD_BAL, TEMP_YTD_BAL,
                 TEMP_ANN_BAL, TEMP_YR_OPEN_BAL,
                 TEMP_PREV_MTD_BAL, TEMP_PREV_YTD_BAL,
                 TEMP_PREV_ANN_BAL, TEMP_PREV_YR_OPEN_BAL,
                 TEMP_MTD_BUD, TEMP_YTD_BUD, TEMP_ANN_BUD,
                 TEMP_NEXT_MTD_BUD, TEMP_NEXT_YTD_BUD, TEMP_NEXT_ANN_BUD,
                 TEMP_M01_BUD, TEMP_M02_BUD, TEMP_M03_BUD, TEMP_M04_BUD,
                 TEMP_M05_BUD, TEMP_M06_BUD, TEMP_M07_BUD, TEMP_M08_BUD,
                 TEMP_M09_BUD, TEMP_M10_BUD, TEMP_M11_BUD, TEMP_M12_BUD;
    IF FIRST_REC = 0 THEN
       IF C1%NOTFOUND THEN
          EXIT;
       END IF;
       FIRST_REC := 1;
    ELSE
      IF C1%NOTFOUND THEN
         INSERT_REC;
         EXIT;
      END IF;
      IF LENGTH(T_LVL_STR) > LENGTH(TEMP_LVL_STR) THEN
         INSERT_REC;
         INSERT_BLANK_REC;
	 PROCESS_TOTAL;
         LOOP
            PREV_STR := SUBSTR(PREV_STR, 1, LENGTH(PREV_STR)-3);
            IF LENGTH(PREV_STR) >= LENGTH(TEMP_LVL_STR) THEN
	       PROCESS_TOTAL;
            ELSE
               EXIT;
            END IF;
         END LOOP;
         BLANK_REC_FLAG := 'N';
      ELSIF LENGTH(T_LVL_STR) < LENGTH(TEMP_LVL_STR) THEN
            PREV_STR := T_LVL_STR;
            IF T_TOTAL_FLAG = 'Y' THEN
               IF BLANK_REC_FLAG = 'D' THEN
                  INSERT_BLANK_REC;
                  BLANK_REC_FLAG := 'N';
               END IF;
               INSERT_HEAD;
            END IF;
      ELSE
        BLANK_REC_FLAG := 'D';
        IF NVL(P_INCL_ACNT, 'N') = 'N' THEN
           INSERT_REC;
           IF NVL(SUBSTR(T_LVL_STR, 1, LENGTH(T_LVL_STR) - 3), '1') !=
              NVL(SUBSTR(TEMP_LVL_STR, 1, LENGTH(TEMP_LVL_STR) - 3), '2') THEN
                INSERT_BLANK_REC;
                BLANK_REC_FLAG := 'N';
           END IF;
        END IF;
        IF NVL(P_INCL_ACNT, 'N') = 'N' THEN
           NULL;
        ELSIF T_LVL_STR != TEMP_LVL_STR THEN
              INSERT_REC;
              INSERT_BLANK_REC;
              IF HEAD_FLAG = 'T' THEN
                 PROCESS_TOTAL;
                 PREV_STR := SUBSTR(PREV_STR, 1, LENGTH(PREV_STR)-3);
              END IF;
        ELSIF T_LVL_STR = TEMP_LVL_STR THEN
              IF T_TOTAL_FLAG = 'Y' AND HEAD_FLAG = 'N' THEN
                 INSERT_HEAD;
                 PREV_STR := T_LVL_STR;
                 HEAD_FLAG := 'T';
              END IF;
              INSERT_REC;
        END IF;
      END IF;
   END IF;
      SELECT TEMP_LVL_CODE, TEMP_LVL_NAME, TEMP_LVL_TYPE,
             TEMP_LVL_SEQ, TEMP_PARENT_LVL_CODE,
             TEMP_MAIN_ACNT_CODE,
             TEMP_LVL_STR, TEMP_TOTAL_FLAG,
             TEMP_MTD_BAL, TEMP_YTD_BAL,
             TEMP_ANN_BAL, TEMP_YR_OPEN_BAL,
             TEMP_PREV_MTD_BAL, TEMP_PREV_YTD_BAL,
             TEMP_PREV_ANN_BAL, TEMP_PREV_YR_OPEN_BAL,
             TEMP_MTD_BUD, TEMP_YTD_BUD, TEMP_ANN_BUD,
             TEMP_NEXT_MTD_BUD, TEMP_NEXT_YTD_BUD, TEMP_NEXT_ANN_BUD,
             TEMP_M01_BUD, TEMP_M02_BUD, TEMP_M03_BUD, TEMP_M04_BUD,
             TEMP_M05_BUD, TEMP_M06_BUD, TEMP_M07_BUD, TEMP_M08_BUD,
             TEMP_M09_BUD, TEMP_M10_BUD, TEMP_M11_BUD, TEMP_M12_BUD
      INTO   T_LVL_CODE, T_LVL_NAME, T_LVL_TYPE,
             T_LVL_SEQ, T_PARENT_LVL_CODE,
             T_MAIN_ACNT_CODE,
             T_LVL_STR, T_TOTAL_FLAG,
             T_MTD_BAL, T_YTD_BAL, T_ANN_BAL, T_YR_OPEN_BAL,
             T_PREV_MTD_BAL, T_PREV_YTD_BAL,
             T_PREV_ANN_BAL, T_PREV_YR_OPEN_BAL,
             T_MTD_BUD, T_YTD_BUD, T_ANN_BUD,
             T_NEXT_MTD_BUD, T_NEXT_YTD_BUD, T_NEXT_ANN_BUD,
             T_M01_BUD, T_M02_BUD, T_M03_BUD, T_M04_BUD,
             T_M05_BUD, T_M06_BUD, T_M07_BUD, T_M08_BUD,
             T_M09_BUD, T_M10_BUD, T_M11_BUD, T_M12_BUD
      FROM   DUAL;
END LOOP;
   CLOSE C1;
   INSERT_BLANK_REC;
   IF PREV_STR IS NOT NULL THEN
      PROCESS_TOTAL;
   END IF;
   LOOP
      PREV_STR := SUBSTR(PREV_STR, 1, LENGTH(PREV_STR)-3);
      IF LENGTH(PREV_STR) > 0 THEN
	 PROCESS_TOTAL;
      ELSE
         EXIT;
      END IF;
   END LOOP;
END;
/
CREATE OR REPLACE PROCEDURE F_MAIN_YEAR_SUM
                 (P_KEY_NO           IN    NUMBER,
                  P_COMP_CODE        IN    VARCHAR2,
                  P_FORMAT_ID        IN    NUMBER,
                  P_ACNT_YEAR        IN    NUMBER,
                  P_YEARS            IN    NUMBER,
                  P_INCL_BUD         IN    VARCHAR2,
                  P_INCL_ZERO        IN    VARCHAR2,
                  P_ERR_NO          OUT    NUMBER) AS
P_CUR_ACNT_YEAR        NUMBER(2);
P_WORK_ACNT_YEAR       NUMBER(2);
P_TEMP_ACNT_YEAR       NUMBER(2);
P_NO_YEARS             NUMBER(2);
P_LVL_CODE             VARCHAR2(6);
P_ACNT_CODE            VARCHAR2(6);
P_DIVN_CODE            VARCHAR2(6);
P_DEPT_CODE            VARCHAR2(6);
P_HEAD_NO_1            NUMBER(1);
P_ANLY_CODE_1          VARCHAR(6);
P_HEAD_NO_2            NUMBER(1);
P_ANLY_CODE_2          VARCHAR(6);
P_ANN_BAL              NUMBER(14,3);
P_YTD_BAL              NUMBER(14,3);
P_YR_OPEN_BAL          NUMBER(14,3);
P_MAX_LENGTH           NUMBER(3);
P_LENGTH               NUMBER(3);
P_PAD_LENGTH           NUMBER(2);
CURSOR F_SUMM_CUR IS
SELECT CAF_LVL_CODE, CAF_MAIN_ACNT_CODE,
       NVL(ABAL_DIVN_CODE, '0'),
       NVL(ABAL_DEPT_CODE, '0'),
       NVL(ABAL_HEAD_NO_1, 0),
       NVL(ABAL_ANLY_CODE_1, '0'),
       NVL(ABAL_HEAD_NO_2, 0),
       NVL(ABAL_ANLY_CODE_2, '0'),
       SUM(DECODE(ABAL_CAL_MONTH, 0,
                         NVL(ABAL_LC_MTD_DR,0) - NVL(ABAL_LC_MTD_CR,0), 0)),
       SUM(NVL(ABAL_LC_MTD_DR,0) - NVL(ABAL_LC_MTD_CR,0))
FROM   FS_CUR_ACNT_BAL, FM_COA_ACNT_FORMAT
WHERE  CAF_FORMAT_ID = P_FORMAT_ID
AND    CAF_MAIN_ACNT_CODE = ABAL_MAIN_ACNT_CODE
AND    ABAL_COMP_CODE = P_COMP_CODE
AND    ABAL_ACNT_YEAR = P_WORK_ACNT_YEAR
GROUP BY CAF_LVL_CODE, CAF_MAIN_ACNT_CODE,
       NVL(ABAL_DIVN_CODE, '0'),
       NVL(ABAL_DEPT_CODE, '0'),
       NVL(ABAL_HEAD_NO_1, 0),
       NVL(ABAL_ANLY_CODE_1, '0'),
       NVL(ABAL_HEAD_NO_2, 0),
       NVL(ABAL_ANLY_CODE_2, '0');
CURSOR F_SUMM_PRV IS
SELECT CAF_LVL_CODE, CAF_MAIN_ACNT_CODE,
       NVL(ABAL_DIVN_CODE, '0'),
       NVL(ABAL_DEPT_CODE, '0'),
       NVL(ABAL_HEAD_NO_1, 0),
       NVL(ABAL_ANLY_CODE_1, '0'),
       NVL(ABAL_HEAD_NO_2, 0),
       NVL(ABAL_ANLY_CODE_2, '0'),
       SUM(DECODE(ABAL_CAL_MONTH, 0,
                         NVL(ABAL_LC_MTD_DR,0) - NVL(ABAL_LC_MTD_CR,0), 0)),
       SUM(NVL(ABAL_LC_MTD_DR,0) - NVL(ABAL_LC_MTD_CR,0))
FROM   FS_PRV_ACNT_BAL, FM_COA_ACNT_FORMAT
WHERE  CAF_FORMAT_ID = P_FORMAT_ID
AND    CAF_MAIN_ACNT_CODE = ABAL_MAIN_ACNT_CODE
AND    ABAL_COMP_CODE = P_COMP_CODE
AND    ABAL_ACNT_YEAR = P_WORK_ACNT_YEAR
GROUP BY CAF_LVL_CODE, CAF_MAIN_ACNT_CODE,
       NVL(ABAL_DIVN_CODE, '0'),
       NVL(ABAL_DEPT_CODE, '0'),
       NVL(ABAL_HEAD_NO_1, 0),
       NVL(ABAL_ANLY_CODE_1, '0'),
       NVL(ABAL_HEAD_NO_2, 0),
       NVL(ABAL_ANLY_CODE_2, '0');
PROCEDURE BUDGET_SELECT IS
  CURSOR BUD_FIGURES IS
  SELECT CAF_LVL_CODE, CAF_MAIN_ACNT_CODE,
         NVL(MBUD_DIVN_CODE, '0'),
         NVL(MBUD_DEPT_CODE, '0'),
         NVL(MBUD_HEAD_NO_1, 0),
         NVL(MBUD_ANLY_CODE_1, '0'),
         NVL(MBUD_HEAD_NO_2, 0),
         NVL(MBUD_ANLY_CODE_2, '0'),
         SUM(DECODE(YBUD_ORGL_DRCR_FLAG,'D',1,-1) *
	     NVL(MBUD_ORGL_AMT,0))
  FROM   FM_YEARLY_BUDGET, FM_MONTHLY_BUDGET, FM_COA_ACNT_FORMAT
  WHERE  CAF_FORMAT_ID = P_FORMAT_ID
  AND    CAF_MAIN_ACNT_CODE = MBUD_MAIN_ACNT_CODE
  AND    MBUD_COMP_CODE = P_COMP_CODE
  AND    MBUD_ACNT_YEAR = P_WORK_ACNT_YEAR
  AND    MBUD_YEAR_FLAG = 'C'
  AND    YBUD_COMP_CODE = MBUD_COMP_CODE
  AND    YBUD_ACNT_YEAR = MBUD_ACNT_YEAR
  AND    YBUD_MAIN_ACNT_CODE = MBUD_MAIN_ACNT_CODE
  AND    NVL(YBUD_SUB_ACNT_CODE,'0') = NVL(MBUD_SUB_ACNT_CODE,'0')
  AND    NVL(YBUD_DIVN_CODE,'0') = NVL(MBUD_DIVN_CODE,'0')
  AND    NVL(YBUD_DEPT_CODE,'0') = NVL(MBUD_DEPT_CODE,'0')
  AND    NVL(YBUD_HEAD_NO_1,0) = NVL(MBUD_HEAD_NO_1,0)
  AND    NVL(YBUD_ANLY_CODE_1,'0') = NVL(MBUD_ANLY_CODE_1,'0')
  AND    NVL(YBUD_HEAD_NO_2,0) = NVL(MBUD_HEAD_NO_2,0)
  AND    NVL(YBUD_ANLY_CODE_2,'0') = NVL(MBUD_ANLY_CODE_2,'0')
  GROUP  BY CAF_LVL_CODE, CAF_MAIN_ACNT_CODE,
         NVL(MBUD_DIVN_CODE, '0'),
         NVL(MBUD_DEPT_CODE, '0'),
         NVL(MBUD_HEAD_NO_1, 0),
         NVL(MBUD_ANLY_CODE_1, '0'),
         NVL(MBUD_HEAD_NO_2, 0),
         NVL(MBUD_ANLY_CODE_2, '0');
BEGIN
  IF BUD_FIGURES%ISOPEN THEN
     CLOSE BUD_FIGURES;
  END IF;
  OPEN BUD_FIGURES;
  <<BUD_FIG_SUMMARY>>
  LOOP
  FETCH BUD_FIGURES INTO P_LVL_CODE, P_ACNT_CODE,
                         P_DIVN_CODE, P_DEPT_CODE,
                         P_HEAD_NO_1, P_ANLY_CODE_1,
                         P_HEAD_NO_2, P_ANLY_CODE_2,
                         P_ANN_BAL;
  EXIT WHEN BUD_FIGURES%NOTFOUND;
  INSERT INTO FW_MAIN_YEAR_SUM_TEMP (
         MYS_KEY_NO, MYS_FORMAT_ID, MYS_LVL_CODE, MYS_ACNT_YEAR,
         MYS_COMP_CODE, MYS_DIVN_CODE, MYS_DEPT_CODE, MYS_HEAD_NO_1,
         MYS_ANLY_CODE_1, MYS_HEAD_NO_2, MYS_ANLY_CODE_2,
         MYS_MAIN_ACNT_CODE,
         MYS_ANN_BUD)
  VALUES (P_KEY_NO, P_FORMAT_ID, P_LVL_CODE, P_NO_YEARS,
         P_COMP_CODE, P_DIVN_CODE, P_DEPT_CODE, P_HEAD_NO_1,
         P_ANLY_CODE_1, P_HEAD_NO_2, P_ANLY_CODE_2, P_ACNT_CODE,
         P_ANN_BAL);
  END LOOP BUD_FIG_SUMMARY;
  CLOSE BUD_FIGURES;
END;
BEGIN
DELETE FROM FW_MAIN_YEAR_SUM_TEMP
       WHERE MYS_KEY_NO = P_KEY_NO;
DELETE FROM FW_MAIN_YEAR_SUM
       WHERE MYS_KEY_NO = P_KEY_NO;
P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(P_COMP_CODE);
P_TEMP_ACNT_YEAR := P_ACNT_YEAR;
P_NO_YEARS := 0;
<<YEARS_LOOP>>
LOOP
    P_WORK_ACNT_YEAR := P_TEMP_ACNT_YEAR;
    P_NO_YEARS := P_NO_YEARS + 1;
    IF (P_NO_YEARS > P_YEARS) OR (P_TEMP_ACNT_YEAR <= 0) THEN
       EXIT YEARS_LOOP;
    END IF;
  IF P_WORK_ACNT_YEAR = P_CUR_ACNT_YEAR THEN
     IF F_SUMM_CUR%ISOPEN THEN
          CLOSE F_SUMM_CUR;
     END IF;
     OPEN F_SUMM_CUR;
     <<INS_DET_YEAR_SUMM_CUR>>
     LOOP
     IF P_WORK_ACNT_YEAR = P_TEMP_ACNT_YEAR THEN
        P_TEMP_ACNT_YEAR := P_TEMP_ACNT_YEAR - 1;
     END IF;
     FETCH F_SUMM_CUR INTO P_LVL_CODE, P_ACNT_CODE,
                           P_DIVN_CODE, P_DEPT_CODE,
                           P_HEAD_NO_1, P_ANLY_CODE_1,
                           P_HEAD_NO_2, P_ANLY_CODE_2,
                           P_YR_OPEN_BAL,
                           P_YTD_BAL;
     EXIT WHEN F_SUMM_CUR%NOTFOUND;
     INSERT INTO FW_MAIN_YEAR_SUM_TEMP (
            MYS_KEY_NO, MYS_FORMAT_ID, MYS_LVL_CODE, MYS_ACNT_YEAR,
            MYS_COMP_CODE, MYS_DIVN_CODE, MYS_DEPT_CODE, MYS_HEAD_NO_1,
            MYS_ANLY_CODE_1, MYS_HEAD_NO_2, MYS_ANLY_CODE_2,
            MYS_MAIN_ACNT_CODE,
            MYS_YR_OPEN_BAL, MYS_YTD_BAL)
     VALUES (P_KEY_NO, P_FORMAT_ID, P_LVL_CODE, P_NO_YEARS,
            P_COMP_CODE, P_DIVN_CODE, P_DEPT_CODE, P_HEAD_NO_1,
            P_ANLY_CODE_1, P_HEAD_NO_2, P_ANLY_CODE_2, P_ACNT_CODE,
            P_YR_OPEN_BAL, P_YTD_BAL);
     END LOOP INS_DET_YEAR_SUMM_CUR;
     CLOSE F_SUMM_CUR;
     IF P_INCL_BUD = 'Y' THEN
        BUDGET_SELECT;
     END IF;
  ELSE
     IF F_SUMM_PRV%ISOPEN THEN
          CLOSE F_SUMM_PRV;
     END IF;
     OPEN F_SUMM_PRV;
     <<INS_DET_YEAR_SUMM_PRV>>
     LOOP
     IF P_WORK_ACNT_YEAR = P_TEMP_ACNT_YEAR THEN
        P_TEMP_ACNT_YEAR := P_TEMP_ACNT_YEAR - 1;
     END IF;
     FETCH F_SUMM_PRV INTO P_LVL_CODE, P_ACNT_CODE,
                           P_DIVN_CODE, P_DEPT_CODE,
                           P_HEAD_NO_1, P_ANLY_CODE_1,
                           P_HEAD_NO_2, P_ANLY_CODE_2,
                           P_YR_OPEN_BAL, P_YTD_BAL;
     EXIT WHEN F_SUMM_PRV%NOTFOUND;
     INSERT INTO FW_MAIN_YEAR_SUM_TEMP (
            MYS_KEY_NO, MYS_FORMAT_ID, MYS_LVL_CODE, MYS_ACNT_YEAR,
            MYS_COMP_CODE, MYS_DIVN_CODE, MYS_DEPT_CODE, MYS_HEAD_NO_1,
            MYS_ANLY_CODE_1, MYS_HEAD_NO_2, MYS_ANLY_CODE_2,
            MYS_MAIN_ACNT_CODE,
            MYS_YR_OPEN_BAL, MYS_YTD_BAL)
     VALUES (P_KEY_NO, P_FORMAT_ID, P_LVL_CODE, P_NO_YEARS,
            P_COMP_CODE, P_DIVN_CODE, P_DEPT_CODE, P_HEAD_NO_1,
            P_ANLY_CODE_1, P_HEAD_NO_2, P_ANLY_CODE_2, P_ACNT_CODE,
            P_YR_OPEN_BAL, P_YTD_BAL);
     END LOOP INS_DET_YEAR_SUMM_PRV;
     CLOSE F_SUMM_PRV;
     IF P_INCL_BUD = 'Y' THEN
        BUDGET_SELECT;
     END IF;
  END IF;
    IF P_TEMP_ACNT_YEAR = P_WORK_ACNT_YEAR THEN
       EXIT YEARS_LOOP;
    END IF;
END LOOP YEARS_LOOP;
    IF NVL(P_INCL_ZERO, 'N') = 'Y' THEN
       DELETE FROM FW_MAIN_YEAR_SUM_TEMP
              WHERE MYS_KEY_NO = P_KEY_NO
              AND   MYS_FORMAT_ID = P_FORMAT_ID
              AND   MYS_YR_OPEN_BAL = 0
              AND   MYS_YTD_BAL = 0
              AND   MYS_ANN_BUD = 0;
    END IF;
  SELECT MAX(LENGTH(LS_LVL_SEQ))
  INTO   P_MAX_LENGTH
  FROM   FW_LEVEL
  WHERE  LS_FORMAT_ID = P_FORMAT_ID;
  IF P_MAX_LENGTH > 18 THEN
       P_PAD_LENGTH := 1;
  ELSE
       P_PAD_LENGTH := 2;
  END IF;
  INSERT INTO FW_MAIN_YEAR_SUM (
      MYS_KEY_NO, MYS_FORMAT_ID, MYS_LVL_CODE, MYS_LVL_NAME,
      MYS_LVL_TYPE, MYS_LVL_SEQ, MYS_PARENT_LVL_CODE, MYS_ACNT_YEAR,
      MYS_COMP_CODE, MYS_DIVN_CODE, MYS_DEPT_CODE, MYS_HEAD_NO_1,
      MYS_ANLY_CODE_1, MYS_HEAD_NO_2, MYS_ANLY_CODE_2,
      MYS_MAIN_ACNT_CODE,
      MYS_YR_OPEN_BAL_1, MYS_YTD_BAL_1, MYS_ANN_BUD_1,
      MYS_YR_OPEN_BAL_2, MYS_YTD_BAL_2, MYS_ANN_BUD_2,
      MYS_YR_OPEN_BAL_3, MYS_YTD_BAL_3, MYS_ANN_BUD_3,
      MYS_YR_OPEN_BAL_4, MYS_YTD_BAL_4, MYS_ANN_BUD_4,
      MYS_YR_OPEN_BAL_5, MYS_YTD_BAL_5, MYS_ANN_BUD_5)
  SELECT MYS_KEY_NO, MYS_FORMAT_ID, LVL_CODE,
      LPAD(' ', P_PAD_LENGTH * ((LENGTH(LS_LVL_SEQ) / 3) - 1), ' ') ||
      LVL_NAME, LS_LVL_TYPE, LVL_SEQ_NO, LVL_PARENT_CODE,
      P_ACNT_YEAR, MYS_COMP_CODE, MYS_DIVN_CODE, MYS_DEPT_CODE,
      MYS_HEAD_NO_1, MYS_ANLY_CODE_1, MYS_HEAD_NO_2, MYS_ANLY_CODE_2,
      MYS_MAIN_ACNT_CODE,
      SUM(DECODE(MYS_ACNT_YEAR, 1, 1, 0) * MYS_YR_OPEN_BAL),
      SUM(DECODE(MYS_ACNT_YEAR, 1, 1, 0) * MYS_YTD_BAL),
      SUM(DECODE(MYS_ACNT_YEAR, 1, 1, 0) * MYS_ANN_BUD),
      SUM(DECODE(MYS_ACNT_YEAR, 2, 1, 0) * MYS_YR_OPEN_BAL),
      SUM(DECODE(MYS_ACNT_YEAR, 2, 1, 0) * MYS_YTD_BAL),
      SUM(DECODE(MYS_ACNT_YEAR, 2, 1, 0) * MYS_ANN_BUD),
      SUM(DECODE(MYS_ACNT_YEAR, 3, 1, 0) * MYS_YR_OPEN_BAL),
      SUM(DECODE(MYS_ACNT_YEAR, 3, 1, 0) * MYS_YTD_BAL),
      SUM(DECODE(MYS_ACNT_YEAR, 3, 1, 0) * MYS_ANN_BUD),
      SUM(DECODE(MYS_ACNT_YEAR, 4, 1, 0) * MYS_YR_OPEN_BAL),
      SUM(DECODE(MYS_ACNT_YEAR, 4, 1, 0) * MYS_YTD_BAL),
      SUM(DECODE(MYS_ACNT_YEAR, 4, 1, 0) * MYS_ANN_BUD),
      SUM(DECODE(MYS_ACNT_YEAR, 5, 1, 0) * MYS_YR_OPEN_BAL),
      SUM(DECODE(MYS_ACNT_YEAR, 5, 1, 0) * MYS_YTD_BAL),
      SUM(DECODE(MYS_ACNT_YEAR, 5, 1, 0) * MYS_ANN_BUD)
  FROM   FM_COA_LEVEL, FW_LEVEL, FW_MAIN_YEAR_SUM_TEMP
  WHERE  MYS_KEY_NO = P_KEY_NO
  AND    MYS_FORMAT_ID = P_FORMAT_ID
  AND    LS_FORMAT_ID = MYS_FORMAT_ID
  AND    LS_LVL_CODE = MYS_LVL_CODE
  AND    LVL_FORMAT_ID = LS_FORMAT_ID
  AND    LVL_CODE = LS_LVL_CODE
  GROUP BY MYS_KEY_NO, MYS_FORMAT_ID, LVL_CODE,
      LPAD(' ', P_PAD_LENGTH * ((LENGTH(LS_LVL_SEQ) / 3) - 1), ' ') ||
      LVL_NAME, LS_LVL_TYPE, LVL_SEQ_NO, LVL_PARENT_CODE,
      P_ACNT_YEAR, MYS_COMP_CODE, MYS_DIVN_CODE, MYS_DEPT_CODE,
      MYS_HEAD_NO_1, MYS_ANLY_CODE_1, MYS_HEAD_NO_2, MYS_ANLY_CODE_2,
      MYS_MAIN_ACNT_CODE;
  P_LENGTH := 0;
  <<INS_YEAR_SUM>>
  LOOP
      P_MAX_LENGTH := P_MAX_LENGTH - 3;
      P_LENGTH := P_LENGTH + 3;
      IF P_MAX_LENGTH <= 0 THEN
         EXIT INS_YEAR_SUM;
      END IF;
      INSERT INTO FW_MAIN_YEAR_SUM (
             MYS_KEY_NO, MYS_FORMAT_ID, MYS_LVL_CODE, MYS_LVL_NAME,
             MYS_LVL_TYPE, MYS_LVL_SEQ, MYS_PARENT_LVL_CODE, MYS_ACNT_YEAR,
             MYS_COMP_CODE, MYS_DIVN_CODE, MYS_DEPT_CODE, MYS_HEAD_NO_1,
             MYS_ANLY_CODE_1, MYS_HEAD_NO_2, MYS_ANLY_CODE_2,
             MYS_MAIN_ACNT_CODE,
             MYS_YR_OPEN_BAL_1, MYS_YTD_BAL_1, MYS_ANN_BUD_1,
             MYS_YR_OPEN_BAL_2, MYS_YTD_BAL_2, MYS_ANN_BUD_2,
             MYS_YR_OPEN_BAL_3, MYS_YTD_BAL_3, MYS_ANN_BUD_3,
             MYS_YR_OPEN_BAL_4, MYS_YTD_BAL_4, MYS_ANN_BUD_4,
             MYS_YR_OPEN_BAL_5, MYS_YTD_BAL_5, MYS_ANN_BUD_5)
      SELECT MYS_KEY_NO, MYS_FORMAT_ID, LVL_CODE,
             LPAD(' ', P_PAD_LENGTH * ((LENGTH(B.LS_LVL_SEQ) / 3) - 1), ' ') ||
             LVL_NAME, B.LS_LVL_TYPE, LVL_SEQ_NO, LVL_PARENT_CODE,
             MYS_ACNT_YEAR, MYS_COMP_CODE, MYS_DIVN_CODE, MYS_DEPT_CODE,
             MYS_HEAD_NO_1, MYS_ANLY_CODE_1, MYS_HEAD_NO_2, MYS_ANLY_CODE_2,
             '0',
             SUM(DECODE(MYS_ACNT_YEAR, 1, 1, 0) * MYS_YR_OPEN_BAL),
             SUM(DECODE(MYS_ACNT_YEAR, 1, 1, 0) * MYS_YTD_BAL),
             SUM(DECODE(MYS_ACNT_YEAR, 1, 1, 0) * MYS_ANN_BUD),
             SUM(DECODE(MYS_ACNT_YEAR, 2, 1, 0) * MYS_YR_OPEN_BAL),
             SUM(DECODE(MYS_ACNT_YEAR, 2, 1, 0) * MYS_YTD_BAL),
             SUM(DECODE(MYS_ACNT_YEAR, 2, 1, 0) * MYS_ANN_BUD),
             SUM(DECODE(MYS_ACNT_YEAR, 3, 1, 0) * MYS_YR_OPEN_BAL),
             SUM(DECODE(MYS_ACNT_YEAR, 3, 1, 0) * MYS_YTD_BAL),
             SUM(DECODE(MYS_ACNT_YEAR, 3, 1, 0) * MYS_ANN_BUD),
             SUM(DECODE(MYS_ACNT_YEAR, 4, 1, 0) * MYS_YR_OPEN_BAL),
             SUM(DECODE(MYS_ACNT_YEAR, 4, 1, 0) * MYS_YTD_BAL),
             SUM(DECODE(MYS_ACNT_YEAR, 4, 1, 0) * MYS_ANN_BUD),
             SUM(DECODE(MYS_ACNT_YEAR, 5, 1, 0) * MYS_YR_OPEN_BAL),
             SUM(DECODE(MYS_ACNT_YEAR, 5, 1, 0) * MYS_YTD_BAL),
             SUM(DECODE(MYS_ACNT_YEAR, 5, 1, 0) * MYS_ANN_BUD)
      FROM   FM_COA_LEVEL, FW_LEVEL B, FW_LEVEL A,
             FW_MAIN_YEAR_SUM_TEMP
      WHERE  MYS_KEY_NO = P_KEY_NO
      AND    MYS_FORMAT_ID = P_FORMAT_ID
      AND    A.LS_FORMAT_ID = MYS_FORMAT_ID
      AND    A.LS_LVL_CODE = MYS_LVL_CODE
      AND    NVL(LENGTH(A.LS_LVL_SEQ), 0) - P_LENGTH > 0
      AND    B.LS_FORMAT_ID = A.LS_FORMAT_ID
      AND    B.LS_LVL_SEQ = SUBSTR(A.LS_LVL_SEQ, 1,
                            NVL(LENGTH(A.LS_LVL_SEQ), 0) - P_LENGTH)
      AND    LVL_FORMAT_ID = B.LS_FORMAT_ID
      AND    LVL_CODE = B.LS_LVL_CODE
      GROUP BY MYS_KEY_NO, MYS_FORMAT_ID, LVL_CODE,
          LPAD(' ', P_PAD_LENGTH * ((LENGTH(B.LS_LVL_SEQ) / 3) - 1), ' ') ||
          LVL_NAME, B.LS_LVL_TYPE, LVL_SEQ_NO, LVL_PARENT_CODE,
          MYS_ACNT_YEAR, MYS_COMP_CODE, MYS_DIVN_CODE, MYS_DEPT_CODE,
          MYS_HEAD_NO_1, MYS_ANLY_CODE_1, MYS_HEAD_NO_2, MYS_ANLY_CODE_2;
  END LOOP INS_YEAR_SUM;
END;
/
CREATE OR REPLACE PROCEDURE F_MAIN_YEAR_SUM_REP
                 (P_KEY_NO           IN    NUMBER,
                  P_COMP_CODE        IN    VARCHAR2,
                  P_FORMAT_ID        IN    NUMBER,
                  P_INCL_ACNT        IN    VARCHAR2,
                  P_ERR_NO          OUT    NUMBER) AS
   PREV_STR             VARCHAR2(27);
   RECORD_SEQ           NUMBER(6);
   HEAD_FLAG            VARCHAR2(1);
   FIRST_REC            NUMBER(1);
   BLANK_REC_FLAG       VARCHAR2(1);
   LVL_TYPE             VARCHAR2(1);
   P_LVL_CODE           VARCHAR2(6);
   P_LVL_NAME           VARCHAR2(60);
   P_LVL_TYPE           VARCHAR2(1);
   P_PARENT_LVL_CODE    VARCHAR2(6);
   P_TOTAL_FLAG         VARCHAR2(1);
   P_YTD_BAL_1          NUMBER(14,3);
   P_YR_OPEN_BAL_1      NUMBER(14,3);
   P_ANN_BUD_1          NUMBER(14,3);
   P_YTD_BAL_2          NUMBER(14,3);
   P_YR_OPEN_BAL_2      NUMBER(14,3);
   P_ANN_BUD_2          NUMBER(14,3);
   P_YTD_BAL_3          NUMBER(14,3);
   P_YR_OPEN_BAL_3      NUMBER(14,3);
   P_ANN_BUD_3          NUMBER(14,3);
   P_YTD_BAL_4          NUMBER(14,3);
   P_YR_OPEN_BAL_4      NUMBER(14,3);
   P_ANN_BUD_4          NUMBER(14,3);
   P_YTD_BAL_5          NUMBER(14,3);
   P_YR_OPEN_BAL_5      NUMBER(14,3);
   P_ANN_BUD_5          NUMBER(14,3);
   T_LVL_CODE           VARCHAR2(6);
   T_LVL_NAME           VARCHAR2(60);
   T_LVL_TYPE           VARCHAR2(1);
   T_LVL_SEQ            NUMBER(6);
   T_PARENT_LVL_CODE    VARCHAR2(6);
   T_MAIN_ACNT_CODE     VARCHAR2(6);
   T_TOTAL_FLAG         VARCHAR2(1);
   T_LVL_STR            VARCHAR2(27);
   T_YTD_BAL_1          NUMBER(14,3);
   T_YR_OPEN_BAL_1      NUMBER(14,3);
   T_ANN_BUD_1          NUMBER(14,3);
   T_YTD_BAL_2          NUMBER(14,3);
   T_YR_OPEN_BAL_2      NUMBER(14,3);
   T_ANN_BUD_2          NUMBER(14,3);
   T_YTD_BAL_3          NUMBER(14,3);
   T_YR_OPEN_BAL_3      NUMBER(14,3);
   T_ANN_BUD_3          NUMBER(14,3);
   T_YTD_BAL_4          NUMBER(14,3);
   T_YR_OPEN_BAL_4      NUMBER(14,3);
   T_ANN_BUD_4          NUMBER(14,3);
   T_YTD_BAL_5          NUMBER(14,3);
   T_YR_OPEN_BAL_5      NUMBER(14,3);
   T_ANN_BUD_5          NUMBER(14,3);
   TEMP_LVL_CODE           VARCHAR2(6);
   TEMP_LVL_NAME           VARCHAR2(60);
   TEMP_LVL_TYPE           VARCHAR2(1);
   TEMP_LVL_SEQ            NUMBER(6);
   TEMP_PARENT_LVL_CODE    VARCHAR2(6);
   TEMP_MAIN_ACNT_CODE     VARCHAR2(6);
   TEMP_TOTAL_FLAG         VARCHAR2(1);
   TEMP_LVL_STR            VARCHAR2(27);
   TEMP_YTD_BAL_1          NUMBER(14,3);
   TEMP_YR_OPEN_BAL_1      NUMBER(14,3);
   TEMP_ANN_BUD_1          NUMBER(14,3);
   TEMP_YTD_BAL_2          NUMBER(14,3);
   TEMP_YR_OPEN_BAL_2      NUMBER(14,3);
   TEMP_ANN_BUD_2          NUMBER(14,3);
   TEMP_YTD_BAL_3          NUMBER(14,3);
   TEMP_YR_OPEN_BAL_3      NUMBER(14,3);
   TEMP_ANN_BUD_3          NUMBER(14,3);
   TEMP_YTD_BAL_4          NUMBER(14,3);
   TEMP_YR_OPEN_BAL_4      NUMBER(14,3);
   TEMP_ANN_BUD_4          NUMBER(14,3);
   TEMP_YTD_BAL_5          NUMBER(14,3);
   TEMP_YR_OPEN_BAL_5      NUMBER(14,3);
   TEMP_ANN_BUD_5          NUMBER(14,3);
   CURSOR C1 IS
          SELECT MYS_LVL_CODE, MYS_LVL_NAME, MYS_LVL_TYPE,
                 MYS_PARENT_LVL_CODE,
                 DECODE(P_INCL_ACNT, 'Y', MYS_MAIN_ACNT_CODE, '0'),
                 LS_LVL_SEQ, NVL(LVL_TOTAL_FLAG, 'N'),
                 SUM(MYS_YTD_BAL_1),
                 SUM(MYS_YR_OPEN_BAL_1),
                 SUM(MYS_ANN_BUD_1),
                 SUM(MYS_YTD_BAL_2),
                 SUM(MYS_YR_OPEN_BAL_2),
                 SUM(MYS_ANN_BUD_2),
                 SUM(MYS_YTD_BAL_3),
                 SUM(MYS_YR_OPEN_BAL_3),
                 SUM(MYS_ANN_BUD_3),
                 SUM(MYS_YTD_BAL_4),
                 SUM(MYS_YR_OPEN_BAL_4),
                 SUM(MYS_ANN_BUD_4),
                 SUM(MYS_YTD_BAL_5),
                 SUM(MYS_YR_OPEN_BAL_5),
                 SUM(MYS_ANN_BUD_5)
          FROM   FW_LEVEL, FM_COA_LEVEL, FW_MAIN_YEAR_SUM
          WHERE  MYS_KEY_NO = P_KEY_NO
          AND    MYS_FORMAT_ID = P_FORMAT_ID
          AND    LVL_FORMAT_ID = MYS_FORMAT_ID
          AND    LVL_CODE = MYS_LVL_CODE
          AND    LS_FORMAT_ID = LVL_FORMAT_ID
          AND    LS_LVL_CODE = LVL_CODE
          GROUP BY MYS_LVL_CODE, MYS_LVL_NAME, MYS_LVL_TYPE,
                   MYS_PARENT_LVL_CODE,
                   DECODE(P_INCL_ACNT, 'Y', MYS_MAIN_ACNT_CODE, '0'),
                   LS_LVL_SEQ, NVL(LVL_TOTAL_FLAG, 'N')
          ORDER  BY LS_LVL_SEQ,
                   DECODE(P_INCL_ACNT, 'Y', MYS_MAIN_ACNT_CODE, '0');
   CURSOR C2 IS
          SELECT MYS_LVL_CODE, '   TOTAL ' || MYS_LVL_NAME, MYS_LVL_TYPE,
                 MYS_PARENT_LVL_CODE,
                 NVL(LVL_TOTAL_FLAG, 'N'),
                 SUM(MYS_YTD_BAL_1),
                 SUM(MYS_YR_OPEN_BAL_1),
                 SUM(MYS_ANN_BUD_1),
                 SUM(MYS_YTD_BAL_2),
                 SUM(MYS_YR_OPEN_BAL_2),
                 SUM(MYS_ANN_BUD_2),
                 SUM(MYS_YTD_BAL_3),
                 SUM(MYS_YR_OPEN_BAL_3),
                 SUM(MYS_ANN_BUD_3),
                 SUM(MYS_YTD_BAL_4),
                 SUM(MYS_YR_OPEN_BAL_4),
                 SUM(MYS_ANN_BUD_4),
                 SUM(MYS_YTD_BAL_5),
                 SUM(MYS_YR_OPEN_BAL_5),
                 SUM(MYS_ANN_BUD_5)
          FROM   FM_COA_LEVEL, FW_MAIN_YEAR_SUM, FW_LEVEL
          WHERE  LS_FORMAT_ID = P_FORMAT_ID
          AND    LS_LVL_SEQ = PREV_STR
          AND    MYS_KEY_NO = P_KEY_NO
          AND    MYS_FORMAT_ID = LS_FORMAT_ID
          AND    MYS_LVL_CODE = LS_LVL_CODE
          AND    LVL_FORMAT_ID = MYS_FORMAT_ID
          AND    LVL_CODE = MYS_LVL_CODE
          GROUP BY MYS_LVL_CODE, '   TOTAL ' || MYS_LVL_NAME, MYS_LVL_TYPE,
                   MYS_PARENT_LVL_CODE,
                   LS_LVL_SEQ, NVL(LVL_TOTAL_FLAG, 'N');
  PROCEDURE INSERT_BLANK_REC IS
  BEGIN
     RECORD_SEQ := NVL(RECORD_SEQ,0) + 1;
     LVL_TYPE := T_LVL_TYPE;
     INSERT INTO FW_MAIN_YEAR_SUM_REP
            (MYS_KEY_NO, MYS_FORMAT_ID, MYS_LVL_SEQ, MYS_LVL_TYPE)
     VALUES (P_KEY_NO, P_FORMAT_ID, RECORD_SEQ, LVL_TYPE);
  END;
  PROCEDURE INSERT_HEAD IS
  BEGIN
     RECORD_SEQ := NVL(RECORD_SEQ,0) + 1;
     INSERT INTO FW_MAIN_YEAR_SUM_REP
            (MYS_KEY_NO, MYS_FORMAT_ID, MYS_LVL_CODE,
            MYS_LVL_NAME, MYS_LVL_TYPE, MYS_LVL_SEQ,
            MYS_PARENT_LVL_CODE)
     VALUES (P_KEY_NO, P_FORMAT_ID, T_LVL_CODE,
             T_LVL_NAME, T_LVL_TYPE, RECORD_SEQ,
             T_PARENT_LVL_CODE);
     INSERT_BLANK_REC;
  END;
  PROCEDURE INSERT_REC IS
     CURSOR C3 IS
       SELECT MAIN_ACNT_NAME
       FROM   FM_MAIN_ACCOUNT
       WHERE  MAIN_ACNT_CODE = T_MAIN_ACNT_CODE;
     C3_LVL_NAME	VARCHAR2(60);
     M_DIFF             NUMBER(2);
  BEGIN
     RECORD_SEQ := NVL(RECORD_SEQ,0) + 1;
     IF NVL(T_MAIN_ACNT_CODE, '0') != '0' THEN
        IF C3%ISOPEN THEN
           CLOSE C3;
        END IF;
        OPEN C3;
        FETCH C3 INTO C3_LVL_NAME;
        IF C3%FOUND THEN
             M_DIFF := LENGTH(T_LVL_NAME) - LENGTH(LTRIM(T_LVL_NAME));
             T_LVL_NAME := LPAD(C3_LVL_NAME, LENGTH(C3_LVL_NAME) + M_DIFF);
        END IF;
        CLOSE C3;
     END IF;
     INSERT INTO FW_MAIN_YEAR_SUM_REP
            (MYS_KEY_NO, MYS_FORMAT_ID, MYS_LVL_CODE,
            MYS_LVL_NAME, MYS_LVL_TYPE, MYS_LVL_SEQ,
            MYS_PARENT_LVL_CODE, MYS_MAIN_ACNT_CODE,
            MYS_YTD_BAL_1, MYS_YR_OPEN_BAL_1, MYS_ANN_BUD_1,
            MYS_YTD_BAL_2, MYS_YR_OPEN_BAL_2, MYS_ANN_BUD_2,
            MYS_YTD_BAL_3, MYS_YR_OPEN_BAL_3, MYS_ANN_BUD_3,
            MYS_YTD_BAL_4, MYS_YR_OPEN_BAL_4, MYS_ANN_BUD_4,
            MYS_YTD_BAL_5, MYS_YR_OPEN_BAL_5, MYS_ANN_BUD_5)
     VALUES (P_KEY_NO, P_FORMAT_ID,
            T_LVL_CODE, T_LVL_NAME, T_LVL_TYPE,
            RECORD_SEQ, T_PARENT_LVL_CODE,
            T_MAIN_ACNT_CODE,
            T_YTD_BAL_1, T_YR_OPEN_BAL_1, T_ANN_BUD_1,
            T_YTD_BAL_2, T_YR_OPEN_BAL_2, T_ANN_BUD_2,
            T_YTD_BAL_3, T_YR_OPEN_BAL_3, T_ANN_BUD_3,
            T_YTD_BAL_4, T_YR_OPEN_BAL_4, T_ANN_BUD_4,
            T_YTD_BAL_5, T_YR_OPEN_BAL_5, T_ANN_BUD_5);
  END;
  PROCEDURE PROCESS_TOTAL IS
  BEGIN
    IF C2%ISOPEN THEN
       CLOSE C2;
    END IF;
    OPEN C2;
    FETCH C2 INTO P_LVL_CODE, P_LVL_NAME, P_LVL_TYPE,
                  P_PARENT_LVL_CODE,
                  P_TOTAL_FLAG,
                  P_YTD_BAL_1, P_YR_OPEN_BAL_1, P_ANN_BUD_1,
                  P_YTD_BAL_2, P_YR_OPEN_BAL_2, P_ANN_BUD_2,
                  P_YTD_BAL_3, P_YR_OPEN_BAL_3, P_ANN_BUD_3,
                  P_YTD_BAL_4, P_YR_OPEN_BAL_4, P_ANN_BUD_4,
                  P_YTD_BAL_5, P_YR_OPEN_BAL_5, P_ANN_BUD_5;
    IF C2%FOUND AND P_TOTAL_FLAG = 'Y' THEN
       RECORD_SEQ := NVL(RECORD_SEQ,0) + 1;
       INSERT INTO FW_MAIN_YEAR_SUM_REP (
              MYS_KEY_NO, MYS_FORMAT_ID, MYS_LVL_CODE,
              MYS_LVL_NAME, MYS_LVL_TYPE, MYS_LVL_SEQ,
              MYS_PARENT_LVL_CODE,
              MYS_YTD_BAL_1, MYS_YR_OPEN_BAL_1, MYS_ANN_BUD_1,
              MYS_YTD_BAL_2, MYS_YR_OPEN_BAL_2, MYS_ANN_BUD_2,
              MYS_YTD_BAL_3, MYS_YR_OPEN_BAL_3, MYS_ANN_BUD_3,
              MYS_YTD_BAL_4, MYS_YR_OPEN_BAL_4, MYS_ANN_BUD_4,
              MYS_YTD_BAL_5, MYS_YR_OPEN_BAL_5, MYS_ANN_BUD_5)
       VALUES (P_KEY_NO, P_FORMAT_ID, P_LVL_CODE,
              P_LVL_NAME, P_LVL_TYPE, RECORD_SEQ,
              P_PARENT_LVL_CODE,
              P_YTD_BAL_1, P_YR_OPEN_BAL_1, P_ANN_BUD_1,
              P_YTD_BAL_2, P_YR_OPEN_BAL_2, P_ANN_BUD_2,
              P_YTD_BAL_3, P_YR_OPEN_BAL_3, P_ANN_BUD_3,
              P_YTD_BAL_4, P_YR_OPEN_BAL_4, P_ANN_BUD_4,
              P_YTD_BAL_5, P_YR_OPEN_BAL_5, P_ANN_BUD_5);
       INSERT_BLANK_REC;
    END IF;
    CLOSE C2;
    HEAD_FLAG := 'N';
END;
BEGIN
   DELETE FROM FW_MAIN_YEAR_SUM_REP
          WHERE MYS_KEY_NO = P_KEY_NO;
   PREV_STR := '';
   RECORD_SEQ := 0;
   HEAD_FLAG := 'N';
   FIRST_REC := 0;
   BLANK_REC_FLAG := 'N';
   IF C1%ISOPEN THEN
      CLOSE C1;
   END IF;
   OPEN C1;
LOOP
   FETCH C1 INTO TEMP_LVL_CODE, TEMP_LVL_NAME, TEMP_LVL_TYPE,
                 TEMP_PARENT_LVL_CODE,
                 TEMP_MAIN_ACNT_CODE,
                 TEMP_LVL_STR, TEMP_TOTAL_FLAG,
                 TEMP_YTD_BAL_1, TEMP_YR_OPEN_BAL_1, TEMP_ANN_BUD_1,
                 TEMP_YTD_BAL_2, TEMP_YR_OPEN_BAL_2, TEMP_ANN_BUD_2,
                 TEMP_YTD_BAL_3, TEMP_YR_OPEN_BAL_3, TEMP_ANN_BUD_3,
                 TEMP_YTD_BAL_4, TEMP_YR_OPEN_BAL_4, TEMP_ANN_BUD_4,
                 TEMP_YTD_BAL_5, TEMP_YR_OPEN_BAL_5, TEMP_ANN_BUD_5;
    IF FIRST_REC = 0 THEN
       IF C1%NOTFOUND THEN
          EXIT;
       END IF;
       FIRST_REC := 1;
    ELSE
      IF C1%NOTFOUND THEN
         INSERT_REC;
         EXIT;
      END IF;
      IF LENGTH(T_LVL_STR) > LENGTH(TEMP_LVL_STR) THEN
         INSERT_REC;
         INSERT_BLANK_REC;
	 PROCESS_TOTAL;
         LOOP
            PREV_STR := SUBSTR(PREV_STR, 1, LENGTH(PREV_STR)-3);
            IF LENGTH(PREV_STR) >= LENGTH(TEMP_LVL_STR) THEN
	       PROCESS_TOTAL;
            ELSE
               EXIT;
            END IF;
         END LOOP;
         BLANK_REC_FLAG := 'N';
      ELSIF LENGTH(T_LVL_STR) < LENGTH(TEMP_LVL_STR) THEN
            PREV_STR := T_LVL_STR;
            IF T_TOTAL_FLAG = 'Y' THEN
               IF BLANK_REC_FLAG = 'D' THEN
                  INSERT_BLANK_REC;
                  BLANK_REC_FLAG := 'N';
               END IF;
               INSERT_HEAD;
            END IF;
      ELSE
        BLANK_REC_FLAG := 'D';
        IF NVL(P_INCL_ACNT, 'N') = 'N' THEN
           INSERT_REC;
           IF NVL(SUBSTR(T_LVL_STR, 1, LENGTH(T_LVL_STR) - 3), '1') !=
              NVL(SUBSTR(TEMP_LVL_STR, 1, LENGTH(TEMP_LVL_STR) - 3), '2') THEN
                INSERT_BLANK_REC;
                BLANK_REC_FLAG := 'N';
           END IF;
        END IF;
        IF NVL(P_INCL_ACNT, 'N') = 'N' THEN
           NULL;
        ELSIF T_LVL_STR != TEMP_LVL_STR THEN
              INSERT_REC;
              INSERT_BLANK_REC;
              IF HEAD_FLAG = 'T' THEN
                 PROCESS_TOTAL;
                 PREV_STR := SUBSTR(PREV_STR, 1, LENGTH(PREV_STR)-3);
              END IF;
        ELSIF T_LVL_STR = TEMP_LVL_STR THEN
              IF T_TOTAL_FLAG = 'Y' AND HEAD_FLAG = 'N' THEN
                 INSERT_HEAD;
                 PREV_STR := T_LVL_STR;
                 HEAD_FLAG := 'T';
              END IF;
              INSERT_REC;
        END IF;
      END IF;
   END IF;
      SELECT TEMP_LVL_CODE, TEMP_LVL_NAME, TEMP_LVL_TYPE,
             TEMP_LVL_SEQ, TEMP_PARENT_LVL_CODE,
             TEMP_MAIN_ACNT_CODE,
             TEMP_LVL_STR, TEMP_TOTAL_FLAG,
             TEMP_YTD_BAL_1, TEMP_YR_OPEN_BAL_1, TEMP_ANN_BUD_1,
             TEMP_YTD_BAL_2, TEMP_YR_OPEN_BAL_2, TEMP_ANN_BUD_2,
             TEMP_YTD_BAL_3, TEMP_YR_OPEN_BAL_3, TEMP_ANN_BUD_3,
             TEMP_YTD_BAL_4, TEMP_YR_OPEN_BAL_4, TEMP_ANN_BUD_4,
             TEMP_YTD_BAL_5, TEMP_YR_OPEN_BAL_5, TEMP_ANN_BUD_5
      INTO   T_LVL_CODE, T_LVL_NAME, T_LVL_TYPE,
             T_LVL_SEQ, T_PARENT_LVL_CODE,
             T_MAIN_ACNT_CODE,
             T_LVL_STR, T_TOTAL_FLAG,
             T_YTD_BAL_1, T_YR_OPEN_BAL_1, T_ANN_BUD_1,
             T_YTD_BAL_2, T_YR_OPEN_BAL_2, T_ANN_BUD_2,
             T_YTD_BAL_3, T_YR_OPEN_BAL_3, T_ANN_BUD_3,
             T_YTD_BAL_4, T_YR_OPEN_BAL_4, T_ANN_BUD_4,
             T_YTD_BAL_5, T_YR_OPEN_BAL_5, T_ANN_BUD_5
      FROM   DUAL;
END LOOP;
   CLOSE C1;
   INSERT_BLANK_REC;
   IF PREV_STR IS NOT NULL THEN
      PROCESS_TOTAL;
   END IF;
   LOOP
      PREV_STR := SUBSTR(PREV_STR, 1, LENGTH(PREV_STR)-3);
      IF LENGTH(PREV_STR) > 0 THEN
	 PROCESS_TOTAL;
      ELSE
         EXIT;
      END IF;
   END LOOP;
END;
/
CREATE OR REPLACE PROCEDURE F_OS
                 (P_OST_KEY_NO      OUT      NUMBER) AS
BEGIN
      SELECT SEQ_OST_KEY_NO.NEXTVAL
      INTO   P_OST_KEY_NO
      FROM   SYS.DUAL;
END;
/
CREATE OR REPLACE PROCEDURE F_PDC_OS (P_POS_KEY_NO OUT NUMBER) AS
BEGIN
       SELECT SEQ_POS_KEY_NO.NEXTVAL
       INTO   P_POS_KEY_NO
       FROM   SYS.DUAL;
END;
/
CREATE OR REPLACE PROCEDURE F_PROC_DETAIL
                  (P_PDS_KEY_NO      OUT      NUMBER) AS
BEGIN
      SELECT SEQ_PDS_KEY_NO.NEXTVAL
      INTO   P_PDS_KEY_NO
      FROM   SYS.DUAL;
END;
/
CREATE OR REPLACE PROCEDURE F_SUPP_DETAIL
                 (P_SDET_KEY_NO OUT NUMBER) AS
BEGIN
       SELECT SEQ_SDET_KEY_NO.NEXTVAL
       INTO   P_SDET_KEY_NO
       FROM   SYS.DUAL;
END;
/
CREATE OR REPLACE PROCEDURE F_UPD_ACNT_BAL
                 (P_COMP_CODE        IN      VARCHAR2,
                  P_ACNT_YEAR        IN      NUMBER,
                  P_MAIN_ACNT_CODE   IN      VARCHAR2,
                  P_SUB_ACNT_CODE    IN      VARCHAR2,
                  P_DIVN_CODE        IN      VARCHAR2,
                  P_DEPT_CODE        IN      VARCHAR2,
                  P_ANLY_CODE_1      IN      VARCHAR2,
                  P_ANLY_CODE_2      IN      VARCHAR2,
                  P_CAL_YEAR         IN      NUMBER,
                  P_CAL_MONTH        IN      NUMBER,
                  P_CURR_CODE        IN      VARCHAR2,
                  P_LC_AMT           IN      NUMBER,
                  P_FC_AMT           IN      NUMBER,
                  P_DOC_DRCR_FLAG    IN      VARCHAR2,
                  P_POST_FLAG        IN      VARCHAR2,
                  P_ADD_SUB_FLAG     IN      VARCHAR2,
                  P_UID              IN      VARCHAR2,
                  P_ERR_NO           OUT     NUMBER) AS
/* Details of Additional flags :-
   Post Flag            : To specify whether to update the Unposted
                          amount or Posted amount (U/P).
   Add / Sub            : To specify whether the amount supplied is
                          to be added or subtracted (A/S). Subtraction
                          will not be done if Amount currently present
                          is less than the Amount to be subtracted */
CURSOR F_PRV_ACNT_BAL IS
       SELECT ABAL_LC_MTD_DR, ABAL_LC_MTD_CR, ABAL_FC_MTD_DR, ABAL_FC_MTD_CR,
              ABAL_LC_UNP_DR, ABAL_LC_UNP_CR, ABAL_FC_UNP_DR, ABAL_FC_UNP_CR
       FROM   FS_PRV_ACNT_BAL
       WHERE  ABAL_COMP_CODE = P_COMP_CODE
       AND    ABAL_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    NVL(ABAL_SUB_ACNT_CODE,'ZZZZZZZ') =
              NVL(P_SUB_ACNT_CODE,'ZZZZZZZ')
       AND    NVL(ABAL_DIVN_CODE,'ZZZZZZZ') =
              NVL(P_DIVN_CODE,'ZZZZZZZ')
       AND    NVL(ABAL_DEPT_CODE,'ZZZZZZZ') =
              NVL(P_DEPT_CODE,'ZZZZZZZ')
       AND    NVL(ABAL_ANLY_CODE_1,'ZZZZZZZ') =
              NVL(P_ANLY_CODE_1,'ZZZZZZZ')
       AND    NVL(ABAL_ANLY_CODE_2,'ZZZZZZZ') =
              NVL(P_ANLY_CODE_2,'ZZZZZZZ')
       AND    ABAL_CAL_YEAR = P_CAL_YEAR
       AND    ABAL_CAL_MONTH = P_CAL_MONTH
       AND    ABAL_ACNT_YEAR = P_ACNT_YEAR
       AND    NVL(ABAL_CURR_CODE,'ZZZZ') =
              NVL(P_CURR_CODE,'ZZZZ')
       FOR UPDATE OF ABAL_LC_MTD_DR, ABAL_LC_MTD_CR,
                     ABAL_FC_MTD_DR, ABAL_FC_MTD_CR,
                     ABAL_LC_UNP_DR, ABAL_LC_UNP_CR,
                     ABAL_FC_UNP_DR, ABAL_FC_UNP_CR;
CURSOR F_CUR_ACNT_BAL IS
       SELECT ABAL_LC_MTD_DR, ABAL_LC_MTD_CR, ABAL_FC_MTD_DR, ABAL_FC_MTD_CR,
              ABAL_LC_UNP_DR, ABAL_LC_UNP_CR, ABAL_FC_UNP_DR, ABAL_FC_UNP_CR
       FROM   FS_CUR_ACNT_BAL
       WHERE  ABAL_COMP_CODE = P_COMP_CODE
       AND    ABAL_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    NVL(ABAL_SUB_ACNT_CODE,'ZZZZZZZ') =
              NVL(P_SUB_ACNT_CODE,'ZZZZZZZ')
       AND    NVL(ABAL_DIVN_CODE,'ZZZZZZZ') =
              NVL(P_DIVN_CODE,'ZZZZZZZ')
       AND    NVL(ABAL_DEPT_CODE,'ZZZZZZZ') =
              NVL(P_DEPT_CODE,'ZZZZZZZ')
       AND    NVL(ABAL_ANLY_CODE_1,'ZZZZZZZ') =
              NVL(P_ANLY_CODE_1,'ZZZZZZZ')
       AND    NVL(ABAL_ANLY_CODE_2,'ZZZZZZZ') =
              NVL(P_ANLY_CODE_2,'ZZZZZZZ')
       AND    ABAL_CAL_YEAR = P_CAL_YEAR
       AND    ABAL_CAL_MONTH = P_CAL_MONTH
       AND    ABAL_ACNT_YEAR = P_ACNT_YEAR
       AND    NVL(ABAL_CURR_CODE,'ZZZZ') =
              NVL(P_CURR_CODE,'ZZZZ')
       FOR UPDATE OF ABAL_LC_MTD_DR, ABAL_LC_MTD_CR,
                     ABAL_FC_MTD_DR, ABAL_FC_MTD_CR,
                     ABAL_LC_UNP_DR, ABAL_LC_UNP_CR,
                     ABAL_FC_UNP_DR, ABAL_FC_UNP_CR;
P_CUR_ACNT_YEAR  NUMBER(2);
P_LC_MTD_DR      NUMBER(14,3);
P_LC_MTD_CR      NUMBER(14,3);
P_FC_MTD_DR      NUMBER(14,3);
P_FC_MTD_CR      NUMBER(14,3);
P_LC_UNP_DR      NUMBER(14,3);
P_LC_UNP_CR      NUMBER(14,3);
P_FC_UNP_DR      NUMBER(14,3);
P_FC_UNP_CR      NUMBER(14,3);
P_TEMP_POST_FLAG     VARCHAR2(1);
P_TEMP_DOC_DRCR_FLAG VARCHAR2(1);
P_TEMP_ADD_SUB_FLAG  VARCHAR2(1);
P_TEMP_LC_AMT        NUMBER(14,3);
P_TEMP_FC_AMT        NUMBER(14,3);
Q_ACNT_YEAR        NUMBER(14,3);
Q_MAIN_ACNT_CODE   VARCHAR2(6);
Q_SUB_ACNT_CODE    VARCHAR2(6);
Q_CAL_YEAR         NUMBER(4);
Q_CAL_MONTH        NUMBER(2);
Q_ERR_NO           NUMBER(6);
BEGIN
   P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(P_COMP_CODE);
   P_ERR_NO := 0;
   IF P_ACNT_YEAR IS NULL OR P_COMP_CODE IS NULL OR
      P_CAL_MONTH IS NULL OR P_CAL_YEAR IS NULL OR
      P_MAIN_ACNT_CODE IS NULL THEN
      RAISE_APPLICATION_ERROR(-20460,
            'Company or Main account or Year and month cannot be null') ;
   END IF;
   P_TEMP_ADD_SUB_FLAG := UPPER(P_ADD_SUB_FLAG);
   P_TEMP_POST_FLAG := UPPER(P_POST_FLAG);
   P_TEMP_DOC_DRCR_FLAG := UPPER(P_DOC_DRCR_FLAG);
   IF P_TEMP_ADD_SUB_FLAG NOT IN ('A','S') THEN
      RAISE_APPLICATION_ERROR(-20461,
            'Add / Subtract flag is not supplied') ;
   END IF;
   IF P_TEMP_POST_FLAG NOT IN ('P','U') THEN
      RAISE_APPLICATION_ERROR(-20462,
            'To update Posted / Unposted flag is not supplied') ;
   END IF;
   IF P_TEMP_DOC_DRCR_FLAG NOT IN ('D','C') THEN
      RAISE_APPLICATION_ERROR(-20463,
            'To debit / credit balances is not supplied') ;
   END IF;
   P_LC_MTD_DR := 0;
   P_FC_MTD_DR := 0;
   P_LC_MTD_CR := 0;
   P_LC_MTD_DR := 0;
   P_LC_UNP_DR := 0;
   P_FC_UNP_DR := 0;
   P_LC_UNP_CR := 0;
   P_LC_UNP_DR := 0;
   P_TEMP_LC_AMT := NVL(P_LC_AMT,0);
   P_TEMP_FC_AMT := NVL(P_FC_AMT,0);
   IF P_ACNT_YEAR = P_CUR_ACNT_YEAR THEN
        IF F_CUR_ACNT_BAL%ISOPEN THEN
             CLOSE F_CUR_ACNT_BAL;
        END IF;
        OPEN  F_CUR_ACNT_BAL;
        FETCH F_CUR_ACNT_BAL INTO P_LC_MTD_DR, P_LC_MTD_CR,
                                  P_FC_MTD_DR, P_FC_MTD_CR,
                                  P_LC_UNP_DR, P_LC_UNP_CR,
                                  P_FC_UNP_DR, P_FC_UNP_CR;
        IF F_CUR_ACNT_BAL%NOTFOUND THEN
             IF P_TEMP_ADD_SUB_FLAG = 'S' THEN
                CLOSE F_CUR_ACNT_BAL;
                RAISE_APPLICATION_ERROR(-20467,
                      'Cannot subtract from non-existing balances') ;
             END IF;
             P_LC_MTD_DR := 0;
             P_FC_MTD_DR := 0;
             P_LC_MTD_CR := 0;
             P_LC_MTD_DR := 0;
             P_LC_UNP_DR := 0;
             P_FC_UNP_DR := 0;
             P_LC_UNP_CR := 0;
             P_LC_UNP_DR := 0;
        END IF;
   ELSE
        IF F_PRV_ACNT_BAL%ISOPEN THEN
             CLOSE F_PRV_ACNT_BAL;
        END IF;
        OPEN  F_PRV_ACNT_BAL;
        FETCH F_PRV_ACNT_BAL INTO P_LC_MTD_DR, P_LC_MTD_CR,
                                  P_FC_MTD_DR, P_FC_MTD_CR,
                                  P_LC_UNP_DR, P_LC_UNP_CR,
                                  P_FC_UNP_DR, P_FC_UNP_CR;
        IF F_PRV_ACNT_BAL%NOTFOUND THEN
             IF P_TEMP_ADD_SUB_FLAG = 'S' THEN
                CLOSE F_PRV_ACNT_BAL;
                RAISE_APPLICATION_ERROR(-20467,
                      'Cannot subtract from non-existing balances') ;
             END IF;
             P_LC_MTD_DR := 0;
             P_FC_MTD_DR := 0;
             P_LC_MTD_CR := 0;
             P_LC_MTD_DR := 0;
             P_LC_UNP_DR := 0;
             P_FC_UNP_DR := 0;
             P_LC_UNP_CR := 0;
             P_LC_UNP_DR := 0;
        END IF;
   END IF;
   IF P_TEMP_POST_FLAG = 'P' THEN
        IF P_TEMP_DOC_DRCR_FLAG = 'C' THEN
           IF P_TEMP_ADD_SUB_FLAG = 'A' THEN
                 P_FC_MTD_CR  := NVL(P_FC_MTD_CR,0)  + NVL(P_TEMP_FC_AMT,0);
                 P_LC_MTD_CR  := NVL(P_LC_MTD_CR,0)  + NVL(P_TEMP_LC_AMT,0);
           ELSIF P_TEMP_ADD_SUB_FLAG = 'S' THEN
                 P_FC_MTD_CR  := NVL(P_FC_MTD_CR,0)  - NVL(P_TEMP_FC_AMT,0);
                 P_LC_MTD_CR  := NVL(P_LC_MTD_CR,0)  - NVL(P_TEMP_LC_AMT,0);
                 IF (NVL(P_FC_MTD_CR,0) < 0) OR
                    (NVL(P_LC_MTD_CR,0) < 0) THEN
                     IF P_ACNT_YEAR = P_CUR_ACNT_YEAR THEN
                        CLOSE F_CUR_ACNT_BAL;
                     ELSE
                        CLOSE F_PRV_ACNT_BAL;
                     END IF;
                     RAISE_APPLICATION_ERROR(-20466,
                           'Amount cannot be negative after subtraction') ;
                 END IF;
           END IF;
        ELSIF P_TEMP_DOC_DRCR_FLAG = 'D' THEN
           IF P_TEMP_ADD_SUB_FLAG = 'A' THEN
                 P_FC_MTD_DR  := NVL(P_FC_MTD_DR,0)  + NVL(P_TEMP_FC_AMT,0);
                 P_LC_MTD_DR  := NVL(P_LC_MTD_DR,0)  + NVL(P_TEMP_LC_AMT,0);
           ELSIF P_TEMP_ADD_SUB_FLAG = 'S' THEN
                 P_FC_MTD_DR  := NVL(P_FC_MTD_DR,0)  - NVL(P_TEMP_FC_AMT,0);
                 P_LC_MTD_DR  := NVL(P_LC_MTD_DR,0)  - NVL(P_TEMP_LC_AMT,0);
                 IF (P_FC_MTD_DR < 0) OR (P_LC_MTD_DR < 0) THEN
                     IF P_ACNT_YEAR = P_CUR_ACNT_YEAR THEN
                        CLOSE F_CUR_ACNT_BAL;
                     ELSE
                        CLOSE F_PRV_ACNT_BAL;
                     END IF;
                     RAISE_APPLICATION_ERROR(-20466,
                           'Amount cannot be negative after subtraction') ;
                 END IF;
           END IF;
        END IF;
   ELSIF P_TEMP_POST_FLAG = 'U' THEN
        IF P_TEMP_DOC_DRCR_FLAG = 'C' THEN
           IF P_TEMP_ADD_SUB_FLAG = 'A' THEN
                 P_FC_UNP_CR  := NVL(P_FC_UNP_CR,0)  + NVL(P_TEMP_FC_AMT,0);
                 P_LC_UNP_CR  := NVL(P_LC_UNP_CR,0)  + NVL(P_TEMP_LC_AMT,0);
           ELSIF P_TEMP_ADD_SUB_FLAG = 'S' THEN
                 P_FC_UNP_CR  := NVL(P_FC_UNP_CR,0)  - NVL(P_TEMP_FC_AMT,0);
                 P_LC_UNP_CR  := NVL(P_LC_UNP_CR,0)  - NVL(P_TEMP_LC_AMT,0);
                 IF (P_FC_UNP_CR < 0) OR (P_LC_UNP_CR < 0) THEN
                     IF P_ACNT_YEAR = P_CUR_ACNT_YEAR THEN
                        CLOSE F_CUR_ACNT_BAL;
                     ELSE
                        CLOSE F_PRV_ACNT_BAL;
                     END IF;
                     RAISE_APPLICATION_ERROR(-20466,
                           'Amount cannot be negative after subtraction') ;
                 END IF;
           END IF;
        ELSIF P_TEMP_DOC_DRCR_FLAG = 'D' THEN
           IF P_TEMP_ADD_SUB_FLAG = 'A' THEN
                 P_FC_UNP_DR  := NVL(P_FC_UNP_DR,0)  + NVL(P_TEMP_FC_AMT,0);
                 P_LC_UNP_DR  := NVL(P_LC_UNP_DR,0)  + NVL(P_TEMP_LC_AMT,0);
           ELSIF P_TEMP_ADD_SUB_FLAG = 'S' THEN
                 P_FC_UNP_DR  := NVL(P_FC_UNP_DR,0)  - NVL(P_TEMP_FC_AMT,0);
                 P_LC_UNP_DR  := NVL(P_LC_UNP_DR,0)  - NVL(P_TEMP_LC_AMT,0);
                 IF (P_FC_UNP_DR < 0) OR (P_LC_UNP_DR < 0) THEN
                     IF P_ACNT_YEAR = P_CUR_ACNT_YEAR THEN
                        CLOSE F_CUR_ACNT_BAL;
                     ELSE
                        CLOSE F_PRV_ACNT_BAL;
                     END IF;
                     RAISE_APPLICATION_ERROR(-20466,
                           'Amount cannot be negative after subtraction') ;
                 END IF;
           END IF;
        END IF;
   END IF;
   IF P_ACNT_YEAR = P_CUR_ACNT_YEAR THEN
        IF F_CUR_ACNT_BAL%NOTFOUND THEN
               INSERT INTO FS_CUR_ACNT_BAL
                      (ABAL_COMP_CODE, ABAL_ACNT_YEAR, ABAL_MAIN_ACNT_CODE,
                       ABAL_SUB_ACNT_CODE, ABAL_DIVN_CODE, ABAL_DEPT_CODE,
                       ABAL_ANLY_CODE_1, ABAL_ANLY_CODE_2, ABAL_CURR_CODE,
                       ABAL_CAL_YEAR, ABAL_CAL_MONTH,
                       ABAL_LC_UNP_DR, ABAL_LC_UNP_CR,
                       ABAL_FC_UNP_DR, ABAL_FC_UNP_CR, ABAL_LC_MTD_DR,
                       ABAL_LC_MTD_CR, ABAL_FC_MTD_DR, ABAL_FC_MTD_CR,
                       ABAL_CR_UID, ABAL_CR_DT)
               VALUES
                      (P_COMP_CODE, P_ACNT_YEAR, P_MAIN_ACNT_CODE,
                       P_SUB_ACNT_CODE, P_DIVN_CODE, P_DEPT_CODE,
                       P_ANLY_CODE_1, P_ANLY_CODE_2, P_CURR_CODE,
                       P_CAL_YEAR, P_CAL_MONTH,
                       P_LC_UNP_DR, P_LC_UNP_CR, P_FC_UNP_DR, P_FC_UNP_CR,
                       P_LC_MTD_DR, P_LC_MTD_CR, P_FC_MTD_DR, P_FC_MTD_CR,
                       P_UID, SYSDATE);
        ELSE
               UPDATE FS_CUR_ACNT_BAL
               SET    ABAL_LC_MTD_DR = P_LC_MTD_DR,
                      ABAL_LC_MTD_CR = P_LC_MTD_CR,
                      ABAL_FC_MTD_DR = P_FC_MTD_DR,
                      ABAL_FC_MTD_CR = P_FC_MTD_CR,
                      ABAL_LC_UNP_DR = P_LC_UNP_DR,
                      ABAL_LC_UNP_CR = P_LC_UNP_CR,
                      ABAL_FC_UNP_DR = P_FC_UNP_DR,
                      ABAL_FC_UNP_CR = P_FC_UNP_CR
               WHERE CURRENT OF F_CUR_ACNT_BAL;
        END IF;
        CLOSE F_CUR_ACNT_BAL;
     ELSE
        IF F_PRV_ACNT_BAL%NOTFOUND THEN
               INSERT INTO FS_PRV_ACNT_BAL
                      (ABAL_COMP_CODE, ABAL_ACNT_YEAR, ABAL_MAIN_ACNT_CODE,
                       ABAL_SUB_ACNT_CODE, ABAL_DIVN_CODE, ABAL_DEPT_CODE,
                       ABAL_ANLY_CODE_1, ABAL_ANLY_CODE_2, ABAL_CURR_CODE,
                       ABAL_CAL_YEAR, ABAL_CAL_MONTH,
                       ABAL_LC_UNP_DR, ABAL_LC_UNP_CR,
                       ABAL_FC_UNP_DR, ABAL_FC_UNP_CR, ABAL_LC_MTD_DR,
                       ABAL_LC_MTD_CR, ABAL_FC_MTD_DR, ABAL_FC_MTD_CR,
                       ABAL_CR_UID, ABAL_CR_DT)
               VALUES
                      (P_COMP_CODE, P_ACNT_YEAR, P_MAIN_ACNT_CODE,
                       P_SUB_ACNT_CODE, P_DIVN_CODE, P_DEPT_CODE,
                       P_ANLY_CODE_1, P_ANLY_CODE_2, P_CURR_CODE,
                       P_CAL_YEAR, P_CAL_MONTH,
                       P_LC_UNP_DR, P_LC_UNP_CR, P_FC_UNP_DR, P_FC_UNP_CR,
                       P_LC_MTD_DR, P_LC_MTD_CR, P_FC_MTD_DR, P_FC_MTD_CR,
                       P_UID, SYSDATE);
        ELSE
               UPDATE FS_PRV_ACNT_BAL
               SET    ABAL_LC_MTD_DR = P_LC_MTD_DR,
                      ABAL_LC_MTD_CR = P_LC_MTD_CR,
                      ABAL_FC_MTD_DR = P_FC_MTD_DR,
                      ABAL_FC_MTD_CR = P_FC_MTD_CR,
                      ABAL_LC_UNP_DR = P_LC_UNP_DR,
                      ABAL_LC_UNP_CR = P_LC_UNP_CR,
                      ABAL_FC_UNP_DR = P_FC_UNP_DR,
                      ABAL_FC_UNP_CR = P_FC_UNP_CR
               WHERE CURRENT OF F_PRV_ACNT_BAL;
        END IF;
        CLOSE F_PRV_ACNT_BAL;
     END IF;
     /*   Code for recursive posting of all years between date of document
          and  current accounting year
     */
     IF P_ACNT_YEAR != P_CUR_ACNT_YEAR THEN
        Q_ACNT_YEAR := P_ACNT_YEAR + 1;
        Q_MAIN_ACNT_CODE := P_MAIN_ACNT_CODE;
        Q_SUB_ACNT_CODE := P_SUB_ACNT_CODE;
        DECLARE
             CURSOR C1 IS
             SELECT MAIN_ACNT_TYPE
             FROM   FM_MAIN_ACCOUNT
             WHERE  MAIN_ACNT_CODE = P_MAIN_ACNT_CODE;
             CURSOR C2 IS
             SELECT CAY_MAIN_ACNT_CODE, CAY_SUB_ACNT_CODE
             FROM   FM_COMP_ACNT_YEAR
             WHERE  CAY_COMP_CODE = P_COMP_CODE
             AND    CAY_ACNT_YEAR = P_ACNT_YEAR;
             CURSOR C3 IS
             SELECT MIN(APER_CAL_YEAR)
             FROM   FM_ACNT_PERIOD
             WHERE  APER_COMP_CODE = P_COMP_CODE
             AND    APER_ACNT_YEAR = Q_ACNT_YEAR;
             P_ACNT_TYPE      VARCHAR2(1);
             Q_ACNT_TYPE      VARCHAR2(1);
        BEGIN
             IF C1%ISOPEN THEN
                CLOSE C1;
             END IF;
             OPEN C1;
             FETCH C1 INTO P_ACNT_TYPE;
             IF C1%NOTFOUND THEN
                CLOSE C1;
                RAISE_APPLICATION_ERROR(-20464,
                       'Invalid main account code') ;
             ELSE
                FETCH C1 INTO Q_ACNT_TYPE;
                IF C1%FOUND THEN
                   CLOSE C1;
                   RAISE_APPLICATION_ERROR(-20464,
                          'Invalid main account code') ;
                END IF;
             END IF;
             CLOSE C1;
             IF P_ACNT_TYPE IN ('I','E') THEN
                IF C2%ISOPEN THEN
                   CLOSE C2;
                END IF;
                OPEN C2;
                FETCH C2 INTO Q_MAIN_ACNT_CODE, Q_SUB_ACNT_CODE;
                IF C2%NOTFOUND OR
                   Q_MAIN_ACNT_CODE IS NULL THEN
                   CLOSE C2;
                   RAISE_APPLICATION_ERROR(-20464,
                          'Invalid main account code') ;
                ELSE
                   FETCH C2 INTO Q_MAIN_ACNT_CODE, Q_SUB_ACNT_CODE;
                   IF C2%FOUND THEN
                      CLOSE C2;
                      RAISE_APPLICATION_ERROR(-20464,
                             'Invalid main account code') ;
                   END IF;
                END IF;
                CLOSE C2;
              END IF;
              IF C3%ISOPEN THEN
                 CLOSE C3;
              END IF;
              OPEN C3;
              FETCH C3 INTO Q_CAL_YEAR;
              IF C3%NOTFOUND THEN
                 CLOSE C3;
                 RAISE_APPLICATION_ERROR(-20465,
                        'Accounting period not set-up for this company') ;
              END IF;
              CLOSE C3;
              Q_CAL_MONTH := 0;
        END;
        F_UPD_ACNT_BAL(P_COMP_CODE, Q_ACNT_YEAR, Q_MAIN_ACNT_CODE,
                       Q_SUB_ACNT_CODE, P_DIVN_CODE, P_DEPT_CODE,
                       P_ANLY_CODE_1, P_ANLY_CODE_2, Q_CAL_YEAR,
                       Q_CAL_MONTH, P_CURR_CODE, P_LC_AMT, P_FC_AMT,
                       P_DOC_DRCR_FLAG, P_POST_FLAG, P_ADD_SUB_FLAG,
                       P_UID, Q_ERR_NO);
        IF Q_ERR_NO != 0 THEN
           RETURN;
        END IF;
   END IF;
END;
/
CREATE OR REPLACE PROCEDURE F_UPD_BL_SUB_NAME
                 (P_SUB_ACNT_CODE    IN      VARCHAR2 ,
                  P_BL_SUB_ACNT_NAME    IN      VARCHAR2 ,
                  P_BL_SUB_ACNT_SHORT_NAME IN   VARCHAR2 ,
                  P_ERR_NO           OUT     NUMBER) AS
CURSOR MAIN_SUB IS
SELECT MS_BL_SUB_ACNT_NAME , MS_BL_SUB_ACNT_SHORT_NAME
FROM   FM_MAIN_SUB
WHERE  MS_SUB_ACNT_CODE = P_SUB_ACNT_CODE
AND    MS_MAIN_ACNT_CODE IS NOT NULL
FOR UPDATE OF MS_BL_SUB_ACNT_NAME , MS_BL_SUB_ACNT_SHORT_NAME ;
P_TEMP_BL_SUB_NAME         VARCHAR2(60) ;
P_TEMP_BL_SUB_SHORT_NAME   VARCHAR2(15) ;
BEGIN
        IF MAIN_SUB%ISOPEN THEN
             CLOSE MAIN_SUB;
        END IF;
        OPEN MAIN_SUB ;
        LOOP
        FETCH MAIN_SUB INTO P_TEMP_BL_SUB_NAME , P_TEMP_BL_SUB_SHORT_NAME ;
        IF MAIN_SUB%NOTFOUND THEN
           EXIT;
        END IF ;
        UPDATE FM_MAIN_SUB
        SET MS_BL_SUB_ACNT_NAME = P_BL_SUB_ACNT_NAME ,
        MS_BL_SUB_ACNT_SHORT_NAME = P_BL_SUB_ACNT_SHORT_NAME
        WHERE CURRENT OF MAIN_SUB ;
        END LOOP ;
        CLOSE MAIN_SUB ;
END;
/
CREATE OR REPLACE PROCEDURE F_UPD_COMP_ACNT_PERIOD
                  (P_COMP_CODE      IN      VARCHAR2,
                   P_UID            IN      VARCHAR2) AS
CURSOR FC_UPD_ACNT_PERIOD IS
       SELECT  APER_COMP_CODE, APER_ACNT_YEAR
       FROM    FM_ACNT_PERIOD
       ORDER BY APER_ACNT_YEAR DESC;
P_APER_COMP_CODE      VARCHAR2(3);
P_APER_ACNT_YEAR      NUMBER(2);
BEGIN
IF FC_UPD_ACNT_PERIOD%ISOPEN THEN
     CLOSE FC_UPD_ACNT_PERIOD;
END IF;
OPEN FC_UPD_ACNT_PERIOD;
FETCH FC_UPD_ACNT_PERIOD INTO P_APER_COMP_CODE, P_APER_ACNT_YEAR;
IF FC_UPD_ACNT_PERIOD%FOUND THEN
   INSERT INTO FM_ACNT_PERIOD
          SELECT P_COMP_CODE, APER_ACNT_YEAR, APER_CAL_YEAR,
                 APER_CAL_MONTH, APER_FRM_DT, APER_TO_DT, APER_QTLY,
                 '','',P_UID, SYSDATE
          FROM   FM_ACNT_PERIOD
          WHERE  APER_COMP_CODE = P_APER_COMP_CODE
          AND    APER_ACNT_YEAR = P_APER_ACNT_YEAR;
END IF;
CLOSE FC_UPD_ACNT_PERIOD;
END;
/
CREATE OR REPLACE PROCEDURE F_UPD_DOC_DT_CHANGE
                     (P_TH_COMP_CODE     IN        VARCHAR2,
                      P_TH_TRAN_CODE     IN        VARCHAR2,
                      P_TH_DOC_NO        IN        NUMBER,
                      P_TH_ACNT_YEAR     IN        NUMBER,
                      P_OLD_TH_DOC_DT    IN        DATE,
                      P_OLD_TH_DUE_DT    IN        DATE,
                      P_NEW_TH_DOC_DT    IN        DATE,
                      P_NEW_TH_DUE_DT    IN        DATE,
                      P_UID              IN        VARCHAR2,
                      P_ERR_NO           IN OUT    NUMBER) AS
P_OLD_ACNT_YEAR                      NUMBER(2);
P_OLD_CAL_YEAR                       NUMBER(4);
P_OLD_CAL_MONTH                      NUMBER(2);
P_NEW_ACNT_YEAR                      NUMBER(2);
P_NEW_CAL_YEAR                       NUMBER(4);
P_NEW_CAL_MONTH                      NUMBER(2);
P_CUR_ACNT_YEAR                      NUMBER(2);
P_TD_COMP_CODE                       VARCHAR2(3);
P_TD_SEQ_NO                          NUMBER(3);
P_TD_MAIN_ACNT_CODE                  VARCHAR2(6);
P_TD_SUB_ACNT_CODE                   VARCHAR2(6);
P_TD_DIVN_CODE                       VARCHAR2(6);
P_TD_DEPT_CODE                       VARCHAR2(6);
P_TD_ANLY_CODE_1                     VARCHAR2(6);
P_TD_ANLY_CODE_2                     VARCHAR2(6);
P_TD_CURR_CODE                       VARCHAR2(3);
P_TD_DOC_AMT                         NUMBER(14,3);
P_TD_DOC_DRCR_FLAG                   VARCHAR2(1);
P_TD_FC_AMT                          NUMBER(14,3);
P_TD_DOC_DUE_DT                      DATE;
P_OPEN_ENTRY_FLAG                    VARCHAR2(1);
P_NEW_DUE_DT                         DATE;
CURSOR SEL_TD IS
       SELECT TD_COMP_CODE, TD_SEQ_NO, TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE,
              TD_DIVN_CODE, TD_DEPT_CODE, TD_ANLY_CODE_1, TD_ANLY_CODE_2,
              TD_CURR_CODE, TD_DOC_AMT, TD_DOC_DRCR_FLAG, TD_FC_AMT,
              TD_DOC_DUE_DT
       FROM   FT_UNPOSTED_TRANS_DETAIL
       WHERE  (TD_COMP_CODE = P_TH_COMP_CODE)
       AND    (TD_ACNT_YEAR = P_TH_ACNT_YEAR)
       AND    (TD_TRAN_CODE = P_TH_TRAN_CODE)
       AND    (TD_DOC_NO    = P_TH_DOC_NO)
       FOR UPDATE OF TD_ACNT_YEAR, TD_DOC_DUE_DT, TD_CR_UID, TD_CR_DT;
CURSOR SEL_MAIN IS
       SELECT MAIN_OPEN_ENTRY_FLAG
       FROM   FM_MAIN_ACCOUNT
       WHERE  MAIN_ACNT_CODE = P_TD_MAIN_ACNT_CODE;
BEGIN
P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(P_TH_COMP_CODE);
P_ERR_NO := 0;
F_VAL_OPCL(P_TH_COMP_CODE, P_OLD_TH_DOC_DT, P_ERR_NO,
           P_OLD_CAL_YEAR, P_OLD_CAL_MONTH, P_OLD_ACNT_YEAR);
IF P_ERR_NO != 0 THEN
     RAISE_APPLICATION_ERROR(-20000 - P_ERR_NO, '');
END IF;
F_VAL_OPCL(P_TH_COMP_CODE, P_NEW_TH_DOC_DT, P_ERR_NO,
           P_NEW_CAL_YEAR, P_NEW_CAL_MONTH, P_NEW_ACNT_YEAR);
IF P_ERR_NO != 0 THEN
     RAISE_APPLICATION_ERROR(-20000 - P_ERR_NO, '');
END IF;
IF (P_OLD_TH_DOC_DT != P_NEW_TH_DOC_DT) OR
   (P_OLD_TH_DUE_DT != P_NEW_TH_DUE_DT) THEN
   IF SEL_TD%ISOPEN THEN
        CLOSE SEL_TD;
   END IF;
   OPEN SEL_TD;
   <<UPDATE_TRAN>>
   LOOP
        FETCH SEL_TD INTO
              P_TD_COMP_CODE, P_TD_SEQ_NO, P_TD_MAIN_ACNT_CODE,
              P_TD_SUB_ACNT_CODE, P_TD_DIVN_CODE, P_TD_DEPT_CODE,
              P_TD_ANLY_CODE_1, P_TD_ANLY_CODE_2, P_TD_CURR_CODE,
              P_TD_DOC_AMT, P_TD_DOC_DRCR_FLAG, P_TD_FC_AMT,
              P_TD_DOC_DUE_DT;
   EXIT WHEN SEL_TD%NOTFOUND;
        IF (P_NEW_CAL_MONTH != P_OLD_CAL_MONTH) OR
           (P_NEW_CAL_YEAR  != P_OLD_CAL_YEAR)  THEN
            F_UPD_ACNT_BAL (P_TD_COMP_CODE, P_OLD_ACNT_YEAR,
                      P_TD_MAIN_ACNT_CODE, P_TD_SUB_ACNT_CODE,
                      P_TD_DIVN_CODE, P_TD_DEPT_CODE,
                      P_TD_ANLY_CODE_1, P_TD_ANLY_CODE_2,
                      P_OLD_CAL_YEAR, P_OLD_CAL_MONTH,
                      P_TD_CURR_CODE, P_TD_DOC_AMT, P_TD_FC_AMT,
                      P_TD_DOC_DRCR_FLAG, 'U', 'S', P_UID, P_ERR_NO);
            IF P_ERR_NO != 0 THEN
                   RETURN;
            END IF;
            F_UPD_ACNT_BAL (P_TD_COMP_CODE, P_NEW_ACNT_YEAR,
                      P_TD_MAIN_ACNT_CODE, P_TD_SUB_ACNT_CODE,
                      P_TD_DIVN_CODE, P_TD_DEPT_CODE,
                      P_TD_ANLY_CODE_1, P_TD_ANLY_CODE_2,
                      P_NEW_CAL_YEAR, P_NEW_CAL_MONTH,
                      P_TD_CURR_CODE, P_TD_DOC_AMT, P_TD_FC_AMT,
                      P_TD_DOC_DRCR_FLAG, 'U', 'A', P_UID, P_ERR_NO);
            IF P_ERR_NO != 0 THEN
                   RETURN;
            END IF;
        END IF;
        IF P_TD_DOC_DUE_DT IS NULL THEN
             P_NEW_DUE_DT := NULL;
        ELSE
             IF P_TD_DOC_DUE_DT = P_OLD_TH_DUE_DT THEN
                P_NEW_DUE_DT := P_NEW_TH_DUE_DT;
             ELSE
                IF P_TD_DOC_DUE_DT > P_NEW_TH_DOC_DT THEN
                   P_NEW_DUE_DT := P_TD_DOC_DUE_DT;
                ELSE
                   P_NEW_DUE_DT := P_NEW_TH_DOC_DT +
                                   (P_TD_DOC_DUE_DT - P_OLD_TH_DOC_DT);
                END IF;
             END IF;
        END IF;
        IF P_NEW_ACNT_YEAR != P_OLD_ACNT_YEAR THEN
           /* Change in Accounting years */
           UPDATE FT_UNPOSTED_TRANS_DETAIL
           SET    TD_ACNT_YEAR = P_NEW_ACNT_YEAR,
                  TD_DOC_DUE_DT = P_NEW_DUE_DT,
                  TD_CR_UID     = P_UID,
                  TD_CR_DT      = SYSDATE
           WHERE  CURRENT OF SEL_TD;
        ELSE
             IF P_TD_DOC_DUE_DT IS NOT NULL THEN
                  IF P_TD_DOC_DUE_DT != P_NEW_DUE_DT THEN
                     UPDATE FT_UNPOSTED_TRANS_DETAIL
                     SET    TD_DOC_DUE_DT = P_NEW_DUE_DT,
                            TD_CR_UID     = P_UID,
                            TD_CR_DT      = SYSDATE
                     WHERE  CURRENT OF SEL_TD;
                  END IF;
             END IF;
        END IF;
        IF SEL_MAIN%ISOPEN THEN
             CLOSE SEL_MAIN;
        END IF;
        OPEN SEL_MAIN;
        FETCH SEL_MAIN INTO P_OPEN_ENTRY_FLAG;
        IF SEL_MAIN%FOUND THEN
             IF P_OPEN_ENTRY_FLAG = 'Y' THEN
                UPDATE FT_UNPOSTED_OS
                SET    OST_ACNT_YEAR = P_NEW_ACNT_YEAR,
                       OST_DOC_DT    = P_NEW_TH_DOC_DT,
                       OST_DUE_DT    = P_NEW_DUE_DT,
                       OST_CR_UID    = P_UID,
                       OST_CR_DT     = SYSDATE,
                       OST_DOC_CAL_YEAR = P_NEW_CAL_YEAR,
                       OST_DOC_CAL_MONTH = P_NEW_CAL_MONTH
                WHERE  OST_COMP_CODE = P_TH_COMP_CODE
                AND    OST_TRAN_CODE = P_TH_TRAN_CODE
                AND    OST_DOC_NO    = P_TH_DOC_NO
                AND    OST_SEQ_NO    = P_TD_SEQ_NO
                AND    OST_ACNT_YEAR = P_TH_ACNT_YEAR;
             END IF;
        END IF;
        CLOSE SEL_MAIN;
   END LOOP UPDATE_TRAN;
   CLOSE SEL_TD;
END IF;
END;
/
CREATE OR REPLACE PROCEDURE F_UPD_SUB_NAME
                 (P_SUB_ACNT_CODE    IN      VARCHAR2 ,
                  P_SUB_ACNT_NAME    IN      VARCHAR2 ,
                  P_SUB_ACNT_SHORT_NAME IN   VARCHAR2 ,
                  P_ERR_NO           OUT     NUMBER) AS
CURSOR MAIN_SUB IS
SELECT MS_SUB_ACNT_NAME , MS_SUB_ACNT_SHORT_NAME
FROM   FM_MAIN_SUB
WHERE  MS_SUB_ACNT_CODE = P_SUB_ACNT_CODE
AND    MS_MAIN_ACNT_CODE IS NOT NULL
FOR UPDATE OF MS_SUB_ACNT_NAME , MS_SUB_ACNT_SHORT_NAME ;
P_TEMP_SUB_NAME         VARCHAR2(60) ;
P_TEMP_SUB_SHORT_NAME   VARCHAR2(15) ;
BEGIN
        IF MAIN_SUB%ISOPEN THEN
             CLOSE MAIN_SUB;
        END IF;
        OPEN MAIN_SUB ;
        LOOP
        FETCH MAIN_SUB INTO P_TEMP_SUB_NAME , P_TEMP_SUB_SHORT_NAME ;
        IF MAIN_SUB%NOTFOUND THEN
           EXIT;
        END IF ;
        UPDATE FM_MAIN_SUB
        SET MS_SUB_ACNT_NAME = P_SUB_ACNT_NAME ,
        MS_SUB_ACNT_SHORT_NAME = P_SUB_ACNT_SHORT_NAME
        WHERE CURRENT OF MAIN_SUB ;
        END LOOP ;
        CLOSE MAIN_SUB ;
END;
/
CREATE OR REPLACE PROCEDURE F_VALID_COMB
                 (P_VCM_SEQ_NO      OUT      NUMBER) AS
BEGIN
      SELECT SEQ_VCM_SEQ_NO.NEXTVAL
      INTO   P_VCM_SEQ_NO
      FROM   SYS.DUAL;
END;
/
CREATE OR REPLACE PROCEDURE F_VAL_ACNT_ANLY_COMBN
                 (P_HEAD_NO          IN      NUMBER,
                  P_MAIN_ACNT_CODE   IN      VARCHAR2,
                  P_SUB_ACNT_CODE    IN      VARCHAR2,
                  P_ERR              OUT     NUMBER) AS
CURSOR F_VAL_ACNT_1 IS
       SELECT PARA_VALUE
       FROM FP_PARAMETER
       WHERE PARA_ID = 'UNIQUE.ANLY.1';
CURSOR F_VAL_ACNT_2 IS
       SELECT PARA_VALUE
       FROM FP_PARAMETER
       WHERE PARA_ID = 'UNIQUE.ANLY.2';
P_PARA_VALUE VARCHAR2(1);
BEGIN
          P_ERR := 0;
          IF P_HEAD_NO = 1 THEN
             IF F_VAL_ACNT_1%ISOPEN THEN
                CLOSE F_VAL_ACNT_1;
             END IF;
             OPEN F_VAL_ACNT_1;
             FETCH F_VAL_ACNT_1 INTO P_PARA_VALUE;
             CLOSE F_VAL_ACNT_1;
          ELSIF P_HEAD_NO = 2 THEN
              IF F_VAL_ACNT_2%ISOPEN THEN
                   CLOSE F_VAL_ACNT_2;
              END IF;
              OPEN F_VAL_ACNT_2;
              FETCH F_VAL_ACNT_2 INTO P_PARA_VALUE;
              CLOSE F_VAL_ACNT_2;
          END IF;
          IF P_PARA_VALUE = 'Y' AND
             (P_MAIN_ACNT_CODE IS NOT NULL OR
              P_SUB_ACNT_CODE IS NOT NULL) THEN
                 P_ERR := 22;
          END IF;
          IF P_PARA_VALUE != 'Y' AND
             (P_MAIN_ACNT_CODE IS NULL OR
              P_SUB_ACNT_CODE IS NULL) THEN
                 P_ERR := 23;
          END IF;
END;
/
CREATE OR REPLACE PROCEDURE F_VAL_ACNT_CURR_COMBN
                 (P_MAIN_ACNT_CODE     IN      VARCHAR2,
                  P_SUB_ACNT_CODE      IN      VARCHAR2,
                  P_ERR_NO             IN OUT  NUMBER) AS
BEGIN
      P_ERR_NO := 0;
      F_VAL_MAIN_IS_CTL_ACNT(P_MAIN_ACNT_CODE, P_ERR_NO);
      IF P_SUB_ACNT_CODE IS NULL  THEN
          /* Check for the Reverse i.e. Must be a Main Account */
          IF P_ERR_NO = 0 THEN
             RAISE_APPLICATION_ERROR(-20013,
                  'Sub account is mandatory') ;
          ELSE
             P_ERR_NO := 0;
          END IF;
      END IF;
END;
/
CREATE OR REPLACE PROCEDURE F_VAL_ANLY_DETAIL_LEVEL
                 (P_HEAD_NO          IN      NUMBER,
                  P_FORMAT_ID        IN      NUMBER,
                  P_LEVEL_CODE       IN      NUMBER,
                  P_ERR_NO           OUT     NUMBER) AS
CURSOR F_VAL_ANLY_DETAIL_LEVEL IS
       SELECT 1
       FROM   FM_ANLY_LEVEL
       WHERE  ALM_PARENT_CODE = P_LEVEL_CODE
       AND    ALM_HEAD_NO = P_HEAD_NO
       AND    ALM_FORMAT_ID = P_FORMAT_ID;
P_LOCAL NUMBER(1);
BEGIN
     IF F_VAL_ANLY_DETAIL_LEVEL%ISOPEN THEN
           CLOSE F_VAL_ANLY_DETAIL_LEVEL;
     END IF;
     OPEN F_VAL_ANLY_DETAIL_LEVEL;
     FETCH F_VAL_ANLY_DETAIL_LEVEL INTO P_LOCAL;
     IF F_VAL_ANLY_DETAIL_LEVEL%FOUND THEN
        RAISE_APPLICATION_ERROR(-20015,
                  'Analysis account format already exists') ;
     END IF;
     CLOSE F_VAL_ANLY_DETAIL_LEVEL;
END;
/
CREATE OR REPLACE PROCEDURE F_VAL_ANLY_LEVEL
                 (P_ALM_FORMAT_ID     IN       NUMBER,
                  P_ALM_LVL_CODE      IN       NUMBER,
                  P_INDIC             IN       VARCHAR2,
                  P_NAME              OUT      VARCHAR2,
                  P_ERR_NO            OUT      NUMBER) AS
CURSOR F_ANLY_LEVEL IS
       SELECT ALM_LVL_NAME, ALM_FRZ_FLAG
       FROM   FM_ANLY_LEVEL
       WHERE  ALM_FORMAT_ID  = P_ALM_FORMAT_ID
       AND    ALM_LVL_CODE = P_ALM_LVL_CODE;
P_FULL_NAME       VARCHAR2(60);
P_SHORT_NAME      VARCHAR2(15);
P_FRZ_FLAG        VARCHAR2(1);
P_SER_NO          NUMBER(2);
BEGIN
      P_SER_NO := 11;
      IF F_ANLY_LEVEL%ISOPEN THEN
         CLOSE F_ANLY_LEVEL;
      END IF;
      OPEN F_ANLY_LEVEL;
      FETCH F_ANLY_LEVEL INTO P_FULL_NAME,P_FRZ_FLAG;
      IF F_ANLY_LEVEL%NOTFOUND THEN
         P_NAME := '';
         RAISE_APPLICATION_ERROR(-20011,
             'Analysis level code does not exist in Analysis level master') ;
      ELSE
         IF P_FRZ_FLAG = 'Y' THEN
            RAISE_APPLICATION_ERROR(-20011,
                 'Analysis level code is frozen') ;
         ELSE
            P_ERR_NO := 0;
         END IF;
      P_NAME := P_FULL_NAME;
      END IF;
      CLOSE F_ANLY_LEVEL;
      RETURN;
END;
/
CREATE OR REPLACE PROCEDURE F_VAL_ANLY_PARENT_LEVEL
                 (P_HEAD_NO          IN      NUMBER,
                  P_FORMAT_ID        IN      NUMBER,
                  P_PARENT_CODE      IN      NUMBER,
                  P_ERR_NO           OUT     NUMBER) AS
CURSOR F_VAL_ANLY_PARENT_LEVEL IS
       SELECT 1
       FROM   FM_ACNT_ANLY_LEVEL
       WHERE  AAL_LVL_CODE = P_PARENT_CODE
       AND    AAL_HEAD_NO = P_HEAD_NO
       AND    AAL_FORMAT_ID = P_FORMAT_ID;
P_LOCAL NUMBER(1);
BEGIN
     IF F_VAL_ANLY_PARENT_LEVEL%ISOPEN THEN
           CLOSE F_VAL_ANLY_PARENT_LEVEL;
     END IF;
     OPEN F_VAL_ANLY_PARENT_LEVEL;
     FETCH F_VAL_ANLY_PARENT_LEVEL INTO P_LOCAL;
     IF F_VAL_ANLY_PARENT_LEVEL%FOUND THEN
        RAISE_APPLICATION_ERROR(-20011,
             'Analysis Account format already exists') ;
     END IF;
     CLOSE F_VAL_ANLY_PARENT_LEVEL;
END;
/
CREATE OR REPLACE PROCEDURE F_VAL_CHANGE_ACNT_TYPE
                 (P_MAIN_ACNT_CODE        IN       VARCHAR2,
                  P_ERR_NO                OUT      NUMBER)  AS
CURSOR F_VAL_CH_ACNT_TYPE IS
       SELECT 'X'
       FROM   FS_CUR_ACNT_BAL
       WHERE  ABAL_CAL_MONTH = 0
       AND    ABAL_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    (NVL(ABAL_LC_MTD_DR,0) != 0 OR
               NVL(ABAL_LC_MTD_CR,0) != 0);
P_OPEN_BAL_FLAG VARCHAR2(1);
BEGIN
       P_ERR_NO := 0;
       IF F_VAL_CH_ACNT_TYPE%ISOPEN THEN
           CLOSE F_VAL_CH_ACNT_TYPE;
       END IF;
       OPEN F_VAL_CH_ACNT_TYPE;
       FETCH F_VAL_CH_ACNT_TYPE INTO P_OPEN_BAL_FLAG;
       IF F_VAL_CH_ACNT_TYPE%FOUND THEN
         RAISE_APPLICATION_ERROR(-20003,
         'This account has opening balance, Cannot be Income/Expense account') ;
       END IF;
       CLOSE F_VAL_CH_ACNT_TYPE;
END;
/
CREATE OR REPLACE PROCEDURE F_VAL_CHANGE_MC_FLAG
                 (P_MAIN_ACNT_CODE      IN      VARCHAR2,
                  P_ERR_NO              OUT     NUMBER) AS
CURSOR F_VAL_CHANGE_MC_FLAG1 IS
       SELECT 1
       FROM   FM_MAIN_SUB
       WHERE  MS_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE;
CURSOR F_VAL_CHANGE_MC_FLAG2 IS
       SELECT 1
       FROM   FM_ACNT_CURR
       WHERE  ACURR_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE;
P_FOUND1    NUMBER;
P_SET       NUMBER;
BEGIN
       P_ERR_NO := 0;
       IF F_VAL_CHANGE_MC_FLAG1%ISOPEN THEN
           CLOSE F_VAL_CHANGE_MC_FLAG1;
       END IF;
       OPEN F_VAL_CHANGE_MC_FLAG1;
       FETCH F_VAL_CHANGE_MC_FLAG1 INTO P_FOUND1;
       IF F_VAL_CHANGE_MC_FLAG1%FOUND THEN
          RAISE_APPLICATION_ERROR(-20004,
             'Sub account exists, Cannot be made as main account') ;
          P_SET := 1;
       END IF;
       CLOSE F_VAL_CHANGE_MC_FLAG1;
       IF P_SET = 1 THEN
           RETURN;
       END IF;
       P_SET := 0;
       IF F_VAL_CHANGE_MC_FLAG2%ISOPEN  THEN
           CLOSE F_VAL_CHANGE_MC_FLAG2;
       END IF;
       OPEN F_VAL_CHANGE_MC_FLAG2;
       FETCH F_VAL_CHANGE_MC_FLAG2 INTO P_FOUND1;
       IF F_VAL_CHANGE_MC_FLAG2%FOUND THEN
          RAISE_APPLICATION_ERROR(-20005,
             'Currency exists, Cannot be made as main account') ;
          P_SET := 1;
       END IF;
       CLOSE F_VAL_CHANGE_MC_FLAG2;
END;
/
CREATE OR REPLACE PROCEDURE F_VAL_CHANGE_OE_FLAG
                 (P_MAIN_ACNT_CODE      IN      VARCHAR2,
                  P_ERR_NO              OUT     NUMBER) AS
CURSOR F_VAL_CHANGE_OE_FLAG1 IS
       SELECT 1
       FROM   FT_UNPOSTED_TRANS_DETAIL
       WHERE  TD_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE;
CURSOR F_VAL_CHANGE_OE_FLAG2 IS
       SELECT 1
       FROM   FT_CUR_TRANS_DETAIL
       WHERE  TD_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE;
CURSOR F_VAL_CHANGE_OE_FLAG3 IS
       SELECT 1
       FROM   FT_PRV_TRANS_DETAIL
       WHERE  TD_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE;
P_FOUND1    NUMBER;
P_SET       NUMBER;
BEGIN
       P_ERR_NO := 0;
       P_SET := 0;
       IF F_VAL_CHANGE_OE_FLAG1%ISOPEN THEN
           CLOSE F_VAL_CHANGE_OE_FLAG1;
       END IF;
       OPEN F_VAL_CHANGE_OE_FLAG1;
       FETCH F_VAL_CHANGE_OE_FLAG1 INTO P_FOUND1;
       IF F_VAL_CHANGE_OE_FLAG1%FOUND THEN
          RAISE_APPLICATION_ERROR(-20006,
             'Unposted balances exists') ;
           P_SET := 1;
       END IF;
       CLOSE F_VAL_CHANGE_OE_FLAG1;
       IF P_SET = 1 THEN
          RETURN;
       END IF;
       IF F_VAL_CHANGE_OE_FLAG2%ISOPEN THEN
           CLOSE F_VAL_CHANGE_OE_FLAG2;
       END IF;
       OPEN F_VAL_CHANGE_OE_FLAG2;
       FETCH F_VAL_CHANGE_OE_FLAG2 INTO P_FOUND1;
       IF F_VAL_CHANGE_OE_FLAG2%FOUND THEN
          RAISE_APPLICATION_ERROR(-20006,
             'Confirmed balances exists') ;
           P_SET := 1;
       END IF;
       CLOSE F_VAL_CHANGE_OE_FLAG2;
       IF P_SET = 1 THEN
          RETURN;
       END IF;
       IF F_VAL_CHANGE_OE_FLAG3%ISOPEN THEN
           CLOSE F_VAL_CHANGE_OE_FLAG3;
       END IF;
       OPEN F_VAL_CHANGE_OE_FLAG3;
       FETCH F_VAL_CHANGE_OE_FLAG3 INTO P_FOUND1;
       IF F_VAL_CHANGE_OE_FLAG3%FOUND THEN
          RAISE_APPLICATION_ERROR(-20007,
             'Balances exists in previous year') ;
       END IF;
       CLOSE F_VAL_CHANGE_OE_FLAG3;
END;
/
CREATE OR REPLACE PROCEDURE F_VAL_COA_LEVEL
                  (P_COA_LEVEL_FORMAT_ID     IN      NUMBER,
                  P_LEVEL_CODE               IN      NUMBER,
                  P_INDIC                    IN      VARCHAR2,
                  P_NAME                     OUT     VARCHAR2,
                  P_ERR_NO                   OUT     NUMBER) AS
CURSOR F_COA_LEVEL IS
       SELECT LVL_NAME, LVL_FRZ_FLAG
       FROM   FM_COA_LEVEL
       WHERE  LVL_FORMAT_ID = P_COA_LEVEL_FORMAT_ID
       AND    LVL_CODE = P_LEVEL_CODE;
P_FULL_NAME       VARCHAR2(60);
P_FRZ_FLAG        VARCHAR2(1);
P_SER_NO          NUMBER(2);
BEGIN
      P_SER_NO := 6;
      IF F_COA_LEVEL%ISOPEN THEN
         CLOSE F_COA_LEVEL;
      END IF;
      OPEN F_COA_LEVEL;
      FETCH F_COA_LEVEL INTO P_FULL_NAME,P_FRZ_FLAG;
      IF F_COA_LEVEL%NOTFOUND THEN
         P_NAME := '';
         RAISE_APPLICATION_ERROR(-20106,
             'COA Level code does not exists in COA Level master') ;
      ELSE
         P_NAME := P_FULL_NAME;
         IF P_FRZ_FLAG = 'Y' THEN
            RAISE_APPLICATION_ERROR(-20106,
                'COA Level code is frozen') ;
         ELSE
            P_ERR_NO := 0;
         END IF;
      END IF;
      CLOSE F_COA_LEVEL;
      RETURN;
END;
/
CREATE OR REPLACE PROCEDURE F_VAL_COMB
                 (P_COMP_CODE IN VARCHAR2,
                  P_DIVN_CODE IN VARCHAR2,
                  P_DEPT_CODE IN VARCHAR2,
                  P_MAIN_ACNT_CODE IN VARCHAR2,
                  P_SUB_ACNT_CODE IN VARCHAR2,
                  P_ANLY_CODE_1 IN VARCHAR2,
                  P_ANLY_CODE_2 IN VARCHAR2,
                  P_ERR_NO OUT NUMBER,
                  P_KEY OUT NUMBER) AS
   CURSOR CUR_VAL_COMB IS
         SELECT VCM_IE_CODE, VCM_SEQ_NO
         FROM FM_VALID_COMB
         WHERE VCM_LOW_COMP_CODE <= NVL(P_COMP_CODE,'  0')
         AND VCM_HIGH_COMP_CODE  >= NVL(P_COMP_CODE,'  0')
         AND VCM_LOW_DEPT_CODE <= NVL(P_DEPT_CODE,'     0')
         AND VCM_HIGH_DEPT_CODE >= NVL(P_DEPT_CODE,'     0')
         AND VCM_LOW_DIVN_CODE <= NVL(P_DIVN_CODE,'     0')
         AND VCM_HIGH_DIVN_CODE >= NVL(P_DIVN_CODE,'     0')
         AND VCM_LOW_MAIN_ACNT_CODE <= NVL(P_MAIN_ACNT_CODE,'     0')
         AND VCM_HIGH_MAIN_ACNT_CODE >= NVL(P_MAIN_ACNT_CODE,'     0')
         AND VCM_LOW_SUB_ACNT_CODE <= NVL(P_SUB_ACNT_CODE,'     0')
         AND VCM_HIGH_SUB_ACNT_CODE >= NVL(P_SUB_ACNT_CODE,'     0')
         AND VCM_LOW_ANLY_CODE_1 <= NVL(P_ANLY_CODE_1,'     0')
         AND VCM_HIGH_ANLY_CODE_1 >= NVL(P_ANLY_CODE_1,'     0')
         AND VCM_LOW_ANLY_CODE_2 <= NVL(P_ANLY_CODE_2,'     0')
         AND VCM_HIGH_ANLY_CODE_2 >= NVL(P_ANLY_CODE_2,'     0')
         ORDER BY VCM_IE_CODE;
 P_FLAG CHAR;
 P_SEQ_NO NUMBER;
BEGIN
     IF CUR_VAL_COMB%ISOPEN THEN
           CLOSE CUR_VAL_COMB;
     END IF;
     OPEN CUR_VAL_COMB;
     FETCH CUR_VAL_COMB INTO P_FLAG,P_SEQ_NO;
     IF CUR_VAL_COMB%FOUND THEN
         IF P_FLAG = 'E' THEN
            RAISE_APPLICATION_ERROR(-20275,
                'Invalid combination, Exclusion defined') ;
            P_KEY   := P_SEQ_NO;
         ELSE
            P_ERR_NO := 0;
         END IF;
     ELSE
        RAISE_APPLICATION_ERROR(-20274,
                'Invalid combination, No Inclusion defined') ;
     END IF;
     CLOSE CUR_VAL_COMB;
END;
/
CREATE OR REPLACE FUNCTION  F_VAL_DATA_TYPE
                           (P_DATA VARCHAR2,
                            P_TYPE    VARCHAR2)
                            RETURN NUMBER IS
P_NUM     NUMBER(30,15);
P_DT      DATE;
BEGIN
     IF P_TYPE = 'D' THEN
          P_DT := TO_DATE(P_DATA,'DD/MM/YYYY');
     ELSE
          IF P_TYPE = 'N' THEN
               P_NUM := TO_NUMBER(P_DATA);
          END IF;
     END IF;
     RETURN(0);
EXCEPTION
     WHEN OTHERS THEN
     RETURN(SQLCODE);
END;
/
CREATE OR REPLACE PROCEDURE F_VAL_DETAIL_LEVEL
                 (P_FORMAT_ID      IN      NUMBER,
                  P_LVL_CODE       IN      NUMBER ,
                  P_ERR_NO         OUT     NUMBER) AS
CURSOR F_VAL_DETAIL_LEVEL IS
       SELECT 1
       FROM   FM_COA_LEVEL
       WHERE  LVL_FORMAT_ID = P_FORMAT_ID
       AND    LVL_PARENT_CODE = P_LVL_CODE;
P_VALUE NUMBER;
BEGIN
      IF F_VAL_DETAIL_LEVEL%ISOPEN THEN
            CLOSE F_VAL_DETAIL_LEVEL;
      END IF;
      OPEN F_VAL_DETAIL_LEVEL;
      FETCH F_VAL_DETAIL_LEVEL INTO P_VALUE;
      IF F_VAL_DETAIL_LEVEL%FOUND THEN
         RAISE_APPLICATION_ERROR(-20014,
                 'COA Level code referenced by Parent code in COA Level') ;
      ELSE
         P_ERR_NO := 0;
      END IF;
      CLOSE F_VAL_DETAIL_LEVEL;
END;
/
CREATE OR REPLACE PROCEDURE F_VAL_DUP_ANLY_LEVEL
            (P_ALM_FORMAT_ID      IN      NUMBER,
             P_ALM_LVL_CODE       IN      VARCHAR2,
             P_ERR_NO             OUT     NUMBER) AS
     CURSOR F_ANLY_LEVEL IS
             SELECT 'X'
             FROM   FM_ANLY_LEVEL
             WHERE  ALM_FORMAT_ID  = P_ALM_FORMAT_ID
             AND    ALM_LVL_CODE = P_ALM_LVL_CODE;
     P_SER_NO         NUMBER(2);
     P_DUMMY          VARCHAR2(1);
BEGIN
       P_SER_NO := 11;
       IF F_ANLY_LEVEL%ISOPEN THEN
          CLOSE F_ANLY_LEVEL;
       END IF;
       OPEN F_ANLY_LEVEL;
       FETCH F_ANLY_LEVEL INTO P_DUMMY;
       IF F_ANLY_LEVEL%FOUND THEN
          RAISE_APPLICATION_ERROR(-20211,
                 'Duplicate Analysis level') ;
       ELSE
          P_ERR_NO := 0;
       END IF;
      CLOSE F_ANLY_LEVEL;
      RETURN;
  END;
/
CREATE OR REPLACE PROCEDURE F_VAL_DUP_CUST
            (P_CUST_CODE      IN      VARCHAR2,
             P_ERR_NO         OUT     NUMBER) AS
     CURSOR F_CUST IS
             SELECT 'X'
             FROM   FM_CUSTOMER
             WHERE  CUST_CODE = P_CUST_CODE;
     P_SER_NO         NUMBER(2);
     P_DUMMY          VARCHAR2(1);
BEGIN
       P_SER_NO := 15;
       IF F_CUST%ISOPEN THEN
           CLOSE F_CUST;
       END IF;
       OPEN F_CUST;
       FETCH F_CUST INTO P_DUMMY;
       IF F_CUST%FOUND THEN
          RAISE_APPLICATION_ERROR(-20215,
                 'Duplicate Customer code') ;
       ELSE
          P_ERR_NO := 0;
       END IF;
       CLOSE F_CUST;
       RETURN;
END;
/
CREATE OR REPLACE PROCEDURE F_VAL_DUP_DOC
                 (P_COMP_CODE    IN      VARCHAR2,
                  P_ACNT_YEAR    IN      NUMBER ,
                  P_TRAN_CODE    IN      VARCHAR2 ,
                  P_DOC_NO       IN      NUMBER ,
                  P_ERR_NO        OUT    NUMBER) AS
P_CUR_ACNT_YEAR        NUMBER(2);
P_DUMMY                CHAR(1);
CURSOR SEL_CUR_TRAN IS
       SELECT 'X'
       FROM   FT_CUR_TRANS_HEADER
       WHERE  TH_COMP_CODE = P_COMP_CODE
       AND    TH_ACNT_YEAR = P_ACNT_YEAR
       AND    TH_TRAN_CODE = P_TRAN_CODE
       AND    TH_DOC_NO    = P_DOC_NO;
CURSOR SEL_PRV_TRAN IS
       SELECT 'X'
       FROM   FT_PRV_TRANS_HEADER
       WHERE  TH_COMP_CODE = P_COMP_CODE
       AND    TH_ACNT_YEAR = P_ACNT_YEAR
       AND    TH_TRAN_CODE = P_TRAN_CODE
       AND    TH_DOC_NO    = P_DOC_NO;
CURSOR SEL_UNP_TRAN IS
       SELECT 'X'
       FROM   FT_UNPOSTED_TRANS_HEADER
       WHERE  TH_COMP_CODE = P_COMP_CODE
       AND    TH_ACNT_YEAR = P_ACNT_YEAR
       AND    TH_TRAN_CODE = P_TRAN_CODE
       AND    TH_DOC_NO    = P_DOC_NO;
BEGIN
P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(P_COMP_CODE);
P_ERR_NO := 0;
IF P_CUR_ACNT_YEAR = -1 THEN
   RAISE_APPLICATION_ERROR(-20468, 'Invalid Current Year') ;
END IF;
IF SEL_UNP_TRAN%ISOPEN THEN
     CLOSE SEL_UNP_TRAN;
END IF;
OPEN SEL_UNP_TRAN;
FETCH SEL_UNP_TRAN INTO P_DUMMY;
IF SEL_UNP_TRAN%FOUND THEN
   CLOSE SEL_UNP_TRAN;
   RAISE_APPLICATION_ERROR(-20469, 'Unposted transactions exists') ;
END IF;
CLOSE SEL_UNP_TRAN;
IF P_ACNT_YEAR = P_CUR_ACNT_YEAR THEN
    IF SEL_CUR_TRAN%ISOPEN THEN
         CLOSE SEL_CUR_TRAN;
    END IF;
    OPEN SEL_CUR_TRAN;
    FETCH SEL_CUR_TRAN INTO P_DUMMY;
    IF SEL_CUR_TRAN%FOUND THEN
       RAISE_APPLICATION_ERROR(-20470, 'Confirmed transaction exists') ;
    END IF;
    CLOSE SEL_CUR_TRAN;
ELSE
    IF SEL_PRV_TRAN%ISOPEN THEN
         CLOSE SEL_PRV_TRAN;
    END IF;
    OPEN SEL_PRV_TRAN;
    FETCH SEL_PRV_TRAN INTO P_DUMMY;
    IF SEL_PRV_TRAN%FOUND THEN
       RAISE_APPLICATION_ERROR(-20470,
               'Confirmed Previous Year transactions exists') ;
    END IF;
    CLOSE SEL_PRV_TRAN;
END IF;
END;
/
CREATE OR REPLACE PROCEDURE F_VAL_DUP_SUPP
            (P_SUPP_CODE      IN      VARCHAR2,
             P_ERR_NO         OUT     NUMBER) AS
     CURSOR F_SUPP IS
        SELECT 'X'
        FROM   FM_SUPPLIER
        WHERE  SUPP_CODE = P_SUPP_CODE;
     P_SER_NO         NUMBER(2);
     P_DUMMY          VARCHAR2(1);
BEGIN
       P_SER_NO := 16;
       IF F_SUPP%ISOPEN THEN
          CLOSE F_SUPP;
       END IF;
       CLOSE F_SUPP;
       FETCH F_SUPP INTO P_DUMMY;
       IF F_SUPP%FOUND THEN
          RAISE_APPLICATION_ERROR(-20216,
                  'Duplicate supplier code') ;
       ELSE
          P_ERR_NO := 0;
       END IF;
       CLOSE F_SUPP;
       RETURN;
END;
/
CREATE OR REPLACE PROCEDURE F_VAL_MAIN_ACTY
                 (P_ACTY_CODE_1      IN      VARCHAR2,
                  P_ACTY_CODE_2      IN      VARCHAR2,
                  P_ERR              OUT     NUMBER) AS
BEGIN
     P_ERR := 0;
     IF (NVL(P_ACTY_CODE_1,'     0') = NVL(P_ACTY_CODE_2,'     0')) AND
        P_ACTY_CODE_1 IS NOT NULL THEN
             P_ERR := 20;
     END IF;
     IF P_ACTY_CODE_1 IS NULL AND P_ACTY_CODE_2 IS NOT NULL THEN
             P_ERR := 21;
     END IF;
END;
/
CREATE OR REPLACE PROCEDURE F_VAL_MAIN_IS_CTL_ACNT
                 (P_MAIN_ACNT_CODE      IN      VARCHAR2,
                  P_ERR_NO              OUT     NUMBER) AS
CURSOR F_VAL_MAIN_IS_CTL_ACNT IS
       SELECT 1
       FROM FM_MAIN_ACCOUNT
       WHERE MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND MAIN_CTL_ACNT_FLAG = 'C';
P_LOCAL NUMBER;
BEGIN
     IF F_VAL_MAIN_IS_CTL_ACNT%ISOPEN THEN
           CLOSE F_VAL_MAIN_IS_CTL_ACNT;
     END IF;
     OPEN F_VAL_MAIN_IS_CTL_ACNT;
     FETCH F_VAL_MAIN_IS_CTL_ACNT INTO P_LOCAL;
     IF F_VAL_MAIN_IS_CTL_ACNT%NOTFOUND THEN
        P_ERR_NO := 12;
     ELSE
        P_ERR_NO := 0;
     END IF;
     CLOSE F_VAL_MAIN_IS_CTL_ACNT;
END;
/
CREATE OR REPLACE PROCEDURE F_VAL_MAIN_SUB_COMBN
                 (P_MAIN_ACNT_CODE     IN      VARCHAR2,
                  P_SUB_ACNT_CODE      IN      VARCHAR2,
                  P_ERR_NO             IN OUT  NUMBER) AS
BEGIN
      P_ERR_NO := 0;
      F_VAL_MAIN_IS_CTL_ACNT(P_MAIN_ACNT_CODE, P_ERR_NO);
      IF P_SUB_ACNT_CODE IS NULL  THEN
          /* Check for the Reverse i.e. Must be a Main Account */
          IF P_ERR_NO = 0 THEN
             RAISE_APPLICATION_ERROR(-20026,
                   'Sub account code is mandatory') ;
          ELSE
             P_ERR_NO := 0;
          END IF;
      END IF;
END;
/
CREATE OR REPLACE PROCEDURE F_VAL_NARRATION
                 (P_TRAN_CODE    IN      VARCHAR2,
                  P_DESC         IN      VARCHAR2 ,
                  P_ERR_NO       IN OUT     NUMBER) AS
P_DATA              VARCHAR2(2000);
P_DATA_TYPE         VARCHAR2(1);
P_LENGTH            NUMBER(2);
P_START_POSN        NUMBER(4);
CURSOR F_SEL_NARRN_DEFN IS
       SELECT NARR_TYPE, NARR_LENGTH
       FROM   FM_NARRATION_DEFN
       WHERE  NARR_TRAN_CODE = P_TRAN_CODE
       ORDER BY NARR_SEQ_NO;
BEGIN
    IF F_SEL_NARRN_DEFN%ISOPEN THEN
           CLOSE F_SEL_NARRN_DEFN;
    END IF;
    OPEN F_SEL_NARRN_DEFN;
    P_START_POSN := 1;
    P_ERR_NO := 0;
    <<NARRN_CHK>>
    LOOP
         FETCH F_SEL_NARRN_DEFN INTO P_DATA_TYPE, P_LENGTH;
    EXIT WHEN F_SEL_NARRN_DEFN%NOTFOUND;
         P_DATA := RTRIM(LTRIM(SUBSTR(P_DESC,P_START_POSN,P_LENGTH)));
         IF P_DATA IS NOT NULL THEN
              P_ERR_NO := F_VAL_DATA_TYPE(P_DATA, P_DATA_TYPE);
         END IF;
         IF P_ERR_NO != 0 THEN
              EXIT;
         END IF;
         P_START_POSN := P_START_POSN + P_LENGTH;
    END LOOP NARRN_CHK;
   CLOSE F_SEL_NARRN_DEFN;
END;
/
CREATE OR REPLACE PROCEDURE F_VAL_NO_TRAN_EXIST
                  (P_TRAN_CODE      IN      VARCHAR2,
                   P_FLAG           IN      VARCHAR2,
                   P_ERR_NO         OUT     NUMBER) AS
CURSOR F_VAL_CUR1 IS
       SELECT 1
       FROM FT_UNPOSTED_TRANS_DETAIL
       WHERE TD_TRAN_CODE = P_TRAN_CODE;
CURSOR F_VAL_CUR2 IS
       SELECT 1
       FROM FT_CUR_TRANS_DETAIL
       WHERE TD_TRAN_CODE = P_TRAN_CODE;
CURSOR F_VAL_CUR3 IS
       SELECT 1
       FROM FT_PRV_TRANS_DETAIL
       WHERE TD_TRAN_CODE = P_TRAN_CODE;
P_NUMBER NUMBER;
BEGIN
        P_ERR_NO := 0;
        P_NUMBER := 0;
        IF P_FLAG = 'U' OR P_FLAG = 'B' THEN
            IF F_VAL_CUR1%ISOPEN THEN
                   CLOSE F_VAL_CUR1;
            END IF;
            OPEN F_VAL_CUR1;
            FETCH F_VAL_CUR1 INTO P_NUMBER;
            IF F_VAL_CUR1%FOUND THEN
               RAISE_APPLICATION_ERROR(-20024,
                     'Unposted transactions exists') ;
            END IF;
            CLOSE F_VAL_CUR1;
        END IF;
        IF (P_FLAG = 'P' OR P_FLAG = 'B') AND (NVL(P_NUMBER,0) = 0 ) THEN
             IF F_VAL_CUR2%ISOPEN THEN
                   CLOSE F_VAL_CUR2;
             END IF;
             OPEN F_VAL_CUR2;
             FETCH F_VAL_CUR2 INTO P_NUMBER;
             IF F_VAL_CUR2%FOUND THEN
                RAISE_APPLICATION_ERROR(-20025,
                     'Confirmed transactions exists') ;
             ELSE
                 IF F_VAL_CUR3%ISOPEN THEN
                     CLOSE F_VAL_CUR3;
                 END IF;
                 OPEN F_VAL_CUR3;
                 FETCH F_VAL_CUR3 INTO P_NUMBER;
                 IF F_VAL_CUR3%FOUND THEN
                    RAISE_APPLICATION_ERROR(-20025,
                         'Confirmed previous year transactions exists') ;
                 END IF;
                 CLOSE F_VAL_CUR3;
             END IF;
             CLOSE F_VAL_CUR2;
        END IF;
END;
/
CREATE OR REPLACE PROCEDURE F_VAL_OPCL
                 (P_COMP_CODE      IN       VARCHAR2,
                  P_DT             IN       DATE,
                  P_ERR_NO         OUT      NUMBER,
                  P_CAL_YEAR       OUT      NUMBER,
                  P_CAL_MONTH      OUT      NUMBER,
                  P_ACNT_YEAR      OUT      NUMBER) AS
CURSOR F_OPCL IS
       SELECT APER_CLO_DT, APER_CAL_YEAR,
              APER_CAL_MONTH, APER_ACNT_YEAR
       FROM   FM_ACNT_PERIOD
       WHERE  APER_FRM_DT <= P_DT
       AND    APER_TO_DT >= P_DT
       AND    APER_COMP_CODE = P_COMP_CODE;
P_CLO_DATE              DATE;
BEGIN
       IF F_OPCL%ISOPEN THEN
           CLOSE F_OPCL;
       END IF;
       OPEN F_OPCL;
       FETCH F_OPCL INTO P_CLO_DATE, P_CAL_YEAR, P_CAL_MONTH, P_ACNT_YEAR;
       IF F_OPCL%NOTFOUND THEN
          P_ERR_NO := 251;
          P_CAL_YEAR := NULL;
          P_CAL_MONTH := NULL;
          P_ACNT_YEAR := NULL;
          RAISE_APPLICATION_ERROR(-20251,
                'Accounting period not defined') ;
       ELSE
            IF P_CLO_DATE IS NULL THEN
               P_ERR_NO := 0;
            ELSE
               P_CAL_YEAR := NULL;
               P_CAL_MONTH := NULL;
               P_ACNT_YEAR := NULL;
               RAISE_APPLICATION_ERROR(-20252,
                     'Accounting period is closed') ;
            END IF;
       END IF;
       CLOSE F_OPCL;
       RETURN;
END;
/
CREATE OR REPLACE PROCEDURE F_VAL_PARENT_LEVEL
                 (P_LVL_FORMAT_ID      IN      NUMBER,
                  P_LVL_PARENT_CODE    IN      NUMBER,
                  P_ERR_NO             OUT     NUMBER) AS
CURSOR F_VAL_PARENT_LEVEL IS
       SELECT 'X'
       FROM   FM_COA_ACNT_FORMAT
       WHERE  CAF_FORMAT_ID = P_LVL_FORMAT_ID
       AND    CAF_LVL_CODE = P_LVL_PARENT_CODE;
P_MAIN_ACNT_FLAG      VARCHAR2(1);
BEGIN
    P_ERR_NO := 0;
    IF F_VAL_PARENT_LEVEL%ISOPEN THEN
        CLOSE F_VAL_PARENT_LEVEL;
    END IF;
    OPEN F_VAL_PARENT_LEVEL;
    FETCH F_VAL_PARENT_LEVEL INTO P_MAIN_ACNT_FLAG;
    IF F_VAL_PARENT_LEVEL%FOUND THEN
       RAISE_APPLICATION_ERROR(-20002,
             'Has sub levels defined, Cannot have main accounts under it') ;
    ELSE
       P_ERR_NO := 0;
    END IF;
    CLOSE F_VAL_PARENT_LEVEL;
END;
/
CREATE OR REPLACE PROCEDURE F_VAL_SUB_ACNT
                 (P_MAIN_ACNT_CODE     IN      VARCHAR2,
                  P_SUB_ACNT_CODE      IN      VARCHAR2,
                  P_INDIC              IN      VARCHAR2,
                  P_NAME               OUT     VARCHAR2,
                  P_ERR_NO             OUT     NUMBER) AS
CURSOR F_SUB_ACNT1 IS
       SELECT SUB_ACNT_NAME, SUB_ACNT_SHORT_NAME, SUB_FRZ_FLAG
       FROM   FM_SUB_ACCOUNT
       WHERE  SUB_ACNT_CODE = P_SUB_ACNT_CODE;
CURSOR F_SUB_ACNT2 IS
       SELECT MS_SUB_ACNT_NAME, MS_SUB_ACNT_SHORT_NAME , SUB_FRZ_FLAG
       FROM   FM_MAIN_SUB, FM_SUB_ACCOUNT
       WHERE  MS_SUB_ACNT_CODE = P_SUB_ACNT_CODE
       AND    MS_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE
       AND    SUB_ACNT_CODE = MS_SUB_ACNT_CODE;
P_FULL_NAME       VARCHAR2(60);
P_SHORT_NAME      VARCHAR2(15);
P_FRZ_FLAG        VARCHAR2(1);
P_SER_NO          NUMBER(2);
BEGIN
      P_SER_NO := 8;
      IF P_MAIN_ACNT_CODE IS NULL THEN
         IF F_SUB_ACNT1%ISOPEN THEN
            CLOSE F_SUB_ACNT1;
         END IF;
         OPEN F_SUB_ACNT1;
         FETCH F_SUB_ACNT1 INTO P_FULL_NAME,P_SHORT_NAME,P_FRZ_FLAG;
         IF F_SUB_ACNT1%NOTFOUND THEN
            P_NAME := '';
            RAISE_APPLICATION_ERROR(-20108,
                  'Sub account does not exists in sub account master') ;
         ELSE
            IF P_FRZ_FLAG = 'Y' THEN
               RAISE_APPLICATION_ERROR(-20158,
                     'Sub account code is frozen') ;
            ELSE
               P_ERR_NO := 0;
            END IF;
            IF P_INDIC = 'N' THEN
                 P_NAME := P_FULL_NAME;
            ELSE
                 P_NAME := P_SHORT_NAME;
            END IF;
         END IF;
         CLOSE F_SUB_ACNT1;
      ELSE
         IF F_SUB_ACNT2%ISOPEN THEN
            CLOSE F_SUB_ACNT2;
         END IF;
         OPEN F_SUB_ACNT2;
         FETCH F_SUB_ACNT2 INTO P_FULL_NAME,P_SHORT_NAME, P_FRZ_FLAG;
         IF F_SUB_ACNT2%NOTFOUND THEN
            P_NAME := '';
            RAISE_APPLICATION_ERROR(-20108,
                  'Sub account does not exists in sub account master') ;
         ELSE
            IF P_FRZ_FLAG = 'Y' THEN
               RAISE_APPLICATION_ERROR(-20108,
                     'Sub account code is frozen') ;
            ELSE
               P_ERR_NO := 0;
            END IF;
            IF P_INDIC = 'N' THEN
                P_NAME := P_FULL_NAME;
            ELSE
                P_NAME := P_SHORT_NAME;
            END IF;
         END IF;
         CLOSE F_SUB_ACNT2;
      END IF;
      RETURN;
END;
/
CREATE OR REPLACE PROCEDURE  F_VAL_SUB_ACNT_NAME
                 (P_SUB_ACNT_CODE           IN      VARCHAR2,
                  P_SUB_ACNT_NAME           IN      VARCHAR2,
                  P_SUB_ACNT_SHORT_NAME     IN      VARCHAR2,
                  P_ERR_NO                  OUT     NUMBER) AS
CURSOR F_PARA IS
       SELECT SUBSTR(PARA_VALUE,1,1)
       FROM   FP_PARAMETER
       WHERE  PARA_ID = 'UNIQUE.SUBACNT';
P_NAME1        VARCHAR2(60);
P_NAME2        VARCHAR2(60);
P_ERR          NUMBER;
P_PARA_VALUE   VARCHAR2(1);
P_INDIC        VARCHAR2(1);
BEGIN
     P_ERR_NO := 0;
     IF F_PARA%ISOPEN THEN
           CLOSE F_PARA;
     END IF;
     OPEN F_PARA;
     FETCH F_PARA INTO P_PARA_VALUE;
     IF F_PARA%NOTFOUND THEN
        RAISE_APPLICATION_ERROR(-20011,
                     'UNIQUE.SUBACNT parameter not found') ;
     ELSE
        IF P_PARA_VALUE = 'Y' THEN
            P_INDIC := 'N';
            F_VAL_SUB_ACNT('',P_SUB_ACNT_CODE,P_INDIC,P_NAME1, P_ERR);
            /* Error 158 corresponds to Frozen Sub Account */
            IF P_ERR != 0 AND P_ERR!= 158 THEN
                P_ERR_NO := P_ERR;
                CLOSE F_PARA;
                RETURN;
            END IF;
            P_INDIC := 'S';
            F_VAL_SUB_ACNT('',P_SUB_ACNT_CODE, P_INDIC, P_NAME2, P_ERR);
            /* Error 158 corresponds to Frozen Sub Account */
            IF P_ERR != 0 AND P_ERR != 158 THEN
                P_ERR_NO := P_ERR;
                CLOSE F_PARA;
                RETURN;
            END IF;
            IF P_SUB_ACNT_NAME != P_NAME1 OR
               P_SUB_ACNT_SHORT_NAME != P_NAME2 THEN
               RAISE_APPLICATION_ERROR(-20010,
                 'Sub account name must be same across all control accounts') ;
            END IF;
        END IF;
     END IF;
     CLOSE F_PARA;
END;
/
CREATE OR REPLACE VIEW LOOKUP ( NUMBERVALUE, 
NUMBERTEXT, ARABTEXT ) AS 
SELECT "NUMBERVALUE","NUMBERTEXT","ARABTEXT" FROM PREMPROD.LOOKUP
;
 /
CREATE OR REPLACE VIEW PM_CURRENCY ( CURR_CODE, 
CURR_NAME, CURR_SHORT_NAME, CURR_DECIMAL, CURR_UNIT_NAME, 
CURR_BL_NAME, CURR_BL_SHORT_NAME, CURR_CR_UID, CURR_CR_DT, 
CURR_FRZ_FLAG, CURR_BL_UNIT_NAME ) AS 
SELECT "CURR_CODE","CURR_NAME","CURR_SHORT_NAME","CURR_DECIMAL","CURR_UNIT_NAME","CURR_BL_NAME","CURR_BL_SHORT_NAME","CURR_CR_UID","CURR_CR_DT","CURR_FRZ_FLAG","CURR_BL_UNIT_NAME" FROM PREMPROD.PM_CURRENCY
;
 /
CREATE OR REPLACE PACKAGE pol_appr_1 AS
   PROCEDURE policy_approval(p_fm_pol_sys_id 	IN NUMBER,
				p_user_id	IN VARCHAR2,
				p_lang_code	IN VARCHAR2,
				p_apprv_dt	IN DATE,
				p_comp_code	IN VARCHAR2,
				p_to_pol_sys_id IN NUMBER )
				 ;
END pol_appr_1 ;
/
CREATE OR REPLACE PROCEDURE STP_FM_ACNT_ANLY (
 OLD_AANLY_ANLY_HEAD_NO    IN      NUMBER,
 OLD_AANLY_ANLY_CODE       IN      VARCHAR2,
 OLD_AANLY_MAIN_ACNT_CODE  IN      VARCHAR2,
 OLD_AANLY_SUB_ACNT_CODE   IN      VARCHAR2,
 OLD_AANLY_ANLY_NAME       IN      VARCHAR2,
 OLD_AANLY_ANLY_SHORT_NAME IN      VARCHAR2,
 OLD_AANLY_CR_UID          IN      VARCHAR2,
 OLD_AANLY_CR_DT           IN      DATE,
 OLD_AANLY_FRZ_FLAG        IN      VARCHAR2,
 NEW_AANLY_ANLY_HEAD_NO    IN OUT  NUMBER,
 NEW_AANLY_ANLY_CODE       IN OUT  VARCHAR2,
 NEW_AANLY_MAIN_ACNT_CODE  IN OUT  VARCHAR2,
 NEW_AANLY_SUB_ACNT_CODE   IN OUT  VARCHAR2,
 NEW_AANLY_ANLY_NAME       IN OUT  VARCHAR2,
 NEW_AANLY_ANLY_SHORT_NAME IN OUT  VARCHAR2,
 NEW_AANLY_CR_UID          IN OUT  VARCHAR2,
 NEW_AANLY_CR_DT           IN OUT  DATE,
 NEW_AANLY_FRZ_FLAG        IN OUT  VARCHAR2,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2 ,
 OLD_AANLY_BL_ANLY_NAME       IN      VARCHAR2,
 NEW_AANLY_BL_ANLY_NAME       IN OUT  VARCHAR2,
 OLD_AANLY_BL_ANLY_SHORT_NAME IN      VARCHAR2,
 NEW_AANLY_BL_ANLY_SHORT_NAME IN OUT  VARCHAR2) AS
T_ERR_NO NUMBER;
BEGIN
    /*
     IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
          NEW_AANLY_CR_DT := SYSDATE;
          NEW_AANLY_CR_UID := NVL(NEW_AANLY_CR_UID,
                               NVL(OLD_AANLY_CR_UID, 'UNDEF'));
     END IF;
    */
     IF TRG_MODE = 'U' OR TRG_MODE = 'I' THEN
         IF (NVL(NEW_AANLY_MAIN_ACNT_CODE, 'ZZZZZZZ') !=
            NVL(OLD_AANLY_MAIN_ACNT_CODE, 'ZZZZZZZ'))
                          OR
            NVL(NEW_AANLY_ANLY_HEAD_NO, 'ZZZZZZZ') !=
            NVL(OLD_AANLY_ANLY_HEAD_NO, 'ZZZZZZZ')
                          OR
            (NVL(NEW_AANLY_SUB_ACNT_CODE, 'ZZZZZZZ') !=
            NVL(OLD_AANLY_SUB_ACNT_CODE, 'ZZZZZZZ')) THEN
               F_VAL_ACNT_ANLY_COMBN(NEW_AANLY_ANLY_HEAD_NO,
                                     NEW_AANLY_MAIN_ACNT_CODE,
                                     NEW_AANLY_SUB_ACNT_CODE,
                                      T_ERR_NO);
                 IF T_ERR_NO != 0 THEN
                     RAISE_APPLICATION_ERROR(-20500 - T_ERR_NO,
                         'Invalid Account - Analysis code combination');
                 END IF;
         END IF;
     END IF;
     IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
         INSERT INTO FH_ACNT_ANLY_HIST  VALUES (OLD_AANLY_ANLY_HEAD_NO,
                                                OLD_AANLY_ANLY_CODE,
                                                OLD_AANLY_MAIN_ACNT_CODE,
                                                OLD_AANLY_SUB_ACNT_CODE,
                                                OLD_AANLY_ANLY_NAME,
                                                OLD_AANLY_ANLY_SHORT_NAME,
                                                OLD_AANLY_CR_UID,
                                                OLD_AANLY_CR_DT,
                                                OLD_AANLY_FRZ_FLAG ,
                                                OLD_AANLY_BL_ANLY_NAME,
                                                OLD_AANLY_BL_ANLY_SHORT_NAME) ;
     END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_ACNT_ANLY_LEVEL (
 OLD_AAL_HEAD_NO           IN      NUMBER,
 OLD_AAL_FORMAT_ID         IN      NUMBER,
 OLD_AAL_LVL_CODE          IN      NUMBER,
 OLD_AAL_MAIN_ACNT_CODE    IN      VARCHAR2,
 OLD_AAL_SUB_ACNT_CODE     IN      VARCHAR2,
 OLD_AAL_ANLY_CODE         IN      VARCHAR2,
 OLD_AAL_CR_UID            IN      VARCHAR2,
 OLD_AAL_CR_DT             IN      DATE,
 NEW_AAL_HEAD_NO           IN OUT  NUMBER,
 NEW_AAL_FORMAT_ID         IN OUT  NUMBER,
 NEW_AAL_LVL_CODE          IN OUT  NUMBER,
 NEW_AAL_MAIN_ACNT_CODE    IN OUT  VARCHAR2,
 NEW_AAL_SUB_ACNT_CODE     IN OUT  VARCHAR2,
 NEW_AAL_ANLY_CODE         IN OUT  VARCHAR2,
 NEW_AAL_CR_UID            IN OUT  VARCHAR2,
 NEW_AAL_CR_DT             IN OUT  DATE,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2) AS
T_MSG    VARCHAR2(80);
T_ERR_NO NUMBER(6);
BEGIN
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
   IF NVL(NEW_AAL_FORMAT_ID, 0) != NVL(OLD_AAL_FORMAT_ID,0) OR
      NVL(NEW_AAL_LVL_CODE,0)   != NVL(OLD_AAL_LVL_CODE,0)      THEN
      F_VAL_ANLY_DETAIL_LEVEL(NEW_AAL_HEAD_NO, NEW_AAL_FORMAT_ID,
                              NEW_AAL_LVL_CODE, T_ERR_NO);
      IF T_ERR_NO != 0 THEN
         RAISE_APPLICATION_ERROR(-20500 - T_ERR_NO, T_MSG);
      END IF;
   END IF;
   /*
   NEW_AAL_CR_DT := SYSDATE;
   NEW_AAL_CR_UID := NVL(NEW_AAL_CR_UID, NVL(OLD_AAL_CR_UID, 'UNDEF'));
   */
END IF;
     IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
         INSERT INTO FH_ACNT_ANLY_LEVEL_HIST VALUES (OLD_AAL_HEAD_NO,
                                                     OLD_AAL_FORMAT_ID,
                                                     OLD_AAL_LVL_CODE,
                                                     OLD_AAL_MAIN_ACNT_CODE,
                                                     OLD_AAL_SUB_ACNT_CODE,
                                                     OLD_AAL_ANLY_CODE,
                                                     OLD_AAL_CR_UID,
                                                     OLD_AAL_CR_DT);
     END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_ACNT_COMP (
 OLD_ACOMP_COMP_CODE       IN      VARCHAR2,
 OLD_ACOMP_MAIN_ACNT_CODE  IN      VARCHAR2,
 OLD_ACOMP_SUB_ACNT_CODE   IN      VARCHAR2,
 OLD_ACOMP_CR_UID          IN      VARCHAR2,
 OLD_ACOMP_CR_DT           IN      DATE,
 NEW_ACOMP_COMP_CODE       IN OUT  VARCHAR2,
 NEW_ACOMP_MAIN_ACNT_CODE  IN OUT  VARCHAR2,
 NEW_ACOMP_SUB_ACNT_CODE   IN OUT  VARCHAR2,
 NEW_ACOMP_CR_UID          IN OUT  VARCHAR2,
 NEW_ACOMP_CR_DT           IN OUT  DATE,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2) AS
T_ERR_NO NUMBER;
BEGIN
     IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
         IF NVL(NEW_ACOMP_MAIN_ACNT_CODE, 'ZZZZZZZ') !=
            NVL(OLD_ACOMP_MAIN_ACNT_CODE , 'ZZZZZZZ') OR
            NVL(NEW_ACOMP_SUB_ACNT_CODE, 'ZZZZZZZ') !=
            NVL(OLD_ACOMP_SUB_ACNT_CODE, 'ZZZZZZZ') THEN
               F_VAL_MAIN_SUB_COMBN(NEW_ACOMP_MAIN_ACNT_CODE,
                            NEW_ACOMP_SUB_ACNT_CODE, T_ERR_NO);
               IF T_ERR_NO != 0 THEN
                  RAISE_APPLICATION_ERROR(-20500 - T_ERR_NO,
                     'Main - Sub account combination not valid for company');
               END IF;
         END IF;
        /*
        NEW_ACOMP_CR_DT := SYSDATE;
        NEW_ACOMP_CR_UID := NVL(NEW_ACOMP_CR_UID,
                   NVL(OLD_ACOMP_CR_UID, 'UNDEF'));
        */
     END IF;
     IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
         INSERT INTO FH_ACNT_COMP_HIST VALUES (OLD_ACOMP_COMP_CODE,
                                               OLD_ACOMP_MAIN_ACNT_CODE,
                                               OLD_ACOMP_SUB_ACNT_CODE,
                                               OLD_ACOMP_CR_UID,
                                               OLD_ACOMP_CR_DT);
     END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_ACNT_CURR (
 OLD_ACURR_CURR_CODE       IN      VARCHAR2,
 OLD_ACURR_MAIN_ACNT_CODE  IN      VARCHAR2,
 OLD_ACURR_SUB_ACNT_CODE   IN      VARCHAR2,
 OLD_ACURR_CR_UID          IN      VARCHAR2,
 OLD_ACURR_CR_DT           IN      DATE,
 NEW_ACURR_CURR_CODE       IN OUT  VARCHAR2,
 NEW_ACURR_MAIN_ACNT_CODE  IN OUT  VARCHAR2,
 NEW_ACURR_SUB_ACNT_CODE   IN OUT  VARCHAR2,
 NEW_ACURR_CR_UID          IN OUT  VARCHAR2,
 NEW_ACURR_CR_DT           IN OUT  DATE,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2) AS
T_ERR_NO NUMBER;
BEGIN
     IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
         IF NVL(NEW_ACURR_MAIN_ACNT_CODE, 'ZZZZZZZ') !=
            NVL(OLD_ACURR_MAIN_ACNT_CODE , 'ZZZZZZZ') OR
            NVL(NEW_ACURR_SUB_ACNT_CODE, 'ZZZZZZZ')
             != NVL(OLD_ACURR_SUB_ACNT_CODE, 'ZZZZZZZ') THEN
               F_VAL_ACNT_CURR_COMBN(NEW_ACURR_MAIN_ACNT_CODE,
              NEW_ACURR_SUB_ACNT_CODE, T_ERR_NO);
             IF T_ERR_NO != 0 THEN
                RAISE_APPLICATION_ERROR(-20500 - T_ERR_NO,
                           'Invalid Account - Currency combination');
             END IF;
         END IF;
         /*
         NEW_ACURR_CR_DT := SYSDATE;
         NEW_ACURR_CR_UID := NVL(NEW_ACURR_CR_UID,
                              NVL(OLD_ACURR_CR_UID, 'UNDEF'));
         */
     END IF;
     IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
         INSERT INTO FH_ACNT_CURR_HIST VALUES (OLD_ACURR_CURR_CODE,
                                               OLD_ACURR_MAIN_ACNT_CODE,
                                               OLD_ACURR_SUB_ACNT_CODE,
                                               OLD_ACURR_CR_UID,
                                               OLD_ACURR_CR_DT);
     END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_ACTIVITY (
 OLD_ACTY_CODE             IN      VARCHAR2,
 OLD_ACTY_NAME             IN      VARCHAR2,
 OLD_ACTY_CR_UID           IN      VARCHAR2,
 OLD_ACTY_CR_DT            IN      DATE,
 OLD_ACTY_FRZ_FLAG         IN      VARCHAR2,
 NEW_ACTY_CODE             IN OUT  VARCHAR2,
 NEW_ACTY_NAME             IN OUT  VARCHAR2,
 NEW_ACTY_CR_UID           IN OUT  VARCHAR2,
 NEW_ACTY_CR_DT            IN OUT  DATE,
 NEW_ACTY_FRZ_FLAG         IN OUT  VARCHAR2,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2 ,
 OLD_ACTY_BL_NAME          IN      VARCHAR2,
 NEW_ACTY_BL_NAME          IN OUT  VARCHAR2 ) AS
BEGIN
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
     NEW_ACTY_CR_DT := SYSDATE;
     NEW_ACTY_CR_UID := NVL(NEW_ACTY_CR_UID, NVL(OLD_ACTY_CR_UID, 'UNDEF'));
END IF;
IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
        INSERT INTO FH_ACTIVITY_HIST VALUES (OLD_ACTY_CODE,
                                             OLD_ACTY_NAME,
                                             OLD_ACTY_CR_UID,
                                             OLD_ACTY_CR_DT,
                                             OLD_ACTY_FRZ_FLAG ,
                                             OLD_ACTY_BL_NAME);
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_ACTY_VALUE (
 OLD_AVAL_ACTY_CODE        IN      VARCHAR2,
 OLD_AVAL_CODE             IN      VARCHAR2,
 OLD_AVAL_VALUE_NAME       IN      VARCHAR2,
 OLD_AVAL_SHORT_NAME       IN      VARCHAR2,
 OLD_AVAL_CR_UID           IN      VARCHAR2,
 OLD_AVAL_CR_DT            IN      DATE,
 OLD_AVAL_FRZ_FLAG         IN      VARCHAR2,
 NEW_AVAL_ACTY_CODE        IN OUT  VARCHAR2,
 NEW_AVAL_CODE             IN OUT  VARCHAR2,
 NEW_AVAL_VALUE_NAME       IN OUT  VARCHAR2,
 NEW_AVAL_SHORT_NAME       IN OUT  VARCHAR2,
 NEW_AVAL_CR_UID           IN OUT  VARCHAR2,
 NEW_AVAL_CR_DT            IN OUT  DATE,
 NEW_AVAL_FRZ_FLAG         IN OUT  VARCHAR2,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2 ,
 OLD_AVAL_BL_VALUE_NAME    IN      VARCHAR2,
 NEW_AVAL_BL_VALUE_NAME    IN OUT  VARCHAR2,
 OLD_AVAL_BL_SHORT_NAME    IN      VARCHAR2,
 NEW_AVAL_BL_SHORT_NAME    IN OUT  VARCHAR2 ) AS
BEGIN
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
     NEW_AVAL_CR_DT := SYSDATE;
     NEW_AVAL_CR_UID := NVL(NEW_AVAL_CR_UID, NVL(OLD_AVAL_CR_UID, 'UNDEF'));
END IF;
IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
      INSERT INTO FH_ACTY_VALUE_HIST VALUES (OLD_AVAL_ACTY_CODE,
                                             OLD_AVAL_CODE,
                                             OLD_AVAL_VALUE_NAME,
                                             OLD_AVAL_SHORT_NAME,
                                             OLD_AVAL_CR_UID,
                                             OLD_AVAL_CR_DT,
                                             OLD_AVAL_FRZ_FLAG,
                                             OLD_AVAL_BL_VALUE_NAME,
                                             OLD_AVAL_BL_SHORT_NAME);
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_ANALYSIS (
 OLD_ANLY_HEAD_NO          IN      NUMBER,
 OLD_ANLY_CODE             IN      VARCHAR2,
 OLD_ANLY_NAME             IN      VARCHAR2,
 OLD_ANLY_SHORT_NAME       IN      VARCHAR2,
 OLD_ANLY_DESC             IN      VARCHAR2,
 OLD_ANLY_CR_UID           IN      VARCHAR2,
 OLD_ANLY_CR_DT            IN      DATE,
 OLD_ANLY_FRZ_FLAG         IN      VARCHAR2,
 NEW_ANLY_HEAD_NO          IN OUT  NUMBER,
 NEW_ANLY_CODE             IN OUT  VARCHAR2,
 NEW_ANLY_NAME             IN OUT  VARCHAR2,
 NEW_ANLY_SHORT_NAME       IN OUT  VARCHAR2,
 NEW_ANLY_DESC             IN OUT  VARCHAR2,
 NEW_ANLY_CR_UID           IN OUT  VARCHAR2,
 NEW_ANLY_CR_DT            IN OUT  DATE,
 NEW_ANLY_FRZ_FLAG         IN OUT  VARCHAR2,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2,
 OLD_ANLY_BL_NAME          IN      VARCHAR2,
 NEW_ANLY_BL_NAME          IN OUT  VARCHAR2,
 OLD_ANLY_BL_SHORT_NAME    IN      VARCHAR2,
 NEW_ANLY_BL_SHORT_NAME    IN OUT  VARCHAR2) AS
BEGIN
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
     NEW_ANLY_CR_DT := SYSDATE;
     NEW_ANLY_CR_UID := NVL(NEW_ANLY_CR_UID, NVL(OLD_ANLY_CR_UID, 'UNDEF'));
END IF;
IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
     INSERT INTO FH_ANALYSIS_HIST VALUES (OLD_ANLY_HEAD_NO,    OLD_ANLY_CODE,
                                          OLD_ANLY_NAME,
                                          OLD_ANLY_SHORT_NAME, OLD_ANLY_DESC,
                                          OLD_ANLY_CR_UID,
                                          OLD_ANLY_CR_DT,
                                          OLD_ANLY_FRZ_FLAG,
                                          OLD_ANLY_BL_NAME,
                                          OLD_ANLY_BL_SHORT_NAME) ;
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_ANLY_FORMAT (
 OLD_AFM_HEAD_NO           IN      NUMBER,
 OLD_AFM_FORMAT_ID         IN      NUMBER,
 OLD_AFM_FORMAT_NAME       IN      VARCHAR2,
 OLD_AFM_CR_UID            IN      VARCHAR2,
 OLD_AFM_CR_DT             IN      DATE,
 OLD_AFM_FRZ_FLAG          IN      VARCHAR2,
 NEW_AFM_HEAD_NO           IN OUT  NUMBER,
 NEW_AFM_FORMAT_ID         IN OUT  NUMBER,
 NEW_AFM_FORMAT_NAME       IN OUT  VARCHAR2,
 NEW_AFM_CR_UID            IN OUT  VARCHAR2,
 NEW_AFM_CR_DT             IN OUT  DATE,
 NEW_AFM_FRZ_FLAG          IN OUT  VARCHAR2,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2,
 OLD_AFM_BL_FORMAT_NAME    IN      VARCHAR2,
 NEW_AFM_BL_FORMAT_NAME    IN OUT  VARCHAR2) AS
BEGIN
     IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
          NEW_AFM_CR_DT := SYSDATE;
          NEW_AFM_CR_UID := NVL(NEW_AFM_CR_UID,
                               NVL(OLD_AFM_CR_UID, 'UNDEF'));
     END IF;
     IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
        INSERT INTO FH_ANLY_FORMAT_HIST VALUES (OLD_AFM_HEAD_NO,
                                                OLD_AFM_FORMAT_ID,
                                                OLD_AFM_FORMAT_NAME,
                                                OLD_AFM_CR_UID,
                                                OLD_AFM_CR_DT,
                                                OLD_AFM_FRZ_FLAG,
                                                OLD_AFM_BL_FORMAT_NAME) ;
     END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_ANLY_LEVEL (
 OLD_ALM_HEAD_NO           IN      NUMBER,
 OLD_ALM_FORMAT_ID         IN      NUMBER,
 OLD_ALM_LVL_CODE          IN      NUMBER,
 OLD_ALM_LVL_NAME          IN      VARCHAR2,
 OLD_ALM_PARENT_CODE       IN      NUMBER,
 OLD_ALM_CR_UID            IN      VARCHAR2,
 OLD_ALM_CR_DT             IN      DATE,
 OLD_ALM_FRZ_FLAG          IN      VARCHAR2,
 NEW_ALM_HEAD_NO           IN OUT  NUMBER,
 NEW_ALM_FORMAT_ID         IN OUT  NUMBER,
 NEW_ALM_LVL_CODE          IN OUT  NUMBER,
 NEW_ALM_LVL_NAME          IN OUT  VARCHAR2,
 NEW_ALM_PARENT_CODE       IN OUT  NUMBER,
 NEW_ALM_CR_UID            IN OUT  VARCHAR2,
 NEW_ALM_CR_DT             IN OUT  DATE,
 NEW_ALM_FRZ_FLAG          IN OUT  VARCHAR2,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2,
 OLD_ALM_BL_LVL_NAME       IN      VARCHAR2,
 NEW_ALM_BL_LVL_NAME       IN OUT  VARCHAR2) AS
   T_ERR_NO NUMBER;
   T_MSG   CHAR;
BEGIN
T_MSG := '';
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
     IF NVL(NEW_ALM_FORMAT_ID, 0)   != NVL(OLD_ALM_FORMAT_ID, 0)   OR
        NVL(NEW_ALM_PARENT_CODE, 0) != NVL(OLD_ALM_PARENT_CODE, 0)    THEN
        F_VAL_ANLY_PARENT_LEVEL(NEW_ALM_HEAD_NO, NEW_ALM_FORMAT_ID,
                                NEW_ALM_PARENT_CODE, T_ERR_NO);
       IF T_ERR_NO != 0 THEN
           RAISE_APPLICATION_ERROR(-20500 - T_ERR_NO, T_MSG);
       END IF;
     END IF;
     NEW_ALM_CR_DT := SYSDATE;
     NEW_ALM_CR_UID := NVL(NEW_ALM_CR_UID, NVL(OLD_ALM_CR_UID, 'UNDEF'));
 END IF;
IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
     INSERT INTO FH_ANLY_LEVEL_HIST VALUES (OLD_ALM_HEAD_NO,
                                            OLD_ALM_FORMAT_ID,
                                            OLD_ALM_LVL_CODE,
                                            OLD_ALM_LVL_NAME,
                                            OLD_ALM_PARENT_CODE,
                                            OLD_ALM_CR_UID,
                                            OLD_ALM_CR_DT,
                                            OLD_ALM_FRZ_FLAG,
                                            OLD_ALM_BL_LVL_NAME) ;
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_COA_ACNT_FORMAT (
 OLD_CAF_FORMAT_ID         IN      NUMBER,
 OLD_CAF_LVL_CODE          IN      NUMBER,
 OLD_CAF_MAIN_ACNT_CODE    IN      VARCHAR2,
 OLD_CAF_CR_UID            IN      VARCHAR2,
 OLD_CAF_CR_DT             IN      DATE,
 NEW_CAF_FORMAT_ID         IN OUT  NUMBER,
 NEW_CAF_LVL_CODE          IN OUT  NUMBER,
 NEW_CAF_MAIN_ACNT_CODE    IN OUT  VARCHAR2,
 NEW_CAF_CR_UID            IN OUT  VARCHAR2,
 NEW_CAF_CR_DT             IN OUT  DATE,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2) AS
T_ERR_NO NUMBER(6);
T_MSG    VARCHAR2(80);
BEGIN
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
   IF NVL(NEW_CAF_FORMAT_ID, 0) != NVL(OLD_CAF_FORMAT_ID,0) OR
      NVL(NEW_CAF_LVL_CODE,0)   != NVL(OLD_CAF_LVL_CODE,0)      THEN
      F_VAL_DETAIL_LEVEL(NEW_CAF_FORMAT_ID, NEW_CAF_LVL_CODE, T_ERR_NO);
      IF T_ERR_NO != 0 THEN
         RAISE_APPLICATION_ERROR(-20500 - T_ERR_NO, T_MSG);
      END IF;
   END IF;
   NEW_CAF_CR_DT := SYSDATE;
   NEW_CAF_CR_UID := NVL(NEW_CAF_CR_UID, NVL(OLD_CAF_CR_UID, 'UNDEF'));
END IF;
IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
     INSERT INTO FH_COA_ACNT_FORMAT_HIST VALUES (OLD_CAF_FORMAT_ID,
                                                 OLD_CAF_LVL_CODE,
                                                 OLD_CAF_MAIN_ACNT_CODE,
                                                 OLD_CAF_CR_UID,
                                                 OLD_CAF_CR_DT);
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_COA_FORMAT (
 OLD_COA_FORMAT_ID         IN      NUMBER,
 OLD_COA_FORMAT_NAME       IN      VARCHAR2,
 OLD_COA_CR_UID            IN      VARCHAR2,
 OLD_COA_CR_DT             IN      DATE,
 OLD_COA_FRZ_FLAG          IN      VARCHAR2,
 NEW_COA_FORMAT_ID         IN OUT  NUMBER,
 NEW_COA_FORMAT_NAME       IN OUT  VARCHAR2,
 NEW_COA_CR_UID            IN OUT  VARCHAR2,
 NEW_COA_CR_DT             IN OUT  DATE,
 NEW_COA_FRZ_FLAG          IN OUT  VARCHAR2,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2,
 OLD_COA_BL_FORMAT_NAME    IN      VARCHAR2,
 NEW_COA_BL_FORMAT_NAME    IN OUT  VARCHAR2) AS
BEGIN
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
     NEW_COA_CR_DT := SYSDATE;
     NEW_COA_CR_UID := NVL(NEW_COA_CR_UID, NVL(OLD_COA_CR_UID, 'UNDEF'));
END IF;
IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
     INSERT INTO FH_COA_FORMAT_HIST VALUES
         (OLD_COA_FORMAT_ID,OLD_COA_FORMAT_NAME,
          OLD_COA_CR_UID, OLD_COA_CR_DT, OLD_COA_FRZ_FLAG,
          OLD_COA_BL_FORMAT_NAME);
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_COA_LEVEL (
 OLD_LVL_FORMAT_ID         IN      NUMBER,
 OLD_LVL_CODE              IN      NUMBER,
 OLD_LVL_NAME              IN      VARCHAR2,
 OLD_LVL_PARENT_CODE       IN      NUMBER,
 OLD_LVL_ACNT_TYPE         IN      VARCHAR2,
 OLD_LVL_TOTAL_FLAG        IN      VARCHAR2,
 OLD_LVL_NOTE_NO           IN      VARCHAR2,
 OLD_LVL_SEQ_NO            IN      NUMBER,
 OLD_LVL_CR_UID            IN      VARCHAR2,
 OLD_LVL_CR_DT             IN      DATE,
 OLD_LVL_FRZ_FLAG          IN      VARCHAR2,
 NEW_LVL_FORMAT_ID         IN OUT  NUMBER,
 NEW_LVL_CODE              IN OUT  NUMBER,
 NEW_LVL_NAME              IN OUT  VARCHAR2,
 NEW_LVL_PARENT_CODE       IN OUT  NUMBER,
 NEW_LVL_ACNT_TYPE         IN OUT  VARCHAR2,
 NEW_LVL_TOTAL_FLAG        IN OUT  VARCHAR2,
 NEW_LVL_NOTE_NO           IN OUT  VARCHAR2,
 NEW_LVL_SEQ_NO            IN OUT  NUMBER,
 NEW_LVL_CR_UID            IN OUT  VARCHAR2,
 NEW_LVL_CR_DT             IN OUT  DATE,
 NEW_LVL_FRZ_FLAG          IN OUT  VARCHAR2,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2,
 OLD_LVL_BL_NAME           IN      VARCHAR2,
 NEW_LVL_BL_NAME           IN OUT  VARCHAR2) AS
T_ERR_NO NUMBER;
T_MSG   CHAR;
BEGIN
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
     IF NEW_LVL_PARENT_CODE != NVL(OLD_LVL_PARENT_CODE,0) THEN
          F_VAL_PARENT_LEVEL(NEW_LVL_FORMAT_ID,
                     NEW_LVL_PARENT_CODE, T_ERR_NO);
          IF T_ERR_NO != 0 THEN
             RAISE_APPLICATION_ERROR(-20500 - T_ERR_NO, T_MSG);
          END IF;
     END IF;
     NEW_LVL_CR_DT := SYSDATE;
     NEW_LVL_CR_UID := NVL(NEW_LVL_CR_UID, NVL(OLD_LVL_CR_UID, 'UNDEF'));
END IF;
IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
     INSERT INTO FH_COA_LEVEL_HIST VALUES
          (OLD_LVL_FORMAT_ID,   OLD_LVL_CODE,     OLD_LVL_NAME,
           OLD_LVL_PARENT_CODE, OLD_LVL_ACNT_TYPE, OLD_LVL_TOTAL_FLAG,
           OLD_LVL_NOTE_NO,     OLD_LVL_SEQ_NO,    OLD_LVL_CR_UID,
           OLD_LVL_CR_DT,       OLD_LVL_FRZ_FLAG, OLD_LVL_BL_NAME);
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_COMPANY (
 OLD_COMP_CODE             IN      VARCHAR2,
 OLD_COMP_NAME             IN      VARCHAR2,
 OLD_COMP_SHORT_NAME       IN      VARCHAR2,
 OLD_COMP_CTL_ACNT_CODE    IN      VARCHAR2,
 OLD_COMP_HEADER           IN      VARCHAR2,
 OLD_COMP_ADD_1            IN      VARCHAR2,
 OLD_COMP_ADD_2            IN      VARCHAR2,
 OLD_COMP_ADD_3            IN      VARCHAR2,
 OLD_COMP_DFLT_DIVN_CODE   IN      VARCHAR2,
 OLD_COMP_DFLT_DEPT_CODE   IN      VARCHAR2,
 OLD_COMP_CR_UID           IN      VARCHAR2,
 OLD_COMP_CR_DT            IN      DATE,
 OLD_COMP_FRZ_FLAG         IN      VARCHAR2,
 NEW_COMP_CODE             IN OUT  VARCHAR2,
 NEW_COMP_NAME             IN OUT  VARCHAR2,
 NEW_COMP_SHORT_NAME       IN OUT  VARCHAR2,
 NEW_COMP_CTL_ACNT_CODE    IN OUT  VARCHAR2,
 NEW_COMP_HEADER           IN OUT  VARCHAR2,
 NEW_COMP_ADD_1            IN OUT  VARCHAR2,
 NEW_COMP_ADD_2            IN OUT  VARCHAR2,
 NEW_COMP_ADD_3            IN OUT  VARCHAR2,
 NEW_COMP_DFLT_DIVN_CODE   IN OUT  VARCHAR2,
 NEW_COMP_DFLT_DEPT_CODE   IN OUT  VARCHAR2,
 NEW_COMP_CR_UID           IN OUT  VARCHAR2,
 NEW_COMP_CR_DT            IN OUT  DATE,
 NEW_COMP_FRZ_FLAG         IN OUT  VARCHAR2,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2,
 OLD_COMP_BL_NAME          IN      VARCHAR2,
 NEW_COMP_BL_NAME          IN OUT  VARCHAR2,
 OLD_COMP_BL_SHORT_NAME    IN      VARCHAR2,
 NEW_COMP_BL_SHORT_NAME    IN OUT  VARCHAR2,
 OLD_COMP_BL_ADD_1         IN      VARCHAR2,
 NEW_COMP_BL_ADD_1         IN OUT  VARCHAR2,
 OLD_COMP_BL_ADD_2         IN      VARCHAR2,
 NEW_COMP_BL_ADD_2         IN OUT  VARCHAR2,
 OLD_COMP_BL_ADD_3         IN      VARCHAR2,
 NEW_COMP_BL_ADD_3         IN OUT  VARCHAR2) AS
BEGIN
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
     NEW_COMP_CR_DT := SYSDATE;
     NEW_COMP_CR_UID := NVL(NEW_COMP_CR_UID, NVL(OLD_COMP_CR_UID, 'UNDEF'));
END IF;
IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
    INSERT INTO FH_COMPANY_HIST (
			COMP_CODE              ,
			COMP_NAME              ,
			COMP_SHORT_NAME        ,
			COMP_CTL_ACNT_CODE     ,
			COMP_HEADER            ,
			COMP_ADD_1             ,
			COMP_ADD_2             ,
			COMP_ADD_3             ,
			COMP_DFLT_DIVN_CODE    ,
			COMP_DFLT_DEPT_CODE    ,
			COMP_CR_UID            ,
			COMP_CR_DT             ,
			COMP_FRZ_FLAG          ,
			COMP_BL_NAME           ,
			COMP_BL_SHORT_NAME     ,
			COMP_BL_ADD_1          ,
			COMP_BL_ADD_2          ,
			COMP_BL_ADD_3          )
     VALUES (OLD_COMP_CODE, OLD_COMP_NAME, OLD_COMP_SHORT_NAME,
            OLD_COMP_CTL_ACNT_CODE, OLD_COMP_HEADER, OLD_COMP_ADD_1,
            OLD_COMP_ADD_2,  OLD_COMP_ADD_3, OLD_COMP_DFLT_DIVN_CODE,
            OLD_COMP_DFLT_DEPT_CODE, OLD_COMP_CR_UID, OLD_COMP_CR_DT,
            OLD_COMP_FRZ_FLAG,OLD_COMP_BL_NAME, OLD_COMP_BL_SHORT_NAME,
            OLD_COMP_BL_ADD_1 , OLD_COMP_BL_ADD_2, OLD_COMP_BL_ADD_3);
    IF TRG_MODE = 'D' THEN
          DELETE FROM FM_ACNT_PERIOD
          WHERE  APER_COMP_CODE = OLD_COMP_CODE;
          DELETE FROM MENU_USER_COMP
          WHERE  MUC_COMP_CODE = OLD_COMP_CODE;
          DELETE FROM MENU_USER_COMP_DIVN
          WHERE  MUCD_COMP_CODE = OLD_COMP_CODE;
    END IF;
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_CURRENCY (
 OLD_CURR_CODE             IN      VARCHAR2,
 OLD_CURR_NAME             IN      VARCHAR2,
 OLD_CURR_DECIMAL          IN      NUMBER,
 OLD_CURR_UNIT_NAME        IN      VARCHAR2,
 OLD_CURR_CR_UID           IN      VARCHAR2,
 OLD_CURR_CR_DT            IN      DATE,
 OLD_CURR_FRZ_FLAG         IN      VARCHAR2,
 NEW_CURR_CODE             IN OUT  VARCHAR2,
 NEW_CURR_NAME             IN OUT  VARCHAR2,
 NEW_CURR_DECIMAL          IN OUT  NUMBER,
 NEW_CURR_UNIT_NAME        IN OUT  VARCHAR2,
 NEW_CURR_CR_UID           IN OUT  VARCHAR2,
 NEW_CURR_CR_DT            IN OUT  DATE,
 NEW_CURR_FRZ_FLAG         IN OUT  VARCHAR2,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2,
 OLD_CURR_BL_NAME          IN      VARCHAR2,
 NEW_CURR_BL_NAME          IN OUT  VARCHAR2,
 OLD_CURR_BL_UNIT_NAME     IN      VARCHAR2,
 NEW_CURR_BL_UNIT_NAME     IN OUT  VARCHAR2) AS
           P_PARA_VALUE VARCHAR2(50);
            CURSOR FET_BASE_CURR IS
                 SELECT PARA_VALUE
                 FROM FP_PARAMETER
                 WHERE PARA_ID = 'BASE.CURR';
BEGIN
  	     IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
                  NEW_CURR_CR_DT := SYSDATE;
                  NEW_CURR_CR_UID := NVL(NEW_CURR_CR_UID,
                                       NVL(OLD_CURR_CR_UID, 'UNDEF'));
             END IF;
	     IF FET_BASE_CURR%ISOPEN THEN
                 CLOSE FET_BASE_CURR;
            END IF;
            OPEN FET_BASE_CURR;
            IF TRG_MODE = 'D' THEN
                FETCH FET_BASE_CURR INTO P_PARA_VALUE;
                  IF FET_BASE_CURR%FOUND THEN
                     IF P_PARA_VALUE = OLD_CURR_CODE THEN
                        CLOSE FET_BASE_CURR;
                        RAISE_APPLICATION_ERROR
                                   (-20004, 'Cannot delete base currency');
                     END IF;
                  END IF;
            END IF;
           IF TRG_MODE = 'I' THEN
            FETCH FET_BASE_CURR INTO P_PARA_VALUE;
            IF FET_BASE_CURR%FOUND THEN
                IF P_PARA_VALUE = NEW_CURR_CODE THEN
                 INSERT INTO FM_EXCHANGE_RATE (CER_CURR_CODE,
                                               CER_EFF_FRM_DT,
                                               CER_EFF_TO_DT,
                                               CER_BUY_EXGE_RATE,
                                               CER_SELL_EXGE_RATE,
                                               CER_CR_UID,
                                               CER_CR_DT)
                                       VALUES (NEW_CURR_CODE,
                                               TO_DATE('01-JAN-1901','DD-MON-YYYY'),
                                               TO_DATE('31-DEC-2099','DD-MON-YYYY'),
                                               1,
                                               1,
                                               NEW_CURR_CR_UID,
                                               NEW_CURR_CR_DT);
               END IF;
            END IF;
            CLOSE FET_BASE_CURR;
            END IF;
            IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
                  INSERT INTO FH_CURRENCY_HIST (
				CURR_CODE              ,
				CURR_NAME              ,
				CURR_DECIMAL           ,
				CURR_UNIT_NAME         ,
				CURR_CR_UID            ,
				CURR_CR_DT             ,
				CURR_FRZ_FLAG          ,
				CURR_BL_NAME           ,
				CURR_BL_UNIT_NAME      )
			 VALUES (OLD_CURR_CODE,
                                                       OLD_CURR_NAME,
                                                       OLD_CURR_DECIMAL,
                                                       OLD_CURR_UNIT_NAME,
                                                       OLD_CURR_CR_UID,
                                                       OLD_CURR_CR_DT,
                                                       OLD_CURR_FRZ_FLAG,
                                                       OLD_CURR_BL_NAME,
                                                       OLD_CURR_BL_UNIT_NAME) ;
            END IF;
          END;
/
CREATE OR REPLACE PROCEDURE STP_FM_CUSTOMER (
 OLD_CUST_CODE             IN      VARCHAR2,
 OLD_CUST_NAME             IN   	  VARCHAR2,
 OLD_CUST_SHORT_NAME       IN      VARCHAR2,
 OLD_CUST_ADD_1            IN      VARCHAR2,
 OLD_CUST_ADD_2            IN      VARCHAR2,
 OLD_CUST_ADD_3            IN      VARCHAR2,
 OLD_CUST_COUNTRY          IN      VARCHAR2,
 OLD_CUST_PHONE            IN      VARCHAR2,
 OLD_CUST_TELEX_FAX        IN      VARCHAR2,
 OLD_CUST_MAIN_ACNT_CODE   IN      VARCHAR2,
 OLD_CUST_CR_LMT_AMT       IN      NUMBER,
 OLD_CUST_CR_LMT_DAYS      IN      NUMBER,
 OLD_CUST_CONTACT          IN      VARCHAR2,
 OLD_CUST_AREA             IN      VARCHAR2,
 OLD_CUST_SM               IN      VARCHAR2,
 OLD_CUST_DESC             IN      VARCHAR2,
 OLD_CUST_CR_UID           IN      VARCHAR2,
 OLD_CUST_CR_DT            IN      DATE,
 OLD_CUST_FRZ_FLAG         IN      VARCHAR2,
 OLD_CUST_FAX              IN      VARCHAR2,
 NEW_CUST_CODE             IN OUT  VARCHAR2,
 NEW_CUST_NAME             IN OUT  VARCHAR2,
 NEW_CUST_SHORT_NAME       IN OUT  VARCHAR2,
 NEW_CUST_ADD_1            IN OUT  VARCHAR2,
 NEW_CUST_ADD_2            IN OUT  VARCHAR2,
 NEW_CUST_ADD_3            IN OUT  VARCHAR2,
 NEW_CUST_COUNTRY          IN OUT  VARCHAR2,
 NEW_CUST_PHONE            IN OUT  VARCHAR2,
 NEW_CUST_TELEX_FAX        IN OUT  VARCHAR2,
 NEW_CUST_MAIN_ACNT_CODE   IN OUT  VARCHAR2,
 NEW_CUST_CR_LMT_AMT       IN OUT  NUMBER,
 NEW_CUST_CR_LMT_DAYS      IN OUT  NUMBER,
 NEW_CUST_CONTACT          IN OUT  VARCHAR2,
 NEW_CUST_AREA             IN OUT  VARCHAR2,
 NEW_CUST_SM               IN OUT  VARCHAR2,
 NEW_CUST_DESC             IN OUT  VARCHAR2,
 NEW_CUST_CR_UID           IN OUT  VARCHAR2,
 NEW_CUST_CR_DT            IN OUT  DATE,
 NEW_CUST_FRZ_FLAG         IN OUT  VARCHAR2,
 NEW_CUST_FAX              IN OUT  VARCHAR2,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2,
 OLD_CUST_BL_NAME          IN      VARCHAR2,
 NEW_CUST_BL_NAME          IN OUT  VARCHAR2,
 OLD_CUST_BL_SHORT_NAME    IN      VARCHAR2,
 NEW_CUST_BL_SHORT_NAME    IN OUT  VARCHAR2,
 OLD_CUST_BL_ADD_1         IN      VARCHAR2,
 NEW_CUST_BL_ADD_1         IN OUT  VARCHAR2,
 OLD_CUST_BL_ADD_2         IN      VARCHAR2,
 NEW_CUST_BL_ADD_2         IN OUT  VARCHAR2,
 OLD_CUST_BL_ADD_3         IN      VARCHAR2,
 NEW_CUST_BL_ADD_3         IN OUT  VARCHAR2) AS
CURSOR F_PARA IS
SELECT PARA_VALUE
FROM   FP_PARAMETER
WHERE  PARA_ID = 'UNIQUE.SUBACNT' ;
P_ERR_NO      NUMBER ;
P_PARA_VALUE  VARCHAR2(1);
CURSOR SEL_SUB IS
SELECT SUB_ACNT_NAME, SUB_ACNT_SHORT_NAME
FROM   FM_SUB_ACCOUNT
WHERE  SUB_ACNT_CODE = NEW_CUST_CODE
FOR UPDATE OF SUB_ACNT_NAME, SUB_ACNT_SHORT_NAME;
P_SUB_ACNT_NAME        VARCHAR2(60);
P_SUB_ACNT_SHORT_NAME  VARCHAR2(15);
CURSOR SEL_MS IS
SELECT 'X'
FROM   FM_MAIN_SUB
WHERE  MS_SUB_ACNT_CODE = OLD_CUST_CODE;
P_DUMMY          VARCHAR2(1);
BEGIN
     IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
         NEW_CUST_CR_DT := SYSDATE;
         NEW_CUST_CR_UID := NVL(NEW_CUST_CR_UID,
                            NVL(OLD_CUST_CR_UID, 'UNDEF'));
        IF SEL_SUB%ISOPEN THEN
             CLOSE SEL_SUB;
        END IF;
        OPEN SEL_SUB;
        FETCH SEL_SUB INTO P_SUB_ACNT_NAME, P_SUB_ACNT_SHORT_NAME;
        IF SEL_SUB%NOTFOUND THEN
            INSERT INTO FM_SUB_ACCOUNT (SUB_ACNT_CODE,
                                        SUB_ACNT_NAME,
                                        SUB_ACNT_SHORT_NAME,
                                        SUB_CR_UID,
                                        SUB_CR_DT,
                                        SUB_FRZ_FLAG,
                                        SUB_BL_ACNT_NAME,
                                        SUB_BL_ACNT_SHORT_NAME)
                                VALUES (NEW_CUST_CODE,
                                        NEW_CUST_NAME,
                                        NEW_CUST_SHORT_NAME,
                                        NEW_CUST_CR_UID,
                                        NEW_CUST_CR_DT,'N',
                                        NEW_CUST_BL_NAME,
                                        NEW_CUST_BL_SHORT_NAME);
        ELSE
            OPEN F_PARA ;
            FETCH F_PARA INTO P_PARA_VALUE ;
            IF F_PARA%NOTFOUND THEN
               CLOSE SEL_SUB ;
               CLOSE F_PARA ;
               RAISE_APPLICATION_ERROR(-20011,'Parameter not defined');
            END IF;
            CLOSE F_PARA ;
            IF P_PARA_VALUE = 'Y' THEN
                 IF NEW_CUST_NAME != P_SUB_ACNT_NAME OR
                    NVL(NEW_CUST_SHORT_NAME,'ZZZZZZZZZZZZZZZZ') !=
                    NVL(P_SUB_ACNT_SHORT_NAME,'ZZZZZZZZZZZZZZZZ') THEN
                    UPDATE FM_SUB_ACCOUNT
                    SET    SUB_ACNT_NAME = NEW_CUST_NAME,
                           SUB_ACNT_SHORT_NAME = NEW_CUST_SHORT_NAME,
                           SUB_BL_ACNT_NAME = NEW_CUST_BL_NAME,
                           SUB_BL_ACNT_SHORT_NAME = NEW_CUST_BL_SHORT_NAME
                    WHERE  CURRENT OF SEL_SUB;
                 END IF;
            END IF;
        END IF;
        CLOSE SEL_SUB;
     END IF;
     IF TRG_MODE = 'I' THEN
        INSERT INTO FM_MAIN_SUB    (MS_MAIN_ACNT_CODE,
                                    MS_SUB_ACNT_CODE,
                                    MS_SUB_ACNT_NAME,
                                    MS_SUB_ACNT_SHORT_NAME,
                                    MS_CR_UID,
                                    MS_CR_DT,
                                    MS_BL_SUB_ACNT_NAME,
                                    MS_BL_SUB_ACNT_SHORT_NAME)
                            VALUES (NEW_CUST_MAIN_ACNT_CODE,
                                    NEW_CUST_CODE,
                                    NEW_CUST_NAME,
                                    NEW_CUST_SHORT_NAME,
                                    NEW_CUST_CR_UID,
                                    NEW_CUST_CR_DT,
                                    NEW_CUST_BL_NAME,
                                    NEW_CUST_BL_SHORT_NAME);
    END IF;
    IF TRG_MODE = 'U' THEN
        IF NEW_CUST_MAIN_ACNT_CODE  != OLD_CUST_MAIN_ACNT_CODE THEN
            UPDATE  FM_MAIN_SUB
               SET  MS_MAIN_ACNT_CODE = NEW_CUST_MAIN_ACNT_CODE
             WHERE  MS_MAIN_ACNT_CODE = OLD_CUST_MAIN_ACNT_CODE
             AND    MS_SUB_ACNT_CODE  = NEW_CUST_CODE;
            UPDATE  FM_ACNT_COMP
               SET  ACOMP_MAIN_ACNT_CODE = NEW_CUST_MAIN_ACNT_CODE
             WHERE  ACOMP_MAIN_ACNT_CODE = OLD_CUST_MAIN_ACNT_CODE;
            UPDATE  FM_ACNT_CURR
               SET  ACURR_MAIN_ACNT_CODE = NEW_CUST_MAIN_ACNT_CODE
             WHERE  ACURR_MAIN_ACNT_CODE = OLD_CUST_MAIN_ACNT_CODE
             AND    ACURR_SUB_ACNT_CODE  = NEW_CUST_CODE;
         END IF;
     END IF;
     IF TRG_MODE = 'D' THEN
        DELETE  FM_MAIN_SUB
        WHERE   MS_MAIN_ACNT_CODE = OLD_CUST_MAIN_ACNT_CODE
        AND     MS_SUB_ACNT_CODE  = OLD_CUST_CODE;
        IF SEL_MS%ISOPEN THEN
             CLOSE SEL_MS;
        END IF;
        OPEN SEL_MS;
        FETCH SEL_MS INTO P_DUMMY;
        IF SEL_MS%NOTFOUND THEN
             DELETE  FM_SUB_ACCOUNT
             WHERE   SUB_ACNT_CODE     = OLD_CUST_CODE;
        END IF;
        CLOSE SEL_MS;
        DELETE  FM_ACNT_COMP
        WHERE   ACOMP_MAIN_ACNT_CODE = OLD_CUST_MAIN_ACNT_CODE
        AND     ACOMP_SUB_ACNT_CODE  = OLD_CUST_CODE;
        DELETE  FM_ACNT_CURR
        WHERE   ACURR_MAIN_ACNT_CODE = OLD_CUST_MAIN_ACNT_CODE
        AND     ACURR_SUB_ACNT_CODE  = OLD_CUST_CODE;
     END IF;
     IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
        INSERT INTO FH_CUSTOMER_HIST  VALUES
                     (OLD_CUST_CODE, OLD_CUST_NAME,
                      OLD_CUST_SHORT_NAME, OLD_CUST_ADD_1,
                      OLD_CUST_ADD_2, OLD_CUST_ADD_3,
                      OLD_CUST_COUNTRY, OLD_CUST_PHONE,
                      OLD_CUST_TELEX_FAX, OLD_CUST_MAIN_ACNT_CODE,
                      OLD_CUST_CR_LMT_AMT, OLD_CUST_CR_LMT_DAYS,
                      OLD_CUST_CONTACT, OLD_CUST_AREA, OLD_CUST_SM,
                      OLD_CUST_DESC, OLD_CUST_CR_UID,
                      OLD_CUST_CR_DT, OLD_CUST_FRZ_FLAG, OLD_CUST_FAX,
                      OLD_CUST_BL_NAME, OLD_CUST_BL_SHORT_NAME,
                      OLD_CUST_BL_ADD_1,OLD_CUST_BL_ADD_2,OLD_CUST_BL_ADD_3);
      END IF;
 END;
/
CREATE OR REPLACE PROCEDURE STP_FM_DEPARTMENT (
 OLD_DEPT_COMP_CODE        IN      VARCHAR2,
 OLD_DEPT_DIVN_CODE        IN      VARCHAR2,
 OLD_DEPT_CODE             IN      VARCHAR2,
 OLD_DEPT_NAME             IN      VARCHAR2,
 OLD_DEPT_SHORT_NAME       IN      VARCHAR2,
 OLD_DEPT_HEADER           IN      VARCHAR2,
 OLD_DEPT_INCHARGE         IN      VARCHAR2,
 OLD_DEPT_CR_UID           IN      VARCHAR2,
 OLD_DEPT_CR_DT            IN      DATE,
 OLD_DEPT_FRZ_FLAG         IN      VARCHAR2,
 NEW_DEPT_COMP_CODE        IN OUT  VARCHAR2,
 NEW_DEPT_DIVN_CODE        IN OUT  VARCHAR2,
 NEW_DEPT_CODE             IN OUT  VARCHAR2,
 NEW_DEPT_NAME             IN OUT  VARCHAR2,
 NEW_DEPT_SHORT_NAME       IN OUT  VARCHAR2,
 NEW_DEPT_HEADER           IN OUT  VARCHAR2,
 NEW_DEPT_INCHARGE         IN OUT  VARCHAR2,
 NEW_DEPT_CR_UID           IN OUT  VARCHAR2,
 NEW_DEPT_CR_DT            IN OUT  DATE,
 NEW_DEPT_FRZ_FLAG         IN OUT  VARCHAR2,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2,
 OLD_DEPT_BL_NAME          IN      VARCHAR2,
 NEW_DEPT_BL_NAME          IN OUT  VARCHAR2,
 OLD_DEPT_BL_SHORT_NAME    IN      VARCHAR2,
 NEW_DEPT_BL_SHORT_NAME    IN OUT  VARCHAR2) AS
BEGIN
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
     NEW_DEPT_CR_DT := SYSDATE;
     NEW_DEPT_CR_UID := NVL(NEW_DEPT_CR_UID, NVL(OLD_DEPT_CR_UID, 'UNDEF'));
END IF;
IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
     INSERT INTO FH_DEPARTMENT_HIST (
			DEPT_COMP_CODE         ,
			DEPT_DIVN_CODE         ,
			DEPT_CODE              ,
			DEPT_NAME              ,
			DEPT_SHORT_NAME        ,
			DEPT_HEADER            ,
			DEPT_INCHARGE          ,
			DEPT_CR_UID            ,
			DEPT_CR_DT             ,
			DEPT_FRZ_FLAG          ,
			DEPT_BL_NAME           ,
			DEPT_BL_SHORT_NAME)
      VALUES (OLD_DEPT_COMP_CODE, OLD_DEPT_DIVN_CODE,
            OLD_DEPT_CODE,      OLD_DEPT_NAME,      OLD_DEPT_SHORT_NAME,
            OLD_DEPT_HEADER,    OLD_DEPT_INCHARGE,  OLD_DEPT_CR_UID,
            OLD_DEPT_CR_DT,     OLD_DEPT_FRZ_FLAG,
	    OLD_DEPT_BL_NAME,   OLD_DEPT_BL_SHORT_NAME) ;
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_DIVISION (
 OLD_DIVN_COMP_CODE        IN      VARCHAR2,
 OLD_DIVN_CODE             IN      VARCHAR2,
 OLD_DIVN_NAME             IN      VARCHAR2,
 OLD_DIVN_SHORT_NAME       IN      VARCHAR2,
 OLD_DIVN_HEADER           IN      VARCHAR2,
 OLD_DIVN_INCHARGE         IN      VARCHAR2,
 OLD_DIVN_CR_UID           IN      VARCHAR2,
 OLD_DIVN_CR_DT            IN      DATE,
 OLD_DIVN_FRZ_FLAG         IN      VARCHAR2,
 NEW_DIVN_COMP_CODE        IN OUT  VARCHAR2,
 NEW_DIVN_CODE             IN OUT  VARCHAR2,
 NEW_DIVN_NAME             IN OUT  VARCHAR2,
 NEW_DIVN_SHORT_NAME       IN OUT  VARCHAR2,
 NEW_DIVN_HEADER           IN OUT  VARCHAR2,
 NEW_DIVN_INCHARGE         IN OUT  VARCHAR2,
 NEW_DIVN_CR_UID           IN OUT  VARCHAR2,
 NEW_DIVN_CR_DT            IN OUT  DATE,
 NEW_DIVN_FRZ_FLAG         IN OUT  VARCHAR2,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2,
 OLD_DIVN_BL_NAME          IN      VARCHAR2,
 NEW_DIVN_BL_NAME          IN OUT  VARCHAR2,
 OLD_DIVN_BL_SHORT_NAME    IN      VARCHAR2,
 NEW_DIVN_BL_SHORT_NAME    IN OUT  VARCHAR2) AS
BEGIN
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
     NEW_DIVN_CR_DT := SYSDATE;
     NEW_DIVN_CR_UID := NVL(NEW_DIVN_CR_UID, NVL(OLD_DIVN_CR_UID, 'UNDEF'));
END IF;
IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
     INSERT INTO FH_DIVISION_HIST  (
			DIVN_COMP_CODE         ,
			DIVN_CODE              ,
			DIVN_NAME              ,
			DIVN_SHORT_NAME        ,
			DIVN_HEADER            ,
			DIVN_INCHARGE          ,
			DIVN_CR_UID            ,
			DIVN_CR_DT             ,
			DIVN_FRZ_FLAG          ,
			DIVN_BL_NAME           ,
			DIVN_BL_SHORT_NAME     )
      VALUES (OLD_DIVN_COMP_CODE,  OLD_DIVN_CODE,   OLD_DIVN_NAME ,
           OLD_DIVN_SHORT_NAME, OLD_DIVN_HEADER, OLD_DIVN_INCHARGE,
           OLD_DIVN_CR_UID,     OLD_DIVN_CR_DT,  OLD_DIVN_FRZ_FLAG,
           OLD_DIVN_BL_NAME, OLD_DIVN_BL_SHORT_NAME);
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_MAIN_ACCOUNT (
 OLD_MAIN_ACNT_CODE        IN      VARCHAR2,
 OLD_MAIN_ACNT_NAME        IN      VARCHAR2,
 OLD_MAIN_ACNT_SHORT_NAME  IN      VARCHAR2,
 OLD_MAIN_ACNT_CATG        IN      VARCHAR2,
 OLD_MAIN_CTL_ACNT_FLAG    IN      VARCHAR2,
 OLD_MAIN_ACTY_CODE_1      IN      VARCHAR2,
 OLD_MAIN_ACTY_CODE_2      IN      VARCHAR2,
 OLD_MAIN_ACNT_TYPE        IN      VARCHAR2,
 OLD_MAIN_OPEN_ENTRY_FLAG  IN      VARCHAR2,
 OLD_MAIN_DESC             IN      VARCHAR2,
 OLD_MAIN_CR_UID           IN      VARCHAR2,
 OLD_MAIN_CR_DT            IN      DATE,
 OLD_MAIN_FRZ_FLAG         IN      VARCHAR2,
 NEW_MAIN_ACNT_CODE        IN OUT  VARCHAR2,
 NEW_MAIN_ACNT_NAME        IN OUT  VARCHAR2,
 NEW_MAIN_ACNT_SHORT_NAME  IN OUT  VARCHAR2,
 NEW_MAIN_ACNT_CATG        IN OUT  VARCHAR2,
 NEW_MAIN_CTL_ACNT_FLAG    IN OUT  VARCHAR2,
 NEW_MAIN_ACTY_CODE_1      IN OUT  VARCHAR2,
 NEW_MAIN_ACTY_CODE_2      IN OUT  VARCHAR2,
 NEW_MAIN_ACNT_TYPE        IN OUT  VARCHAR2,
 NEW_MAIN_OPEN_ENTRY_FLAG  IN OUT  VARCHAR2,
 NEW_MAIN_DESC             IN OUT  VARCHAR2,
 NEW_MAIN_CR_UID           IN OUT  VARCHAR2,
 NEW_MAIN_CR_DT            IN OUT  DATE,
 NEW_MAIN_FRZ_FLAG         IN OUT  VARCHAR2,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2,
 OLD_MAIN_BL_ACNT_NAME        IN      VARCHAR2,
 NEW_MAIN_BL_ACNT_NAME        IN OUT  VARCHAR2,
 OLD_MAIN_BL_ACNT_SHORT_NAME  IN      VARCHAR2,
 NEW_MAIN_BL_ACNT_SHORT_NAME  IN OUT  VARCHAR2) AS
T_ERR_NO NUMBER;
T_MSG CHAR;
T_FLAG CHAR;
BEGIN
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
       IF NVL(NEW_MAIN_ACTY_CODE_1,'ZZZZZZZ') !=
          NVL(OLD_MAIN_ACTY_CODE_1, 'ZZZZZZZ') OR
          NVL(NEW_MAIN_ACTY_CODE_2,'ZZZZZZZ') !=
          NVL(OLD_MAIN_ACTY_CODE_2, 'ZZZZZZZ') THEN
           F_VAL_MAIN_ACTY(NEW_MAIN_ACTY_CODE_1,
                       NEW_MAIN_ACTY_CODE_2, T_ERR_NO);
           IF T_ERR_NO != 0 THEN
              RAISE_APPLICATION_ERROR(-20500 - T_ERR_NO, T_MSG);
           END IF;
       END IF;
       NEW_MAIN_CR_DT := SYSDATE;
       NEW_MAIN_CR_UID := NVL(NEW_MAIN_CR_UID,
                                NVL(OLD_MAIN_CR_UID, 'UNDEF'));
END IF;
IF TRG_MODE = 'U' THEN
       IF NEW_MAIN_ACNT_TYPE != OLD_MAIN_ACNT_TYPE THEN
           F_VAL_CHANGE_ACNT_TYPE(NEW_MAIN_ACNT_CODE, T_ERR_NO);
           IF T_ERR_NO != 0 THEN
               RAISE_APPLICATION_ERROR(-20500 - T_ERR_NO, T_MSG);
           END IF;
       END IF;
       IF (NEW_MAIN_CTL_ACNT_FLAG != OLD_MAIN_CTL_ACNT_FLAG) THEN
           F_VAL_CHANGE_MC_FLAG(NEW_MAIN_ACNT_CODE, T_ERR_NO);
           IF T_ERR_NO != 0 THEN
              RAISE_APPLICATION_ERROR(-20500 - T_ERR_NO, T_MSG);
           END IF;
       END IF;
       IF (NEW_MAIN_OPEN_ENTRY_FLAG != OLD_MAIN_OPEN_ENTRY_FLAG) THEN
          F_VAL_CHANGE_OE_FLAG(NEW_MAIN_ACNT_CODE, T_ERR_NO);
          IF T_ERR_NO != 0 THEN
               RAISE_APPLICATION_ERROR(-20500 - T_ERR_NO,T_MSG);
          END IF;
       END IF;
END IF;
IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
     INSERT INTO FH_MAIN_ACCOUNT_HIST VALUES
          (OLD_MAIN_ACNT_CODE,       OLD_MAIN_ACNT_NAME,
           OLD_MAIN_ACNT_SHORT_NAME, OLD_MAIN_ACNT_CATG,
           OLD_MAIN_CTL_ACNT_FLAG,   OLD_MAIN_ACTY_CODE_1,
           OLD_MAIN_ACTY_CODE_2,     OLD_MAIN_ACNT_TYPE,
           OLD_MAIN_OPEN_ENTRY_FLAG, OLD_MAIN_DESC,       OLD_MAIN_CR_UID,
           OLD_MAIN_CR_DT,           OLD_MAIN_FRZ_FLAG,
           OLD_MAIN_BL_ACNT_NAME,    OLD_MAIN_BL_ACNT_SHORT_NAME );
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_MAIN_SUB (
 OLD_MS_MAIN_ACNT_CODE     IN      VARCHAR2,
 OLD_MS_SUB_ACNT_CODE      IN      VARCHAR2,
 OLD_MS_SUB_ACNT_NAME      IN      VARCHAR2,
 OLD_MS_SUB_ACNT_SHORT_NAME IN      VARCHAR2,
 OLD_MS_CR_UID             IN      VARCHAR2,
 OLD_MS_CR_DT              IN      DATE,
 NEW_MS_MAIN_ACNT_CODE     IN OUT  VARCHAR2,
 NEW_MS_SUB_ACNT_CODE      IN OUT  VARCHAR2,
 NEW_MS_SUB_ACNT_NAME      IN OUT  VARCHAR2,
 NEW_MS_SUB_ACNT_SHORT_NAME IN OUT  VARCHAR2,
 NEW_MS_CR_UID             IN OUT  VARCHAR2,
 NEW_MS_CR_DT              IN OUT  DATE,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2,
 OLD_MS_BL_SUB_ACNT_NAME       IN      VARCHAR2,
 NEW_MS_BL_SUB_ACNT_NAME       IN OUT  VARCHAR2,
 OLD_MS_BL_SUB_ACNT_SHORT_NAME IN      VARCHAR2,
 NEW_MS_BL_SUB_ACNT_SHORT_NAME IN OUT  VARCHAR2) AS
P_CURR_CODE     VARCHAR2(3);
P_COMP_CODE     VARCHAR2(3);
CURSOR SEL_COMP IS
SELECT SCOMP_COMP_CODE
FROM   FM_SUB_COMP
WHERE  SCOMP_SUB_ACNT_CODE = NEW_MS_SUB_ACNT_CODE;
CURSOR SEL_CURR IS
SELECT SCURR_CURR_CODE
FROM   FM_SUB_CURR
WHERE  SCURR_SUB_ACNT_CODE = NEW_MS_SUB_ACNT_CODE;
T_ERR_NO NUMBER;
BEGIN
     IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
          NEW_MS_CR_DT := SYSDATE;
          NEW_MS_CR_UID := NVL(NEW_MS_CR_UID, NVL(OLD_MS_CR_UID, 'UNDEF'));
     END IF;
     IF TRG_MODE = 'I' THEN
        IF NVL(NEW_MS_MAIN_ACNT_CODE,'ZZZZZZZ')
                  != NVL(OLD_MS_MAIN_ACNT_CODE,'ZZZZZZZ') THEN
           F_VAL_MAIN_IS_CTL_ACNT(NEW_MS_MAIN_ACNT_CODE, T_ERR_NO);
           IF T_ERR_NO != 0 THEN
              RAISE_APPLICATION_ERROR(-20500 - T_ERR_NO,
                      'Main account is required to be a Control account');
           END IF;
         END IF;
        IF NVL(NEW_MS_SUB_ACNT_NAME,'ZZZZZZZ') !=
           NVL(OLD_MS_SUB_ACNT_NAME,'ZZZZZZZ')           OR
           NVL(NEW_MS_SUB_ACNT_SHORT_NAME,'ZZZZZZZ') !=
           NVL(OLD_MS_SUB_ACNT_SHORT_NAME,'ZZZZZZZ')     THEN
             F_VAL_SUB_ACNT_NAME(NEW_MS_SUB_ACNT_CODE,
                                 NEW_MS_SUB_ACNT_NAME,
                                 NEW_MS_SUB_ACNT_SHORT_NAME, T_ERR_NO);
             IF T_ERR_NO != 0 THEN
                 RAISE_APPLICATION_ERROR(-20500 - T_ERR_NO,
                             'Invalid Main - Sub account combination') ;
             END IF;
        END IF;
        IF SEL_COMP%ISOPEN THEN
             CLOSE SEL_COMP;
        END IF;
        OPEN SEL_COMP;
        <<COMP_LOOP>>
        LOOP
        FETCH SEL_COMP INTO P_COMP_CODE;
        EXIT WHEN SEL_COMP%NOTFOUND;
        INSERT INTO FM_ACNT_COMP
        (ACOMP_COMP_CODE, ACOMP_MAIN_ACNT_CODE, ACOMP_SUB_ACNT_CODE,
         ACOMP_CR_UID, ACOMP_CR_DT)
        VALUES
        (P_COMP_CODE, NEW_MS_MAIN_ACNT_CODE, NEW_MS_SUB_ACNT_CODE,
         NEW_MS_CR_UID, SYSDATE);
        END LOOP COMP_LOOP;
        CLOSE SEL_COMP;
        IF SEL_CURR%ISOPEN THEN
             CLOSE SEL_CURR;
        END IF;
        OPEN SEL_CURR;
        <<CURR_LOOP>>
        LOOP
        FETCH SEL_CURR INTO P_CURR_CODE;
        EXIT WHEN SEL_CURR%NOTFOUND;
        INSERT INTO FM_ACNT_CURR
        (ACURR_CURR_CODE, ACURR_MAIN_ACNT_CODE, ACURR_SUB_ACNT_CODE,
         ACURR_CR_UID, ACURR_CR_DT)
        VALUES
        (P_CURR_CODE, NEW_MS_MAIN_ACNT_CODE, NEW_MS_SUB_ACNT_CODE,
         NEW_MS_CR_UID, SYSDATE);
        END LOOP CURR_LOOP;
        CLOSE SEL_CURR;
     END IF;
     IF TRG_MODE = 'D' THEN
          DELETE FROM FM_ACNT_COMP
          WHERE  ACOMP_MAIN_ACNT_CODE = OLD_MS_MAIN_ACNT_CODE
          AND    ACOMP_SUB_ACNT_CODE = OLD_MS_SUB_ACNT_CODE;
          DELETE FROM FM_ACNT_CURR
          WHERE  ACURR_MAIN_ACNT_CODE = OLD_MS_MAIN_ACNT_CODE
          AND    ACURR_SUB_ACNT_CODE = OLD_MS_SUB_ACNT_CODE;
          INSERT INTO FH_MAIN_SUB_HIST VALUES
          (OLD_MS_MAIN_ACNT_CODE, OLD_MS_SUB_ACNT_CODE,
           OLD_MS_SUB_ACNT_NAME,  OLD_MS_SUB_ACNT_SHORT_NAME,
           OLD_MS_CR_UID,         OLD_MS_CR_DT,
           OLD_MS_BL_SUB_ACNT_NAME,  OLD_MS_BL_SUB_ACNT_SHORT_NAME);
     END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_SUB_ACCOUNT (
 OLD_SUB_ACNT_CODE         IN      VARCHAR2,
 OLD_SUB_ACNT_NAME         IN      VARCHAR2,
 OLD_SUB_ACNT_SHORT_NAME   IN      VARCHAR2,
 OLD_SUB_DESC              IN      VARCHAR2,
 OLD_SUB_CR_UID            IN      VARCHAR2,
 OLD_SUB_CR_DT             IN      DATE,
 OLD_SUB_FRZ_FLAG          IN      VARCHAR2,
 NEW_SUB_ACNT_CODE         IN OUT  VARCHAR2,
 NEW_SUB_ACNT_NAME         IN OUT  VARCHAR2,
 NEW_SUB_ACNT_SHORT_NAME   IN OUT  VARCHAR2,
 NEW_SUB_DESC              IN OUT  VARCHAR2,
 NEW_SUB_CR_UID            IN OUT  VARCHAR2,
 NEW_SUB_CR_DT             IN OUT  DATE,
 NEW_SUB_FRZ_FLAG          IN OUT  VARCHAR2,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2,
 OLD_SUB_BL_ACNT_NAME         IN      VARCHAR2,
 NEW_SUB_BL_ACNT_NAME         IN OUT  VARCHAR2,
 OLD_SUB_BL_ACNT_SHORT_NAME   IN      VARCHAR2,
 NEW_SUB_BL_ACNT_SHORT_NAME   IN OUT  VARCHAR2) AS
CURSOR F_PARA IS
SELECT PARA_VALUE
FROM   FP_PARAMETER
WHERE  PARA_ID = 'UNIQUE.SUBACNT' ;
P_ERR_NO      NUMBER ;
P_PARA_VALUE  VARCHAR2(1);
BEGIN
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
     NEW_SUB_CR_DT := SYSDATE;
     NEW_SUB_CR_UID := NVL(NEW_SUB_CR_UID, NVL(OLD_SUB_CR_UID, 'UNDEF'));
END IF;
IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
     INSERT INTO FH_SUB_ACCOUNT_HIST VALUES
          (OLD_SUB_ACNT_CODE,       OLD_SUB_ACNT_NAME,
           OLD_SUB_ACNT_SHORT_NAME, OLD_SUB_DESC,
           OLD_SUB_CR_UID,          OLD_SUB_CR_DT,      OLD_SUB_FRZ_FLAG,
           OLD_SUB_BL_ACNT_NAME, OLD_SUB_BL_ACNT_SHORT_NAME);
END IF;
IF TRG_MODE = 'U' THEN
   IF OLD_SUB_ACNT_NAME != NEW_SUB_ACNT_NAME OR
      OLD_SUB_ACNT_SHORT_NAME != NEW_SUB_ACNT_SHORT_NAME OR
      OLD_SUB_BL_ACNT_NAME != NEW_SUB_BL_ACNT_NAME OR
      OLD_SUB_BL_ACNT_SHORT_NAME != NEW_SUB_BL_ACNT_SHORT_NAME THEN
      OPEN F_PARA ;
      FETCH F_PARA INTO P_PARA_VALUE ;
          IF F_PARA%NOTFOUND THEN
             CLOSE F_PARA ;
             RAISE_APPLICATION_ERROR(-20011,'Parameter not defined');
          END IF;
      CLOSE F_PARA ;
     IF P_PARA_VALUE = 'Y' THEN
        F_UPD_SUB_NAME(NEW_SUB_ACNT_CODE,NEW_SUB_ACNT_NAME,
                       NEW_SUB_ACNT_SHORT_NAME,P_ERR_NO);
        IF P_ERR_NO != 0 THEN
           RAISE_APPLICATION_ERROR(-20500-P_ERR_NO,'Invalid Main Sub Combination');
        END IF;
        F_UPD_BL_SUB_NAME(NEW_SUB_ACNT_CODE,NEW_SUB_BL_ACNT_NAME,
                       NEW_SUB_BL_ACNT_SHORT_NAME,P_ERR_NO);
        IF P_ERR_NO != 0 THEN
           RAISE_APPLICATION_ERROR(-20500-P_ERR_NO,'Invalid Main Sub Combination');
        END IF;
     END IF ;
END IF;
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_SUB_COMP (
 OLD_SCOMP_COMP_CODE       IN      VARCHAR2,
 OLD_SCOMP_SUB_ACNT_CODE   IN      VARCHAR2,
 OLD_SCOMP_CR_UID          IN      VARCHAR2,
 OLD_SCOMP_CR_DT           IN      DATE,
 NEW_SCOMP_COMP_CODE       IN OUT  VARCHAR2,
 NEW_SCOMP_SUB_ACNT_CODE   IN OUT  VARCHAR2,
 NEW_SCOMP_CR_UID          IN OUT  VARCHAR2,
 NEW_SCOMP_CR_DT           IN OUT  DATE,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2) AS
P_SUB_ACNT_CODE      VARCHAR2(6);
P_MAIN_ACNT_CODE     VARCHAR2(6);
CURSOR SEL_MAIN_OF_SUB IS
       SELECT MS_MAIN_ACNT_CODE
       FROM   FM_MAIN_SUB
       WHERE  MS_SUB_ACNT_CODE = P_SUB_ACNT_CODE;
BEGIN
/*
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
     NEW_SCOMP_CR_DT := SYSDATE;
     NEW_SCOMP_CR_UID := NVL(NEW_SCOMP_CR_UID,
                          NVL(OLD_SCOMP_CR_UID, 'UNDEF'));
END IF;
*/
IF TRG_MODE = 'U' THEN
   RAISE_APPLICATION_ERROR(-20001, 'Cannot update');
END IF;
IF TRG_MODE = 'I' THEN
   P_SUB_ACNT_CODE := NEW_SCOMP_SUB_ACNT_CODE;
   IF SEL_MAIN_OF_SUB%ISOPEN THEN
        CLOSE SEL_MAIN_OF_SUB;
   END IF;
   OPEN SEL_MAIN_OF_SUB;
   <<MAIN_LOOP>>
   LOOP
   FETCH SEL_MAIN_OF_SUB INTO P_MAIN_ACNT_CODE;
   EXIT WHEN SEL_MAIN_OF_SUB%NOTFOUND;
   INSERT INTO FM_ACNT_COMP
   (ACOMP_COMP_CODE, ACOMP_MAIN_ACNT_CODE, ACOMP_SUB_ACNT_CODE,
    ACOMP_CR_UID, ACOMP_CR_DT)
   VALUES
   (NEW_SCOMP_COMP_CODE, P_MAIN_ACNT_CODE, P_SUB_ACNT_CODE,
    NEW_SCOMP_CR_UID, SYSDATE);
   END LOOP MAIN_LOOP;
   CLOSE SEL_MAIN_OF_SUB;
END IF;
IF TRG_MODE = 'D' THEN
   DELETE FROM FM_ACNT_COMP
   WHERE  (ACOMP_COMP_CODE = OLD_SCOMP_COMP_CODE)
   AND    (ACOMP_SUB_ACNT_CODE = OLD_SCOMP_SUB_ACNT_CODE);
END IF;
IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
   INSERT INTO FH_SUB_COMP_HIST VALUES
        (OLD_SCOMP_COMP_CODE, OLD_SCOMP_SUB_ACNT_CODE,
         OLD_SCOMP_CR_UID, OLD_SCOMP_CR_DT);
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_SUB_CURR (
 OLD_SCURR_CURR_CODE       IN      VARCHAR2,
 OLD_SCURR_SUB_ACNT_CODE   IN      VARCHAR2,
 OLD_SCURR_CR_UID          IN      VARCHAR2,
 OLD_SCURR_CR_DT           IN      DATE,
 NEW_SCURR_CURR_CODE       IN OUT  VARCHAR2,
 NEW_SCURR_SUB_ACNT_CODE   IN OUT  VARCHAR2,
 NEW_SCURR_CR_UID          IN OUT  VARCHAR2,
 NEW_SCURR_CR_DT           IN OUT  DATE,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2) AS
P_SUB_ACNT_CODE      VARCHAR2(6);
P_MAIN_ACNT_CODE     VARCHAR2(6);
CURSOR SEL_MAIN_OF_SUB IS
       SELECT MS_MAIN_ACNT_CODE
       FROM   FM_MAIN_SUB
       WHERE  MS_SUB_ACNT_CODE = P_SUB_ACNT_CODE;
BEGIN
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
     NEW_SCURR_CR_DT := SYSDATE;
     NEW_SCURR_CR_UID := NVL(NEW_SCURR_CR_UID,
                             NVL(OLD_SCURR_CR_UID, 'UNDEF'));
END IF;
IF TRG_MODE = 'U' THEN
    RAISE_APPLICATION_ERROR(-20002, 'Cannot update');
END IF;
IF TRG_MODE = 'I' THEN
   P_SUB_ACNT_CODE := NEW_SCURR_SUB_ACNT_CODE;
   IF SEL_MAIN_OF_SUB%ISOPEN THEN
        CLOSE SEL_MAIN_OF_SUB;
   END IF;
   OPEN SEL_MAIN_OF_SUB;
   <<MAIN_LOOP>>
   LOOP
   FETCH SEL_MAIN_OF_SUB INTO P_MAIN_ACNT_CODE;
   EXIT WHEN SEL_MAIN_OF_SUB%NOTFOUND;
   INSERT INTO FM_ACNT_CURR
   (ACURR_CURR_CODE, ACURR_MAIN_ACNT_CODE, ACURR_SUB_ACNT_CODE,
    ACURR_CR_UID, ACURR_CR_DT)
   VALUES
   (NEW_SCURR_CURR_CODE, P_MAIN_ACNT_CODE, P_SUB_ACNT_CODE,
    NEW_SCURR_CR_UID, SYSDATE);
   END LOOP MAIN_LOOP;
   CLOSE SEL_MAIN_OF_SUB;
END IF;
IF TRG_MODE = 'D' THEN
   DELETE FROM FM_ACNT_CURR
   WHERE  (ACURR_CURR_CODE = OLD_SCURR_CURR_CODE)
   AND    (ACURR_SUB_ACNT_CODE = OLD_SCURR_SUB_ACNT_CODE);
END IF;
IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
     INSERT INTO FH_SUB_CURR_HIST VALUES
          (OLD_SCURR_CURR_CODE, OLD_SCURR_SUB_ACNT_CODE,
           OLD_SCURR_CR_UID, OLD_SCURR_CR_DT);
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_SUPPLIER (
 OLD_SUPP_CODE             IN      VARCHAR2,
 OLD_SUPP_NAME             IN      VARCHAR2,
 OLD_SUPP_SHORT_NAME       IN      VARCHAR2,
 OLD_SUPP_ADD_1            IN      VARCHAR2,
 OLD_SUPP_ADD_2            IN      VARCHAR2,
 OLD_SUPP_ADD_3            IN      VARCHAR2,
 OLD_SUPP_COUNTRY          IN      VARCHAR2,
 OLD_SUPP_PHONE            IN      VARCHAR2,
 OLD_SUPP_TELEX_FAX        IN      VARCHAR2,
 OLD_SUPP_MAIN_ACNT_CODE   IN      VARCHAR2,
 OLD_SUPP_CR_LMT_AMT       IN      NUMBER,
 OLD_SUPP_CR_LMT_DAYS      IN      NUMBER,
 OLD_SUPP_CONTACT          IN      VARCHAR2,
 OLD_SUPP_AREA             IN      VARCHAR2,
 OLD_SUPP_SM               IN      VARCHAR2,
 OLD_SUPP_CATG             IN      VARCHAR2,
 OLD_SUPP_MODE_PYMT        IN      VARCHAR2,
 OLD_SUPP_BANK_ACNT        IN      VARCHAR2,
 OLD_SUPP_BANK_NAME        IN      VARCHAR2,
 OLD_SUPP_BANK_BRANCH      IN      VARCHAR2,
 OLD_SUPP_DESC             IN      VARCHAR2,
 OLD_SUPP_CR_UID           IN      VARCHAR2,
 OLD_SUPP_CR_DT            IN      DATE,
 OLD_SUPP_FRZ_FLAG         IN      VARCHAR2,
 OLD_SUPP_FAX              IN      VARCHAR2,
 OLD_SUPP_BANK_ADD1        IN      VARCHAR2,
 OLD_SUPP_BANK_ADD2        IN      VARCHAR2,
 OLD_SUPP_BANK_ADD3        IN      VARCHAR2,
 NEW_SUPP_CODE             IN OUT  VARCHAR2,
 NEW_SUPP_NAME             IN OUT  VARCHAR2,
 NEW_SUPP_SHORT_NAME       IN OUT  VARCHAR2,
 NEW_SUPP_ADD_1            IN OUT  VARCHAR2,
 NEW_SUPP_ADD_2            IN OUT  VARCHAR2,
 NEW_SUPP_ADD_3            IN OUT  VARCHAR2,
 NEW_SUPP_COUNTRY          IN OUT  VARCHAR2,
 NEW_SUPP_PHONE            IN OUT  VARCHAR2,
 NEW_SUPP_TELEX_FAX        IN OUT  VARCHAR2,
 NEW_SUPP_MAIN_ACNT_CODE   IN OUT  VARCHAR2,
 NEW_SUPP_CR_LMT_AMT       IN OUT  NUMBER,
 NEW_SUPP_CR_LMT_DAYS      IN OUT  NUMBER,
 NEW_SUPP_CONTACT          IN OUT  VARCHAR2,
 NEW_SUPP_AREA             IN OUT  VARCHAR2,
 NEW_SUPP_SM               IN OUT  VARCHAR2,
 NEW_SUPP_CATG             IN OUT  VARCHAR2,
 NEW_SUPP_MODE_PYMT        IN OUT  VARCHAR2,
 NEW_SUPP_BANK_ACNT        IN OUT  VARCHAR2,
 NEW_SUPP_BANK_NAME        IN OUT  VARCHAR2,
 NEW_SUPP_BANK_BRANCH      IN OUT  VARCHAR2,
 NEW_SUPP_DESC             IN OUT  VARCHAR2,
 NEW_SUPP_CR_UID           IN OUT  VARCHAR2,
 NEW_SUPP_CR_DT            IN OUT  DATE,
 NEW_SUPP_FRZ_FLAG         IN OUT  VARCHAR2,
 NEW_SUPP_FAX              IN OUT  VARCHAR2,
 NEW_SUPP_BANK_ADD1        IN OUT  VARCHAR2,
 NEW_SUPP_BANK_ADD2        IN OUT  VARCHAR2,
 NEW_SUPP_BANK_ADD3        IN OUT  VARCHAR2,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2,
 OLD_SUPP_BL_NAME          IN      VARCHAR2,
 NEW_SUPP_BL_NAME          IN OUT  VARCHAR2,
 OLD_SUPP_BL_SHORT_NAME    IN      VARCHAR2,
 NEW_SUPP_BL_SHORT_NAME    IN OUT  VARCHAR2,
 OLD_SUPP_BL_ADD_1         IN      VARCHAR2,
 NEW_SUPP_BL_ADD_1         IN OUT  VARCHAR2,
 OLD_SUPP_BL_ADD_2         IN      VARCHAR2,
 NEW_SUPP_BL_ADD_2         IN OUT  VARCHAR2,
 OLD_SUPP_BL_ADD_3         IN      VARCHAR2,
 NEW_SUPP_BL_ADD_3         IN OUT  VARCHAR2) AS
CURSOR F_PARA IS
SELECT PARA_VALUE
FROM   FP_PARAMETER
WHERE  PARA_ID = 'UNIQUE.SUBACNT' ;
P_ERR_NO      NUMBER ;
P_PARA_VALUE  VARCHAR2(1);
CURSOR SEL_SUB IS
SELECT SUB_ACNT_NAME, SUB_ACNT_SHORT_NAME
FROM   FM_SUB_ACCOUNT
WHERE  SUB_ACNT_CODE = NEW_SUPP_CODE
FOR UPDATE OF SUB_ACNT_NAME, SUB_ACNT_SHORT_NAME;
P_SUB_ACNT_NAME        VARCHAR2(60);
P_SUB_ACNT_SHORT_NAME  VARCHAR2(15);
CURSOR SEL_MS IS
SELECT 'X'
FROM   FM_MAIN_SUB
WHERE  MS_SUB_ACNT_CODE = OLD_SUPP_CODE;
P_DUMMY          VARCHAR2(1);
BEGIN
     IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
        NEW_SUPP_CR_DT := SYSDATE;
        NEW_SUPP_CR_UID := NVL(NEW_SUPP_CR_UID,
                             NVL(OLD_SUPP_CR_UID, 'UNDEF'));
        IF SEL_SUB%ISOPEN THEN
             CLOSE SEL_SUB;
        END IF;
        OPEN SEL_SUB;
        FETCH SEL_SUB INTO P_SUB_ACNT_NAME, P_SUB_ACNT_SHORT_NAME;
        IF SEL_SUB%NOTFOUND THEN
            INSERT INTO FM_SUB_ACCOUNT (SUB_ACNT_CODE,
                                        SUB_ACNT_NAME,
                                        SUB_ACNT_SHORT_NAME,
                                        SUB_CR_UID,
                                        SUB_CR_DT,
                                        SUB_FRZ_FLAG,
                                        SUB_BL_ACNT_NAME,
                                        SUB_BL_ACNT_SHORT_NAME)
                                VALUES (NEW_SUPP_CODE,
                                        NEW_SUPP_NAME,
                                        NEW_SUPP_SHORT_NAME,
                                        NEW_SUPP_CR_UID,
                                        NEW_SUPP_CR_DT,'N',
                                        NEW_SUPP_BL_NAME,
                                        NEW_SUPP_BL_SHORT_NAME);
        ELSE
            OPEN F_PARA ;
            FETCH F_PARA INTO P_PARA_VALUE ;
            IF F_PARA%NOTFOUND THEN
               CLOSE SEL_SUB ;
               CLOSE F_PARA ;
               RAISE_APPLICATION_ERROR(-20011,'Parameter not defined');
            END IF;
            CLOSE F_PARA ;
            IF P_PARA_VALUE = 'Y' THEN
                 IF NEW_SUPP_NAME != P_SUB_ACNT_NAME OR
                    NVL(NEW_SUPP_SHORT_NAME,'ZZZZZZZZZZZZZZZZ') !=
                    NVL(P_SUB_ACNT_SHORT_NAME,'ZZZZZZZZZZZZZZZZ') THEN
                    UPDATE FM_SUB_ACCOUNT
                    SET    SUB_ACNT_NAME = NEW_SUPP_NAME,
                           SUB_ACNT_SHORT_NAME = NEW_SUPP_SHORT_NAME,
                           SUB_BL_ACNT_NAME = NEW_SUPP_BL_NAME,
                           SUB_BL_ACNT_SHORT_NAME = NEW_SUPP_BL_SHORT_NAME
                    WHERE  CURRENT OF SEL_SUB;
                 END IF;
            END IF;
        END IF;
        CLOSE SEL_SUB;
     END IF;
     IF TRG_MODE = 'I' THEN
        INSERT INTO FM_MAIN_SUB    (MS_MAIN_ACNT_CODE,
                                    MS_SUB_ACNT_CODE,
                                    MS_SUB_ACNT_NAME,
                                    MS_SUB_ACNT_SHORT_NAME,
                                    MS_CR_UID,
                                    MS_CR_DT,
                                    MS_BL_SUB_ACNT_NAME,
                                    MS_BL_SUB_ACNT_SHORT_NAME)
                            VALUES (NEW_SUPP_MAIN_ACNT_CODE,
                                    NEW_SUPP_CODE,
                                    NEW_SUPP_NAME,
                                    NEW_SUPP_SHORT_NAME,
                                    NEW_SUPP_CR_UID,
                                    NEW_SUPP_CR_DT,
                                    NEW_SUPP_BL_NAME,
                                    NEW_SUPP_BL_SHORT_NAME) ;
    END IF;
    IF TRG_MODE = 'U' THEN
          IF NEW_SUPP_MAIN_ACNT_CODE != OLD_SUPP_MAIN_ACNT_CODE THEN
              UPDATE  FM_MAIN_SUB
                 SET  MS_MAIN_ACNT_CODE = NEW_SUPP_MAIN_ACNT_CODE
               WHERE  MS_MAIN_ACNT_CODE = OLD_SUPP_MAIN_ACNT_CODE
               AND    MS_SUB_ACNT_CODE  = NEW_SUPP_CODE;
              UPDATE  FM_ACNT_COMP
                 SET  ACOMP_MAIN_ACNT_CODE = NEW_SUPP_MAIN_ACNT_CODE
               WHERE  ACOMP_MAIN_ACNT_CODE = OLD_SUPP_MAIN_ACNT_CODE
               AND    ACOMP_SUB_ACNT_CODE  = NEW_SUPP_CODE;
              UPDATE  FM_ACNT_CURR
                 SET  ACURR_MAIN_ACNT_CODE = NEW_SUPP_MAIN_ACNT_CODE
               WHERE  ACURR_MAIN_ACNT_CODE = OLD_SUPP_MAIN_ACNT_CODE
               AND    ACURR_SUB_ACNT_CODE  = NEW_SUPP_CODE;
           END IF;
     END IF;
     IF TRG_MODE = 'D' THEN
        DELETE  FM_MAIN_SUB
         WHERE  MS_MAIN_ACNT_CODE    = OLD_SUPP_MAIN_ACNT_CODE
         AND    MS_SUB_ACNT_CODE     = OLD_SUPP_CODE;
        OPEN SEL_MS;
        FETCH SEL_MS INTO P_DUMMY;
        IF SEL_MS%NOTFOUND THEN
             DELETE  FM_SUB_ACCOUNT
             WHERE   SUB_ACNT_CODE     = OLD_SUPP_CODE;
        END IF;
        CLOSE SEL_MS;
        DELETE  FM_ACNT_COMP
         WHERE  ACOMP_MAIN_ACNT_CODE = OLD_SUPP_MAIN_ACNT_CODE
         AND    ACOMP_SUB_ACNT_CODE  = OLD_SUPP_CODE;
        DELETE  FM_ACNT_CURR
         WHERE  ACURR_MAIN_ACNT_CODE = OLD_SUPP_MAIN_ACNT_CODE
         AND    ACURR_SUB_ACNT_CODE  = OLD_SUPP_CODE;
     END IF;
     IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
        INSERT INTO FH_SUPPLIER_HIST VALUES
                    (OLD_SUPP_CODE, OLD_SUPP_NAME,
                     OLD_SUPP_SHORT_NAME, OLD_SUPP_ADD_1,
                     OLD_SUPP_ADD_2, OLD_SUPP_ADD_3,
                     OLD_SUPP_COUNTRY, OLD_SUPP_PHONE,
                     OLD_SUPP_TELEX_FAX,
                     OLD_SUPP_MAIN_ACNT_CODE,
                     OLD_SUPP_CR_LMT_AMT ,
                     OLD_SUPP_CR_LMT_DAYS, OLD_SUPP_CONTACT,
                     OLD_SUPP_AREA, OLD_SUPP_SM,
                     OLD_SUPP_CATG, OLD_SUPP_MODE_PYMT,
                     OLD_SUPP_BANK_ACNT, OLD_SUPP_BANK_NAME,
                     OLD_SUPP_BANK_BRANCH,OLD_SUPP_DESC,
                     OLD_SUPP_CR_UID, OLD_SUPP_CR_DT,
                     OLD_SUPP_FRZ_FLAG, OLD_SUPP_FAX,
                     OLD_SUPP_BANK_ADD1, OLD_SUPP_BANK_ADD2,
                     OLD_SUPP_BANK_ADD3,
                     OLD_SUPP_BL_NAME,
                     OLD_SUPP_BL_SHORT_NAME, OLD_SUPP_BL_ADD_1,
                     OLD_SUPP_BL_ADD_2, OLD_SUPP_BL_ADD_3) ;
      END IF;
 END;
/
CREATE OR REPLACE PROCEDURE STP_FM_TRANSACTION (
 OLD_TRAN_CODE             IN      VARCHAR2,
 OLD_TRAN_TYPE             IN      VARCHAR2,
 OLD_TRAN_NAME             IN      VARCHAR2,
 OLD_TRAN_DR_HEADER        IN      VARCHAR2,
 OLD_TRAN_CR_HEADER        IN      VARCHAR2,
 OLD_TRAN_CASH_BANK_FLAG   IN      VARCHAR2,
 OLD_TRAN_DFLT_MAIN_ACNT_CODE IN      VARCHAR2,
 OLD_TRAN_DFLT_SUB_ACNT_CODE  IN      VARCHAR2,
 OLD_TRAN_MODE_POSTING     IN      VARCHAR2,
 OLD_TRAN_ACNT_CATG        IN      VARCHAR2,
 OLD_TRAN_MIN_AMT          IN      NUMBER,
 OLD_TRAN_MAX_AMT          IN      NUMBER,
 OLD_TRAN_SELF_REV         IN      VARCHAR2,
 OLD_TRAN_EXGE_RATE_APPLY  IN      VARCHAR2,
 OLD_TRAN_AUTO_PRINT_FLAG  IN      VARCHAR2,
 OLD_TRAN_CTL_TOTAL        IN      VARCHAR2,
 OLD_TRAN_DOC_NO_GENERATE  IN      VARCHAR2,
 OLD_TRAN_PRINT_NARR_FLAG  IN      VARCHAR2,
 OLD_TRAN_CR_UID           IN      VARCHAR2,
 OLD_TRAN_CR_DT            IN      DATE,
 OLD_TRAN_FRZ_FLAG         IN      VARCHAR2,
 NEW_TRAN_CODE             IN OUT  VARCHAR2,
 NEW_TRAN_TYPE             IN OUT  VARCHAR2,
 NEW_TRAN_NAME             IN OUT  VARCHAR2,
 NEW_TRAN_DR_HEADER        IN OUT  VARCHAR2,
 NEW_TRAN_CR_HEADER        IN OUT  VARCHAR2,
 NEW_TRAN_CASH_BANK_FLAG   IN OUT  VARCHAR2,
 NEW_TRAN_DFLT_MAIN_ACNT_CODE IN OUT  VARCHAR2,
 NEW_TRAN_DFLT_SUB_ACNT_CODE  IN OUT  VARCHAR2,
 NEW_TRAN_MODE_POSTING     IN OUT  VARCHAR2,
 NEW_TRAN_ACNT_CATG        IN OUT  VARCHAR2,
 NEW_TRAN_MIN_AMT          IN OUT  NUMBER,
 NEW_TRAN_MAX_AMT          IN OUT  NUMBER,
 NEW_TRAN_SELF_REV         IN OUT  VARCHAR2,
 NEW_TRAN_EXGE_RATE_APPLY  IN OUT  VARCHAR2,
 NEW_TRAN_AUTO_PRINT_FLAG  IN OUT  VARCHAR2,
 NEW_TRAN_CTL_TOTAL        IN OUT  VARCHAR2,
 NEW_TRAN_DOC_NO_GENERATE  IN OUT  VARCHAR2,
 NEW_TRAN_PRINT_NARR_FLAG  IN OUT  VARCHAR2,
 NEW_TRAN_CR_UID           IN OUT  VARCHAR2,
 NEW_TRAN_CR_DT            IN OUT  DATE,
 NEW_TRAN_FRZ_FLAG         IN OUT  VARCHAR2,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2,
 OLD_TRAN_BL_NAME          IN      VARCHAR2,
 NEW_TRAN_BL_NAME          IN OUT  VARCHAR2) AS
T_ERR_NO  NUMBER;
T_MSG    CHAR  ;
BEGIN
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
     NEW_TRAN_CR_DT := SYSDATE;
     NEW_TRAN_CR_UID := NVL(NEW_TRAN_CR_UID, NVL(OLD_TRAN_CR_UID, 'UNDEF'));
END IF;
IF TRG_MODE = 'U' THEN
         IF NEW_TRAN_MODE_POSTING != OLD_TRAN_MODE_POSTING      OR
            OLD_TRAN_ACNT_CATG    != NEW_TRAN_ACNT_CATG         OR
            OLD_TRAN_ACNT_CATG    != NEW_TRAN_ACNT_CATG         OR
            OLD_TRAN_MIN_AMT      != NEW_TRAN_MIN_AMT           OR
            OLD_TRAN_MAX_AMT      != NEW_TRAN_MAX_AMT           OR
            OLD_TRAN_CTL_TOTAL    != NEW_TRAN_CTL_TOTAL            THEN
             F_VAL_NO_TRAN_EXIST(NEW_TRAN_CODE, 'U', T_ERR_NO);
             IF T_ERR_NO != 0 THEN
                  RAISE_APPLICATION_ERROR (-20500 - T_ERR_NO, T_MSG);
              END IF;
          END IF;
END IF;
IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
INSERT INTO FH_TRANSACTION_HIST VALUES (OLD_TRAN_CODE,
                                        OLD_TRAN_TYPE,
                                        OLD_TRAN_NAME,
                                        OLD_TRAN_DR_HEADER,
                                        OLD_TRAN_CR_HEADER,
                                        OLD_TRAN_CASH_BANK_FLAG,
                                        OLD_TRAN_DFLT_MAIN_ACNT_CODE,
                                        OLD_TRAN_DFLT_SUB_ACNT_CODE,
                                        OLD_TRAN_MODE_POSTING,
                                        OLD_TRAN_ACNT_CATG,
                                        OLD_TRAN_MIN_AMT,
                                        OLD_TRAN_MAX_AMT,
                                        OLD_TRAN_SELF_REV,
                                        OLD_TRAN_EXGE_RATE_APPLY,
                                        OLD_TRAN_AUTO_PRINT_FLAG,
                                        OLD_TRAN_CTL_TOTAL,
                                        OLD_TRAN_DOC_NO_GENERATE,
                                        OLD_TRAN_PRINT_NARR_FLAG,
                                        OLD_TRAN_CR_UID,
                                        OLD_TRAN_CR_DT,
                                        OLD_TRAN_FRZ_FLAG,
                                        OLD_TRAN_BL_NAME) ;
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_TRAN_APPR_GROUP (
 OLD_TAG_TRAN_CODE         IN      VARCHAR2,
 OLD_TAG_GROUP_CODE        IN      VARCHAR2,
 OLD_TAG_CR_UID            IN      VARCHAR2,
 OLD_TAG_CR_DT             IN      DATE,
 NEW_TAG_TRAN_CODE         IN OUT  VARCHAR2,
 NEW_TAG_GROUP_CODE        IN OUT  VARCHAR2,
 NEW_TAG_CR_UID            IN OUT  VARCHAR2,
 NEW_TAG_CR_DT             IN OUT  DATE,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2) AS
BEGIN
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
     NEW_TAG_CR_DT := SYSDATE;
     NEW_TAG_CR_UID := NVL(NEW_TAG_CR_UID, NVL(OLD_TAG_CR_UID, 'UNDEF'));
END IF;
IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
     INSERT INTO FH_TRAN_APPR_GROUP_HIST VALUES (OLD_TAG_TRAN_CODE,
                                                 OLD_TAG_GROUP_CODE,
                                                 OLD_TAG_CR_UID,
                                                 OLD_TAG_CR_DT);
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_TRAN_APPR_LEVEL (
 OLD_ALVL_TRAN_CODE        IN      VARCHAR2,
 OLD_ALVL_USR_LVL          IN      NUMBER,
 OLD_ALVL_USR_AMT_FRM      IN      NUMBER,
 OLD_ALVL_USR_AMT_TO       IN      NUMBER,
 OLD_ALVL_CR_UID           IN      VARCHAR2,
 OLD_ALVL_CR_DT            IN      DATE,
 NEW_ALVL_TRAN_CODE        IN OUT  VARCHAR2,
 NEW_ALVL_USR_LVL          IN OUT  NUMBER,
 NEW_ALVL_USR_AMT_FRM      IN OUT  NUMBER,
 NEW_ALVL_USR_AMT_TO       IN OUT  NUMBER,
 NEW_ALVL_CR_UID           IN OUT  VARCHAR2,
 NEW_ALVL_CR_DT            IN OUT  DATE,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2) AS
BEGIN
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
     NEW_ALVL_CR_DT := SYSDATE;
     NEW_ALVL_CR_UID := NVL(NEW_ALVL_CR_UID, NVL(OLD_ALVL_CR_UID, 'UNDEF'));
END IF;
IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
    INSERT INTO FH_TRAN_APPR_LEVEL_HIST VALUES (OLD_ALVL_TRAN_CODE,
                                                OLD_ALVL_USR_LVL,
                                                OLD_ALVL_USR_AMT_FRM,
                                                OLD_ALVL_USR_AMT_TO,
                                                OLD_ALVL_CR_UID,
                                                OLD_ALVL_CR_DT);
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_VALID_COMB (
 OLD_VCM_SEQ_NO                IN      NUMBER,
 OLD_VCM_LOW_COMP_CODE         IN      VARCHAR2,
 OLD_VCM_LOW_MAIN_ACNT_CODE    IN      VARCHAR2,
 OLD_VCM_LOW_SUB_ACNT_CODE     IN      VARCHAR2,
 OLD_VCM_LOW_DIVN_CODE         IN      VARCHAR2,
 OLD_VCM_LOW_DEPT_CODE         IN      VARCHAR2,
 OLD_VCM_LOW_ANLY_CODE_1       IN      VARCHAR2,
 OLD_VCM_LOW_ANLY_CODE_2       IN      VARCHAR2,
 OLD_VCM_HIGH_COMP_CODE        IN      VARCHAR2,
 OLD_VCM_HIGH_MAIN_ACNT_CODE   IN      VARCHAR2,
 OLD_VCM_HIGH_SUB_ACNT_CODE    IN      VARCHAR2,
 OLD_VCM_HIGH_DIVN_CODE        IN      VARCHAR2,
 OLD_VCM_HIGH_DEPT_CODE        IN      VARCHAR2,
 OLD_VCM_HIGH_ANLY_CODE_1      IN      VARCHAR2,
 OLD_VCM_HIGH_ANLY_CODE_2      IN      VARCHAR2,
 OLD_VCM_IE_CODE               IN      VARCHAR2,
 OLD_VCM_ERROR_MSG             IN      VARCHAR2,
 OLD_VCM_CR_UID                IN      VARCHAR2,
 OLD_VCM_CR_DT                 IN      DATE,
 NEW_VCM_SEQ_NO                IN OUT  NUMBER,
 NEW_VCM_LOW_COMP_CODE         IN OUT  VARCHAR2,
 NEW_VCM_LOW_MAIN_ACNT_CODE    IN OUT  VARCHAR2,
 NEW_VCM_LOW_SUB_ACNT_CODE     IN OUT  VARCHAR2,
 NEW_VCM_LOW_DIVN_CODE         IN OUT  VARCHAR2,
 NEW_VCM_LOW_DEPT_CODE         IN OUT  VARCHAR2,
 NEW_VCM_LOW_ANLY_CODE_1       IN OUT  VARCHAR2,
 NEW_VCM_LOW_ANLY_CODE_2       IN OUT  VARCHAR2,
 NEW_VCM_HIGH_COMP_CODE        IN OUT  VARCHAR2,
 NEW_VCM_HIGH_MAIN_ACNT_CODE   IN OUT  VARCHAR2,
 NEW_VCM_HIGH_SUB_ACNT_CODE    IN OUT  VARCHAR2,
 NEW_VCM_HIGH_DIVN_CODE        IN OUT  VARCHAR2,
 NEW_VCM_HIGH_DEPT_CODE        IN OUT  VARCHAR2,
 NEW_VCM_HIGH_ANLY_CODE_1      IN OUT  VARCHAR2,
 NEW_VCM_HIGH_ANLY_CODE_2      IN OUT  VARCHAR2,
 NEW_VCM_IE_CODE               IN OUT  VARCHAR2,
 NEW_VCM_ERROR_MSG             IN OUT  VARCHAR2,
 NEW_VCM_CR_UID                IN OUT  VARCHAR2,
 NEW_VCM_CR_DT                 IN OUT  DATE,
 TRG_MODE                      IN OUT  VARCHAR2,
 TRG_ERR_NO                       OUT  NUMBER,
 TRG_ERR_MSG                      OUT  VARCHAR2) AS
BEGIN
IF TRG_MODE = 'I'  OR TRG_MODE = 'U' THEN
     NEW_VCM_CR_UID := NVL(NEW_VCM_CR_UID,NVL(OLD_VCM_CR_UID,'UNDEF'));
     NEW_VCM_CR_DT  := SYSDATE;
END IF;
IF TRG_MODE = 'I' THEN
   IF NEW_VCM_SEQ_NO IS NULL THEN
        F_VALID_COMB(NEW_VCM_SEQ_NO);
   END IF;
END IF;
IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
      INSERT INTO FH_VALID_COMB_HIST VALUES
                  (OLD_VCM_SEQ_NO, OLD_VCM_LOW_COMP_CODE,
                   OLD_VCM_LOW_MAIN_ACNT_CODE, OLD_VCM_LOW_SUB_ACNT_CODE,
                   OLD_VCM_LOW_DIVN_CODE, OLD_VCM_LOW_DEPT_CODE,
                   OLD_VCM_LOW_ANLY_CODE_1, OLD_VCM_LOW_ANLY_CODE_2,
                   OLD_VCM_HIGH_COMP_CODE, OLD_VCM_HIGH_MAIN_ACNT_CODE,
                   OLD_VCM_HIGH_SUB_ACNT_CODE, OLD_VCM_HIGH_DIVN_CODE,
                   OLD_VCM_HIGH_DEPT_CODE, OLD_VCM_HIGH_ANLY_CODE_1,
                   OLD_VCM_HIGH_ANLY_CODE_2,
                   OLD_VCM_IE_CODE, OLD_VCM_ERROR_MSG,
                   OLD_VCM_CR_UID, OLD_VCM_CR_DT);
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FM_YEARLY_BUDGET (
 OLD_YBUD_COMP_CODE        IN      VARCHAR2,
 OLD_YBUD_ACNT_YEAR        IN      NUMBER,
 OLD_YBUD_MAIN_ACNT_CODE   IN      VARCHAR2,
 OLD_YBUD_SUB_ACNT_CODE    IN      VARCHAR2,
 OLD_YBUD_DIVN_CODE        IN      VARCHAR2,
 OLD_YBUD_DEPT_CODE        IN      VARCHAR2,
 OLD_YBUD_HEAD_NO_1        IN      NUMBER,
 OLD_YBUD_ANLY_CODE_1      IN      VARCHAR2,
 OLD_YBUD_HEAD_NO_2        IN      NUMBER,
 OLD_YBUD_ANLY_CODE_2      IN      VARCHAR2,
 OLD_YBUD_ORGL_AMT         IN      NUMBER,
 OLD_YBUD_ORGL_DRCR_FLAG   IN      VARCHAR2,
 OLD_YBUD_REVI_AMT         IN      NUMBER,
 OLD_YBUD_REVI_DRCR_FLAG   IN      VARCHAR2,
 OLD_YBUD_YEAR_FLAG        IN      VARCHAR2,
 OLD_YBUD_CR_UID           IN      VARCHAR2,
 OLD_YBUD_CR_DT            IN      DATE,
 NEW_YBUD_COMP_CODE        IN OUT  VARCHAR2,
 NEW_YBUD_ACNT_YEAR        IN OUT  NUMBER,
 NEW_YBUD_MAIN_ACNT_CODE   IN OUT  VARCHAR2,
 NEW_YBUD_SUB_ACNT_CODE    IN OUT  VARCHAR2,
 NEW_YBUD_DIVN_CODE        IN OUT  VARCHAR2,
 NEW_YBUD_DEPT_CODE        IN OUT  VARCHAR2,
 NEW_YBUD_HEAD_NO_1        IN OUT  NUMBER,
 NEW_YBUD_ANLY_CODE_1      IN OUT  VARCHAR2,
 NEW_YBUD_HEAD_NO_2        IN OUT  NUMBER,
 NEW_YBUD_ANLY_CODE_2      IN OUT  VARCHAR2,
 NEW_YBUD_ORGL_AMT         IN OUT  NUMBER,
 NEW_YBUD_ORGL_DRCR_FLAG   IN OUT  VARCHAR2,
 NEW_YBUD_REVI_AMT         IN OUT  NUMBER,
 NEW_YBUD_REVI_DRCR_FLAG   IN OUT  VARCHAR2,
 NEW_YBUD_YEAR_FLAG        IN OUT  VARCHAR2,
 NEW_YBUD_CR_UID           IN OUT  VARCHAR2,
 NEW_YBUD_CR_DT            IN OUT  DATE,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2) AS
 P_COUNT NUMBER;
 P_CURR_ACNT_YEAR NUMBER;
BEGIN
P_CURR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(NEW_YBUD_COMP_CODE);
IF NEW_YBUD_YEAR_FLAG = 'C' THEN
   NEW_YBUD_ACNT_YEAR := P_CURR_ACNT_YEAR;
ELSE
   NEW_YBUD_ACNT_YEAR := P_CURR_ACNT_YEAR + 1;
END IF;
SELECT COUNT(*)
INTO   P_COUNT
FROM   FM_ACNT_PERIOD
WHERE  APER_COMP_CODE = NEW_YBUD_COMP_CODE
AND    APER_ACNT_YEAR = NEW_YBUD_ACNT_YEAR;
IF P_COUNT = 0 THEN
  IF TRG_MODE IN ('I','U') THEN
  RAISE_APPLICATION_ERROR(-20008,'Accounting Period not set up for this Year');
  ELSE
   P_COUNT := 1;
  END IF;
END IF;
IF TRG_MODE = 'I' THEN
     INSERT INTO FM_MONTHLY_BUDGET
           (MBUD_COMP_CODE, MBUD_ACNT_YEAR, MBUD_MAIN_ACNT_CODE,
            MBUD_SUB_ACNT_CODE, MBUD_DIVN_CODE, MBUD_DEPT_CODE, MBUD_HEAD_NO_1,
            MBUD_ANLY_CODE_1, MBUD_HEAD_NO_2, MBUD_ANLY_CODE_2, MBUD_YEAR_FLAG,
            MBUD_CAL_YEAR, MBUD_CAL_MONTH, MBUD_ORGL_AMT, MBUD_REVI_AMT,
            MBUD_CR_UID, MBUD_CR_DT)
     SELECT NEW_YBUD_COMP_CODE, NEW_YBUD_ACNT_YEAR, NEW_YBUD_MAIN_ACNT_CODE,
            NEW_YBUD_SUB_ACNT_CODE, NEW_YBUD_DIVN_CODE, NEW_YBUD_DEPT_CODE,
            NEW_YBUD_HEAD_NO_1, NEW_YBUD_ANLY_CODE_1, NEW_YBUD_HEAD_NO_2,
            NEW_YBUD_ANLY_CODE_2, NEW_YBUD_YEAR_FLAG,
            APER_CAL_YEAR, APER_CAL_MONTH,
            NVL(NEW_YBUD_ORGL_AMT/P_COUNT, 0),
            NVL(NEW_YBUD_REVI_AMT/P_COUNT, 0),
            NEW_YBUD_CR_UID, SYSDATE
     FROM   FM_ACNT_PERIOD
     WHERE  APER_COMP_CODE = NEW_YBUD_COMP_CODE
     AND    APER_ACNT_YEAR = NEW_YBUD_ACNT_YEAR;
IF SQLCODE != 0 THEN
    RAISE_APPLICATION_ERROR(-20007,'Error in inserting budget entries');
END IF;
END IF;
IF TRG_MODE = 'U' THEN
    IF NEW_YBUD_ORGL_AMT != OLD_YBUD_ORGL_AMT
       OR NEW_YBUD_REVI_AMT != OLD_YBUD_REVI_AMT THEN
          UPDATE FM_MONTHLY_BUDGET
                SET MBUD_ORGL_AMT = NVL(NEW_YBUD_ORGL_AMT/P_COUNT,0),
                MBUD_REVI_AMT = NVL(NEW_YBUD_REVI_AMT/P_COUNT,0)
          WHERE MBUD_COMP_CODE = OLD_YBUD_COMP_CODE
          AND   MBUD_ACNT_YEAR = OLD_YBUD_ACNT_YEAR
          AND   MBUD_MAIN_ACNT_CODE = OLD_YBUD_MAIN_ACNT_CODE
          AND   NVL(MBUD_SUB_ACNT_CODE,'XXXXXXX') =
                NVL(OLD_YBUD_SUB_ACNT_CODE,'XXXXXXX')
          AND   NVL(MBUD_DIVN_CODE,'XXXXXXX') =
                NVL(OLD_YBUD_DIVN_CODE,'XXXXXXX')
          AND   NVL(MBUD_DEPT_CODE,'XXXXXXX') =
                NVL(OLD_YBUD_DEPT_CODE,'XXXXXXX')
          AND   NVL(MBUD_HEAD_NO_1,99) =
                NVL(OLD_YBUD_HEAD_NO_1,99)
          AND   NVL(MBUD_ANLY_CODE_1,'XXXXXXX') =
                NVL(OLD_YBUD_ANLY_CODE_1,'XXXXXXX')
          AND   NVL(MBUD_HEAD_NO_2,99) =
                NVL(OLD_YBUD_HEAD_NO_2,99)
          AND   NVL(MBUD_ANLY_CODE_2,'XXXXXXX') =
                NVL(OLD_YBUD_ANLY_CODE_2,'XXXXXXX')
          AND   MBUD_YEAR_FLAG = OLD_YBUD_YEAR_FLAG;
    END IF;
END IF;
IF  TRG_MODE = 'D' THEN
    DELETE FROM FM_MONTHLY_BUDGET
    WHERE  MBUD_COMP_CODE      = OLD_YBUD_COMP_CODE
    AND    MBUD_ACNT_YEAR      = OLD_YBUD_ACNT_YEAR
    AND    MBUD_MAIN_ACNT_CODE = OLD_YBUD_MAIN_ACNT_CODE
    AND    NVL(MBUD_SUB_ACNT_CODE,'XXXXXXX')  =
           NVL(OLD_YBUD_SUB_ACNT_CODE,'XXXXXXX')
    AND    NVL(MBUD_DIVN_CODE,'XXXXXXX')      =
           NVL(OLD_YBUD_DIVN_CODE,'XXXXXXX')
    AND    NVL(MBUD_DEPT_CODE,'XXXXXXX')      =
           NVL(OLD_YBUD_DEPT_CODE,'XXXXXXX')
    AND    NVL(MBUD_HEAD_NO_1,99) =
           NVL(OLD_YBUD_HEAD_NO_1,99)
    AND    NVL(MBUD_ANLY_CODE_1,'XXXXXXX')    =
           NVL(OLD_YBUD_ANLY_CODE_1,'XXXXXXX')
    AND    NVL(MBUD_HEAD_NO_2,99) =
           NVL(OLD_YBUD_HEAD_NO_2,99)
    AND    NVL(MBUD_ANLY_CODE_2,'XXXXXXX')    =
           NVL(OLD_YBUD_ANLY_CODE_2,'XXXXXXX')    ;
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FS_PURGE_AUDIT_TRAIL (
 OLD_PAT_KEY_NO            IN      NUMBER,
 OLD_PAT_ALL_CR_DT         IN      DATE,
 OLD_PAT_ORGN_CR_DT        IN      DATE,
 OLD_PAT_COMP_CR_DT        IN      DATE,
 OLD_PAT_DIVN_CR_DT        IN      DATE,
 OLD_PAT_DEPT_CR_DT        IN      DATE,
 OLD_PAT_TC_CR_DT          IN      DATE,
 OLD_PAT_TRAN_CR_DT        IN      DATE,
 OLD_PAT_TAG_CR_DT         IN      DATE,
 OLD_PAT_ALVL_CR_DT        IN      DATE,
 OLD_PAT_NARR_CR_DT        IN      DATE,
 OLD_PAT_ALL_COA_CR_DT     IN      DATE,
 OLD_PAT_COA_CR_DT         IN      DATE,
 OLD_PAT_LVL_CR_DT         IN      DATE,
 OLD_PAT_CAF_CR_DT         IN      DATE,
 OLD_PAT_MAIN_CR_DT        IN      DATE,
 OLD_PAT_SUB_CR_DT         IN      DATE,
 OLD_PAT_MS_CR_DT          IN      DATE,
 OLD_PAT_SCOMP_CR_DT       IN      DATE,
 OLD_PAT_SCURR_CR_DT       IN      DATE,
 OLD_PAT_ACOMP_CR_DT       IN      DATE,
 OLD_PAT_ACURR_CR_DT       IN      DATE,
 OLD_PAT_SUPP_CR_DT        IN      DATE,
 OLD_PAT_CUST_CR_DT        IN      DATE,
 OLD_PAT_CATG_CR_DT        IN      DATE,
 OLD_PAT_ALS_CR_DT         IN      DATE,
 OLD_PAT_ALL_ANLY_CR_DT    IN      DATE,
 OLD_PAT_ANLY_CR_DT        IN      DATE,
 OLD_PAT_AANLY_CR_DT       IN      DATE,
 OLD_PAT_AFM_CR_DT         IN      DATE,
 OLD_PAT_ALM_CR_DT         IN      DATE,
 OLD_PAT_AAL_CR_DT         IN      DATE,
 OLD_PAT_AAF_CR_DT         IN      DATE,
 OLD_PAT_ACTY_CR_DT        IN      DATE,
 OLD_PAT_AVAL_CR_DT        IN      DATE,
 OLD_PAT_PROC_CR_DT        IN      DATE,
 OLD_PAT_PHS_CR_DT         IN      DATE,
 OLD_PAT_PDS_CR_DT         IN      DATE,
 OLD_PAT_MISC_CR_DT        IN      DATE,
 OLD_PAT_CURR_CR_DT        IN      DATE,
 OLD_PAT_CER_CR_DT         IN      DATE,
 OLD_PAT_RHS_CR_DT         IN      DATE,
 OLD_PAT_RATIO_CR_DT       IN      DATE,
 OLD_PAT_VCM_CR_DT         IN      DATE,
 OLD_PAT_APER_CR_DT        IN      DATE,
 OLD_PAT_CR_UID            IN      VARCHAR2,
 OLD_PAT_CR_DT             IN      DATE,
 NEW_PAT_KEY_NO            IN OUT  NUMBER,
 NEW_PAT_ALL_CR_DT         IN OUT  DATE,
 NEW_PAT_ORGN_CR_DT        IN OUT  DATE,
 NEW_PAT_COMP_CR_DT        IN OUT  DATE,
 NEW_PAT_DIVN_CR_DT        IN OUT  DATE,
 NEW_PAT_DEPT_CR_DT        IN OUT  DATE,
 NEW_PAT_TC_CR_DT          IN OUT  DATE,
 NEW_PAT_TRAN_CR_DT        IN OUT  DATE,
 NEW_PAT_TAG_CR_DT         IN OUT  DATE,
 NEW_PAT_ALVL_CR_DT        IN OUT  DATE,
 NEW_PAT_NARR_CR_DT        IN OUT  DATE,
 NEW_PAT_ALL_COA_CR_DT     IN OUT  DATE,
 NEW_PAT_COA_CR_DT         IN OUT  DATE,
 NEW_PAT_LVL_CR_DT         IN OUT  DATE,
 NEW_PAT_CAF_CR_DT         IN OUT  DATE,
 NEW_PAT_MAIN_CR_DT        IN OUT  DATE,
 NEW_PAT_SUB_CR_DT         IN OUT  DATE,
 NEW_PAT_MS_CR_DT          IN OUT  DATE,
 NEW_PAT_SCOMP_CR_DT       IN OUT  DATE,
 NEW_PAT_SCURR_CR_DT       IN OUT  DATE,
 NEW_PAT_ACOMP_CR_DT       IN OUT  DATE,
 NEW_PAT_ACURR_CR_DT       IN OUT  DATE,
 NEW_PAT_SUPP_CR_DT        IN OUT  DATE,
 NEW_PAT_CUST_CR_DT        IN OUT  DATE,
 NEW_PAT_CATG_CR_DT        IN OUT  DATE,
 NEW_PAT_ALS_CR_DT         IN OUT  DATE,
 NEW_PAT_ALL_ANLY_CR_DT    IN OUT  DATE,
 NEW_PAT_ANLY_CR_DT        IN OUT  DATE,
 NEW_PAT_AANLY_CR_DT       IN OUT  DATE,
 NEW_PAT_AFM_CR_DT         IN OUT  DATE,
 NEW_PAT_ALM_CR_DT         IN OUT  DATE,
 NEW_PAT_AAL_CR_DT         IN OUT  DATE,
 NEW_PAT_AAF_CR_DT         IN OUT  DATE,
 NEW_PAT_ACTY_CR_DT        IN OUT  DATE,
 NEW_PAT_AVAL_CR_DT        IN OUT  DATE,
 NEW_PAT_PROC_CR_DT        IN OUT  DATE,
 NEW_PAT_PHS_CR_DT         IN OUT  DATE,
 NEW_PAT_PDS_CR_DT         IN OUT  DATE,
 NEW_PAT_MISC_CR_DT        IN OUT  DATE,
 NEW_PAT_CURR_CR_DT        IN OUT  DATE,
 NEW_PAT_CER_CR_DT         IN OUT  DATE,
 NEW_PAT_RHS_CR_DT         IN OUT  DATE,
 NEW_PAT_RATIO_CR_DT       IN OUT  DATE,
 NEW_PAT_VCM_CR_DT         IN OUT  DATE,
 NEW_PAT_APER_CR_DT        IN OUT  DATE,
 NEW_PAT_CR_UID            IN OUT  VARCHAR2,
 NEW_PAT_CR_DT             IN OUT  DATE,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2) AS
BEGIN
IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
     RAISE_APPLICATION_ERROR(-20001,'Cannot Update or Delete');
END IF;
IF TRG_MODE = 'I' THEN
    IF NEW_PAT_COMP_CR_DT IS NOT NULL THEN
          DELETE FROM FH_COMPANY_HIST
          WHERE COMP_CR_DT <= NEW_PAT_COMP_CR_DT;
    END IF;
    IF NEW_PAT_DIVN_CR_DT IS NOT NULL THEN
          DELETE FROM FH_DIVISION_HIST
          WHERE DIVN_CR_DT <= NEW_PAT_DIVN_CR_DT;
    END IF;
    IF NEW_PAT_DEPT_CR_DT IS NOT NULL THEN
          DELETE FROM FH_DEPARTMENT_HIST
          WHERE DEPT_CR_DT <= NEW_PAT_DEPT_CR_DT;
    END IF;
    IF NEW_PAT_TRAN_CR_DT IS NOT NULL THEN
          DELETE FROM FH_TRANSACTION_HIST
          WHERE TRAN_CR_DT <= NEW_PAT_TRAN_CR_DT;
    END IF;
    IF NEW_PAT_TAG_CR_DT IS NOT NULL THEN
          DELETE FROM FH_TRAN_APPR_GROUP_HIST
          WHERE TAG_CR_DT <= NEW_PAT_TAG_CR_DT;
    END IF;
    IF NEW_PAT_ALVL_CR_DT IS NOT NULL THEN
          DELETE FROM FH_TRAN_APPR_LEVEL_HIST
          WHERE ALVL_CR_DT <= NEW_PAT_ALVL_CR_DT;
    END IF;
    IF NEW_PAT_NARR_CR_DT IS NOT NULL THEN
          DELETE FROM FH_NARRATION_DEFN_HIST
          WHERE NARR_CR_DT <= NEW_PAT_NARR_CR_DT;
    END IF;
    IF NEW_PAT_MAIN_CR_DT IS NOT NULL THEN
          DELETE FROM FH_MAIN_ACCOUNT_HIST
          WHERE MAIN_CR_DT <= NEW_PAT_MAIN_CR_DT;
    END IF;
    IF NEW_PAT_SUB_CR_DT IS NOT NULL THEN
          DELETE FROM FH_SUB_ACCOUNT_HIST
          WHERE SUB_CR_DT <= NEW_PAT_SUB_CR_DT;
    END IF;
    IF NEW_PAT_MS_CR_DT IS NOT NULL THEN
          DELETE FROM FH_MAIN_SUB_HIST
          WHERE MS_CR_DT <= NEW_PAT_MS_CR_DT;
    END IF;
    IF NEW_PAT_SCOMP_CR_DT IS NOT NULL THEN
          DELETE FROM FH_SUB_COMP_HIST
          WHERE SCOMP_CR_DT <= NEW_PAT_SCOMP_CR_DT;
    END IF;
    IF NEW_PAT_SCURR_CR_DT IS NOT NULL THEN
          DELETE FROM FH_SUB_CURR_HIST
          WHERE SCURR_CR_DT <= NEW_PAT_SCURR_CR_DT;
    END IF;
    IF NEW_PAT_ACOMP_CR_DT IS NOT NULL THEN
          DELETE FROM FH_ACNT_COMP_HIST
          WHERE ACOMP_CR_DT <= NEW_PAT_ACOMP_CR_DT;
    END IF;
    IF NEW_PAT_ACURR_CR_DT IS NOT NULL THEN
          DELETE FROM FH_ACNT_CURR_HIST
          WHERE ACURR_CR_DT <= NEW_PAT_ACURR_CR_DT;
    END IF;
    IF NEW_PAT_SUPP_CR_DT IS NOT NULL THEN
          DELETE FROM FH_SUPPLIER_HIST
          WHERE SUPP_CR_DT <= NEW_PAT_SUPP_CR_DT;
    END IF;
    IF NEW_PAT_CUST_CR_DT IS NOT NULL THEN
          DELETE FROM FH_CUSTOMER_HIST
          WHERE CUST_CR_DT <= NEW_PAT_CUST_CR_DT;
    END IF;
    IF NEW_PAT_COA_CR_DT IS NOT NULL THEN
          DELETE FROM FH_COA_FORMAT_HIST
          WHERE COA_CR_DT <= NEW_PAT_COA_CR_DT;
    END IF;
    IF NEW_PAT_LVL_CR_DT IS NOT NULL THEN
          DELETE FROM FH_COA_LEVEL_HIST
          WHERE LVL_CR_DT <= NEW_PAT_LVL_CR_DT;
    END IF;
    IF NEW_PAT_CAF_CR_DT IS NOT NULL THEN
          DELETE FROM FH_COA_ACNT_FORMAT_HIST
          WHERE CAF_CR_DT <= NEW_PAT_CAF_CR_DT;
    END IF;
    IF NEW_PAT_ACTY_CR_DT IS NOT NULL THEN
          DELETE FROM FH_ACTIVITY_HIST
          WHERE ACTY_CR_DT <= NEW_PAT_ACTY_CR_DT;
    END IF;
    IF NEW_PAT_AVAL_CR_DT IS NOT NULL THEN
          DELETE FROM FH_ACTY_VALUE_HIST
          WHERE AVAL_CR_DT <= NEW_PAT_AVAL_CR_DT;
    END IF;
    IF NEW_PAT_CURR_CR_DT IS NOT NULL THEN
          DELETE FROM FH_CURRENCY_HIST
          WHERE CURR_CR_DT <= NEW_PAT_CURR_CR_DT;
    END IF;
    IF NEW_PAT_CER_CR_DT IS NOT NULL THEN
          DELETE FROM FH_EXCHANGE_RATE_HIST
          WHERE CER_CR_DT <= NEW_PAT_CER_CR_DT;
    END IF;
    IF NEW_PAT_CATG_CR_DT IS NOT NULL THEN
          DELETE FROM FH_ACNT_CATG_HIST
          WHERE CATG_CR_DT <= NEW_PAT_CATG_CR_DT;
    END IF;
    IF NEW_PAT_ALS_CR_DT IS NOT NULL THEN
          DELETE FROM FH_ACNT_LINK_HIST
          WHERE ALS_CR_DT <= NEW_PAT_ALS_CR_DT;
    END IF;
    IF NEW_PAT_ANLY_CR_DT IS NOT NULL THEN
          DELETE FROM FH_ANALYSIS_HIST
          WHERE ANLY_CR_DT <= NEW_PAT_ANLY_CR_DT;
    END IF;
    IF NEW_PAT_AANLY_CR_DT IS NOT NULL THEN
          DELETE FROM FH_ACNT_ANLY_HIST
          WHERE AANLY_CR_DT <= NEW_PAT_AANLY_CR_DT;
    END IF;
    IF NEW_PAT_AFM_CR_DT IS NOT NULL THEN
          DELETE FROM FH_ANLY_FORMAT_HIST
          WHERE AFM_CR_DT <= NEW_PAT_AFM_CR_DT;
    END IF;
    IF NEW_PAT_ALM_CR_DT IS NOT NULL THEN
          DELETE FROM FH_ANLY_LEVEL_HIST
          WHERE ALM_CR_DT <= NEW_PAT_ALM_CR_DT;
    END IF;
    IF NEW_PAT_AAL_CR_DT IS NOT NULL THEN
          DELETE FROM FH_ACNT_ANLY_LEVEL_HIST
          WHERE AAL_CR_DT <= NEW_PAT_AAL_CR_DT;
    END IF;
    IF NEW_PAT_AAF_CR_DT IS NOT NULL THEN
          DELETE FROM FH_ANLY_ACNT_FORMAT_HIST
          WHERE AAF_CR_DT <= NEW_PAT_AAF_CR_DT;
    END IF;
    IF NEW_PAT_VCM_CR_DT IS NOT NULL THEN
          DELETE FROM FH_VALID_COMB_HIST
          WHERE VCM_CR_DT <= NEW_PAT_VCM_CR_DT;
    END IF;
    IF NEW_PAT_APER_CR_DT IS NOT NULL THEN
          DELETE FROM FH_ACNT_PERIOD_HIST
          WHERE APER_CR_DT <= NEW_PAT_APER_CR_DT;
    END IF;
    IF NEW_PAT_PHS_CR_DT IS NOT NULL THEN
          DELETE FROM FS_PROC_HEADER
          WHERE PHS_CR_DT <= NEW_PAT_PHS_CR_DT;
    END IF;
    IF NEW_PAT_PDS_CR_DT IS NOT NULL THEN
          DELETE FROM FS_PROC_DETAIL
          WHERE PDS_CR_DT <= NEW_PAT_PDS_CR_DT;
    END IF;
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FT_ALLOCATION_JV (
 OLD_AJV_KEY_NO            IN      NUMBER,
 OLD_AJV_REF_COMP_CODE     IN      VARCHAR2,
 OLD_AJV_REF_ACNT_YEAR     IN      NUMBER,
 OLD_AJV_REF_TRAN_CODE     IN      VARCHAR2,
 OLD_AJV_REF_DOC_NO        IN      NUMBER,
 OLD_AJV_REF_SEQ_NO        IN      NUMBER,
 OLD_AJV_COMP_CODE         IN      VARCHAR2,
 OLD_AJV_TRAN_CODE         IN      VARCHAR2,
 OLD_AJV_START_DT          IN      DATE,
 OLD_AJV_UPTO_DT           IN      DATE,
 OLD_AJV_DOC_AMT           IN      NUMBER,
 OLD_AJV_MAIN_ACNT_CODE    IN      VARCHAR2,
 OLD_AJV_SUB_ACNT_CODE     IN      VARCHAR2,
 OLD_AJV_DEPT_CODE         IN      VARCHAR2,
 OLD_AJV_DIVN_CODE         IN      VARCHAR2,
 OLD_AJV_HEAD_NO_1         IN      NUMBER,
 OLD_AJV_ANLY_CODE_1       IN      VARCHAR2,
 OLD_AJV_HEAD_NO_2         IN      NUMBER,
 OLD_AJV_ANLY_CODE_2       IN      VARCHAR2,
 OLD_AJV_ACTY_CODE_1       IN      VARCHAR2,
 OLD_AJV_ACTY_CODE_2       IN      VARCHAR2,
 OLD_AJV_CR_UID            IN      VARCHAR2,
 OLD_AJV_CR_DT             IN      DATE,
 NEW_AJV_KEY_NO            IN OUT  NUMBER,
 NEW_AJV_REF_COMP_CODE     IN OUT  VARCHAR2,
 NEW_AJV_REF_ACNT_YEAR     IN OUT  NUMBER,
 NEW_AJV_REF_TRAN_CODE     IN OUT  VARCHAR2,
 NEW_AJV_REF_DOC_NO        IN OUT  NUMBER,
 NEW_AJV_REF_SEQ_NO        IN OUT  NUMBER,
 NEW_AJV_COMP_CODE         IN OUT  VARCHAR2,
 NEW_AJV_TRAN_CODE         IN OUT  VARCHAR2,
 NEW_AJV_START_DT          IN OUT  DATE,
 NEW_AJV_UPTO_DT           IN OUT  DATE,
 NEW_AJV_DOC_AMT           IN OUT  NUMBER,
 NEW_AJV_MAIN_ACNT_CODE    IN OUT  VARCHAR2,
 NEW_AJV_SUB_ACNT_CODE     IN OUT  VARCHAR2,
 NEW_AJV_DEPT_CODE         IN OUT  VARCHAR2,
 NEW_AJV_DIVN_CODE         IN OUT  VARCHAR2,
 NEW_AJV_HEAD_NO_1         IN OUT  NUMBER,
 NEW_AJV_ANLY_CODE_1       IN OUT  VARCHAR2,
 NEW_AJV_HEAD_NO_2         IN OUT  NUMBER,
 NEW_AJV_ANLY_CODE_2       IN OUT  VARCHAR2,
 NEW_AJV_ACTY_CODE_1       IN OUT  VARCHAR2,
 NEW_AJV_ACTY_CODE_2       IN OUT  VARCHAR2,
 NEW_AJV_CR_UID            IN OUT  VARCHAR2,
 NEW_AJV_CR_DT             IN OUT  DATE,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2) AS
T_ERR_NO    NUMBER(6) ;
BEGIN
IF TRG_MODE = 'I' THEN
   F_CREATE_AJV_DETAIL(NEW_AJV_KEY_NO, NEW_AJV_START_DT, NEW_AJV_UPTO_DT,
                       NEW_AJV_REF_COMP_CODE, NEW_AJV_DOC_AMT,
                       NEW_AJV_CR_UID, NEW_AJV_CR_DT, T_ERR_NO) ;
END IF ;
IF TRG_MODE = 'U' THEN
   F_CREATE_AJV_DETAIL(NEW_AJV_KEY_NO, NEW_AJV_START_DT, NEW_AJV_UPTO_DT,
                       NEW_AJV_REF_COMP_CODE, NEW_AJV_DOC_AMT,
                       NEW_AJV_CR_UID, NEW_AJV_CR_DT, T_ERR_NO) ;
END IF ;
IF TRG_MODE = 'D' THEN
   DELETE FROM FT_AJV_DETAIL
   WHERE  AJD_KEY_NO = OLD_AJV_KEY_NO ;
END IF ;
END ;
/
CREATE OR REPLACE PROCEDURE STP_FT_BOUNCED_CHEQUE (
 OLD_BCT_KEY_NO            IN      NUMBER,
 OLD_BCT_COMP_CODE         IN      VARCHAR2,
 OLD_BCT_TRAN_CODE         IN      VARCHAR2,
 OLD_BCT_ACNT_YEAR         IN      NUMBER,
 OLD_BCT_DOC_NO            IN      NUMBER,
 OLD_BCT_SEQ_NO            IN      NUMBER,
 OLD_BCT_DOC_DT            IN      DATE,
 OLD_BCT_DOC_REF           IN      VARCHAR2,
 OLD_BCT_DESC              IN      VARCHAR2,
 OLD_BCT_REF_TRAN_CODE     IN      VARCHAR2,
 OLD_BCT_REF_ACNT_YEAR     IN      NUMBER,
 OLD_BCT_REF_DOC_NO        IN      NUMBER,
 OLD_BCT_REF_SEQ_NO        IN      NUMBER,
 OLD_BCT_CR_UID            IN      VARCHAR2,
 OLD_BCT_CR_DT             IN      DATE,
 OLD_BANK_MAIN_ACNT_CODE   IN      VARCHAR2,
 OLD_BANK_SUB_ACNT_CODE    IN      VARCHAR2,
 OLD_BANK_CURR_CODE        IN      VARCHAR2,
 NEW_BCT_KEY_NO            IN OUT  NUMBER,
 NEW_BCT_COMP_CODE         IN OUT  VARCHAR2,
 NEW_BCT_TRAN_CODE         IN OUT  VARCHAR2,
 NEW_BCT_ACNT_YEAR         IN OUT  NUMBER,
 NEW_BCT_DOC_NO            IN OUT  NUMBER,
 NEW_BCT_SEQ_NO            IN OUT  NUMBER,
 NEW_BCT_DOC_DT            IN OUT  DATE,
 NEW_BCT_DOC_REF           IN OUT  VARCHAR2,
 NEW_BCT_DESC              IN OUT  VARCHAR2,
 NEW_BCT_REF_TRAN_CODE     IN OUT  VARCHAR2,
 NEW_BCT_REF_ACNT_YEAR     IN OUT  NUMBER,
 NEW_BCT_REF_DOC_NO        IN OUT  NUMBER,
 NEW_BCT_REF_SEQ_NO        IN OUT  NUMBER,
 NEW_BCT_CR_UID            IN OUT  VARCHAR2,
 NEW_BCT_CR_DT             IN OUT  DATE,
 NEW_BANK_MAIN_ACNT_CODE   IN OUT  VARCHAR2,
 NEW_BANK_SUB_ACNT_CODE    IN OUT  VARCHAR2,
 NEW_BANK_CURR_CODE        IN OUT  VARCHAR2,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2) AS
CURSOR SEL_RCPT_ENTRY IS
        SELECT TD_COMP_CODE, TD_ACNT_YEAR, TD_TRAN_CODE, TD_DOC_NO,
               TD_SEQ_NO, TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE,
               TD_DIVN_CODE, TD_DEPT_CODE, TD_HEAD_NO_1, TD_ANLY_CODE_1,
               TD_HEAD_NO_2, TD_ANLY_CODE_2, TD_CURR_CODE, TD_DOC_AMT,
               TD_DOC_DRCR_FLAG, TD_FC_AMT, TD_DOC_REF, TD_DOC_DUE_DT,
               TD_OTH_REF, TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2,
               TD_DESC, TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG,
               TD_MONTH_PRC_FLAG, TD_BILL_FC_AMT, TD_BILL_LC_AMT,
               TD_BILL_STATUS, TD_PYMT_APPR_FLAG, TD_CR_UID, TD_CR_DT
        FROM   FT_CUR_TRANS_DETAIL
        WHERE  TD_COMP_CODE = NEW_BCT_COMP_CODE
          AND  TD_ACNT_YEAR = NEW_BCT_REF_ACNT_YEAR
          AND  TD_TRAN_CODE = NEW_BCT_REF_TRAN_CODE
          AND  TD_DOC_NO    = NEW_BCT_REF_DOC_NO
          AND  TD_SEQ_NO    = NEW_BCT_REF_SEQ_NO;
CURSOR SEL_FROM_OST(M_BCT_SEQ_NO NUMBER) IS
       SELECT OST_KEY_NO, OST_DOC_DT, OST_DUE_DT,
              OST_DOC_CAL_YEAR, OST_DOC_CAL_MONTH
       FROM   FT_OS
       WHERE  OST_COMP_CODE = NEW_BCT_COMP_CODE
       AND    OST_ACNT_YEAR = NEW_BCT_ACNT_YEAR
       AND    OST_TRAN_CODE = NEW_BCT_TRAN_CODE
       AND    OST_DOC_NO    = NEW_BCT_DOC_NO
       AND    OST_SEQ_NO    = M_BCT_SEQ_NO ;
CURSOR SEL_BANK_ENTRY IS
        SELECT TD_DIVN_CODE, TD_DEPT_CODE, TD_HEAD_NO_1, TD_ANLY_CODE_1,
               TD_HEAD_NO_2, TD_ANLY_CODE_2
        FROM   FT_CUR_TRANS_DETAIL
        WHERE  TD_COMP_CODE = NEW_BCT_COMP_CODE
          AND  TD_ACNT_YEAR = NEW_BCT_REF_ACNT_YEAR
          AND  TD_TRAN_CODE = NEW_BCT_REF_TRAN_CODE
          AND  TD_DOC_NO    = NEW_BCT_REF_DOC_NO
          AND  TD_MAIN_ACNT_CODE = NEW_BANK_MAIN_ACNT_CODE
          AND  TD_SUB_ACNT_CODE = NEW_BANK_SUB_ACNT_CODE;
       P_REF_DOC_DT           DATE;
       P_REF_DUE_DT           DATE;
       P_REF_CAL_YEAR         NUMBER(4);
       P_REF_CAL_MONTH        NUMBER(2);
       TEMP_FC_AMT        NUMBER;
       TEMP_LC_AMT        NUMBER;
         P_CAL_YEAR           NUMBER(4) ;
         P_CAL_MONTH          NUMBER(2) ;
         P_ACNT_YEAR          NUMBER(2) ;
         P_ERR_NO             NUMBER(10) ;
         P_KEY_NO             NUMBER(8) ;
         P_TD_COMP_CODE       VARCHAR2(3) ;
         P_TD_ACNT_YEAR       NUMBER(2) ;
         P_TD_TRAN_CODE       VARCHAR2(3) ;
         P_TD_DOC_NO          NUMBER(6) ;
         P_TD_SEQ_NO          NUMBER(3) ;
         P_TD_MAIN_ACNT_CODE  VARCHAR2(6) ;
         P_TD_SUB_ACNT_CODE   VARCHAR2(6) ;
         P_TD_DIVN_CODE       VARCHAR2(6) ;
         P_TD_DEPT_CODE       VARCHAR2(6) ;
         P_TD_HEAD_NO_1       NUMBER(1) ;
         P_TD_ANLY_CODE_1     VARCHAR2(6);
         P_TD_HEAD_NO_2       NUMBER(1);
         P_TD_ANLY_CODE_2     VARCHAR2(6);
         P_TD_CURR_CODE       VARCHAR2(3) ;
         P_TD_DOC_AMT         NUMBER(14,3) ;
         P_TD_DOC_DRCR_FLAG   VARCHAR2(1) ;
         P_TD_FC_AMT          NUMBER(14,3) ;
         P_TD_DOC_REF         VARCHAR2(15) ;
         P_TD_DOC_DUE_DT      DATE ;
         P_TD_OTH_REF         VARCHAR2(15) ;
         P_TD_ACTY_VALUE_CODE_1 VARCHAR2(6);
         P_TD_ACTY_VALUE_CODE_2  VARCHAR2(6);
         P_TD_DESC               VARCHAR2(2000) ;
         P_TD_DBK_PRINT_FLAG     VARCHAR2(1) ;
         P_TD_LED_PRINT_FLAG     VARCHAR2(1) ;
         P_TD_MONTH_PRC_FLAG     VARCHAR2(1) ;
         P_TD_BILL_FC_AMT        NUMBER(14,3) ;
         P_TD_BILL_LC_AMT        NUMBER(14,3) ;
         P_TD_BILL_STATUS        VARCHAR2(1) ;
         P_TD_PYMT_APPR_FLAG     VARCHAR2(1) ;
         P_TD_CR_UID             VARCHAR2(15) ;
         P_TD_CR_DT              DATE ;
         P_BCT_SEQ_NO            NUMBER(3) ;
         P2_TD_DIVN_CODE         VARCHAR2(6) ;
         P2_TD_DEPT_CODE         VARCHAR2(6) ;
         P2_TD_HEAD_NO_1         NUMBER(1) ;
         P2_TD_ANLY_CODE_1       VARCHAR2(6);
         P2_TD_HEAD_NO_2         NUMBER(1);
         P2_TD_ANLY_CODE_2       VARCHAR2(6);
         P_OST_KEY_NO            NUMBER(8);
         P_PHS_KEY_NO            NUMBER(8) ;
BEGIN
   IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
      RAISE_APPLICATION_ERROR(-20015,'Cannot Update / Delete Record');
   END IF;
   F_VAL_OPCL(NEW_BCT_COMP_CODE, NEW_BCT_DOC_DT, P_ERR_NO,
                  P_CAL_YEAR, P_CAL_MONTH, P_ACNT_YEAR);
   IF P_ERR_NO != 0 THEN
      RAISE_APPLICATION_ERROR(-20500 - P_ERR_NO, 'Period not open');
   END IF;
IF TRG_MODE = 'I' THEN
   IF SEL_RCPT_ENTRY%ISOPEN THEN
      CLOSE SEL_RCPT_ENTRY;
   END IF;
   /* IF NEW_BCT_SEQ_NO = 1 THEN */
      F_VAL_DUP_DOC(NEW_BCT_COMP_CODE, NEW_BCT_ACNT_YEAR,
                    NEW_BCT_TRAN_CODE, NEW_BCT_DOC_NO, P_ERR_NO);
 /*   IF P_ERR_NO != 0 THEN
         STD_ERROR_ROUTINE(P_ERR_NO,'Record for Receipt already exists');
     END IF;  */
      /* Insert into audit trail header */
   IF P_ERR_NO = 0 THEN
      SELECT SEQ_PHS_KEY_NO.NEXTVAL
      INTO   P_PHS_KEY_NO
      FROM   DUAL ;
      INSERT INTO FS_PROC_HEADER
             (PHS_KEY_NO, PHS_USER_ID, PHS_PROC_DT, PHS_PROC_STATUS,
              PHS_COMP_CODE, PHS_TRAN_FRM, PHS_TRAN_TO, PHS_TRAN_DT_FRM,
              PHS_TRAN_DT_TO, PHS_DOC_NO_FRM, PHS_DOC_NO_TO,
              PHS_USER_PATTERN, PHS_HEAD_REC_TOT, PHS_DETAIL_REC_TOT,
              PHS_AMT_TOT, PHS_ERROR_NAME, PHS_CR_UID, PHS_CR_DT)
      VALUES (P_PHS_KEY_NO, NEW_BCT_CR_UID, SYSDATE, '', NEW_BCT_COMP_CODE,
              NEW_BCT_TRAN_CODE, NEW_BCT_TRAN_CODE,
              NEW_BCT_DOC_DT, NEW_BCT_DOC_DT, NEW_BCT_DOC_NO,
              NEW_BCT_DOC_NO, NEW_BCT_CR_UID, '1', '', '', '',
              NEW_BCT_CR_UID, NEW_BCT_CR_DT) ;
      INSERT INTO FT_CUR_TRANS_HEADER
      VALUES ( NEW_BCT_COMP_CODE, NEW_BCT_ACNT_YEAR, NEW_BCT_TRAN_CODE,
               NEW_BCT_DOC_NO , NEW_BCT_DOC_DT ,P_CAL_YEAR ,
               P_CAL_MONTH ,NEW_BCT_DOC_REF ,sysdate , sysdate ,
               '','',P_PHS_KEY_NO,'','',NEW_BCT_CR_UID , NEW_BCT_CR_DT ) ;
   END IF;
       SELECT NVL(MAX(TD_SEQ_NO), 0) + 1
       INTO   P_BCT_SEQ_NO
       FROM   FT_CUR_TRANS_DETAIL
       WHERE  TD_COMP_CODE = NEW_BCT_COMP_CODE
       AND    TD_ACNT_YEAR = NEW_BCT_ACNT_YEAR
       AND    TD_TRAN_CODE = NEW_BCT_TRAN_CODE
       AND    TD_DOC_NO = NEW_BCT_DOC_NO;
   OPEN SEL_RCPT_ENTRY ;
   /* P_BCT_SEQ_NO := NEW_BCT_SEQ_NO; */
   LOOP
       FETCH SEL_RCPT_ENTRY INTO
         P_TD_COMP_CODE ,
         P_TD_ACNT_YEAR ,
         P_TD_TRAN_CODE ,
         P_TD_DOC_NO ,
         P_TD_SEQ_NO ,
         P_TD_MAIN_ACNT_CODE ,
         P_TD_SUB_ACNT_CODE  ,
         P_TD_DIVN_CODE     ,
         P_TD_DEPT_CODE    ,
         P_TD_HEAD_NO_1   ,
         P_TD_ANLY_CODE_1,
         P_TD_HEAD_NO_2 ,
         P_TD_ANLY_CODE_2,
         P_TD_CURR_CODE ,
         P_TD_DOC_AMT  ,
         P_TD_DOC_DRCR_FLAG,
         P_TD_FC_AMT      ,
         P_TD_DOC_REF    ,
         P_TD_DOC_DUE_DT,
         P_TD_OTH_REF  ,
         P_TD_ACTY_VALUE_CODE_1,
         P_TD_ACTY_VALUE_CODE_2,
         P_TD_DESC            ,
         P_TD_DBK_PRINT_FLAG ,
         P_TD_LED_PRINT_FLAG,
         P_TD_MONTH_PRC_FLAG,
         P_TD_BILL_FC_AMT  ,
         P_TD_BILL_LC_AMT ,
         P_TD_BILL_STATUS,
         P_TD_PYMT_APPR_FLAG ,
         P_TD_CR_UID ,
         P_TD_CR_DT   ;
     IF SEL_RCPT_ENTRY%NOTFOUND THEN
        EXIT;
     END IF;
     INSERT INTO FT_CUR_TRANS_DETAIL
              (TD_COMP_CODE, TD_ACNT_YEAR, TD_TRAN_CODE, TD_DOC_NO,
               TD_SEQ_NO, TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE,
               TD_DIVN_CODE, TD_DEPT_CODE, TD_HEAD_NO_1, TD_ANLY_CODE_1,
               TD_HEAD_NO_2, TD_ANLY_CODE_2, TD_CURR_CODE, TD_DOC_AMT,
               TD_DOC_DRCR_FLAG, TD_FC_AMT, TD_DOC_REF, TD_DOC_DUE_DT,
               TD_OTH_REF, TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2,
               TD_DESC, TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG,
               TD_MONTH_PRC_FLAG, TD_BILL_FC_AMT, TD_BILL_LC_AMT,
               TD_BILL_STATUS, TD_PYMT_APPR_FLAG, TD_CR_UID, TD_CR_DT)
     VALUES   (NEW_BCT_COMP_CODE,NEW_BCT_ACNT_YEAR,NEW_BCT_TRAN_CODE,
               NEW_BCT_DOC_NO ,P_BCT_SEQ_NO,
               P_TD_MAIN_ACNT_CODE ,
               P_TD_SUB_ACNT_CODE ,
               P_TD_DIVN_CODE,
               P_TD_DEPT_CODE ,
               P_TD_HEAD_NO_1,
               P_TD_ANLY_CODE_1,
               P_TD_HEAD_NO_2 ,
               P_TD_ANLY_CODE_2 ,
               P_TD_CURR_CODE ,
               P_TD_DOC_AMT ,
               DECODE(P_TD_DOC_DRCR_FLAG,'D','C','D') ,
               P_TD_FC_AMT ,
               P_TD_DOC_REF ,
               NEW_BCT_DOC_DT,
               P_TD_OTH_REF,
               P_TD_ACTY_VALUE_CODE_1,
               P_TD_ACTY_VALUE_CODE_2 ,
               P_TD_DESC ,
               P_TD_DBK_PRINT_FLAG ,
               P_TD_LED_PRINT_FLAG ,
               P_TD_MONTH_PRC_FLAG ,
               P_TD_BILL_FC_AMT  ,
               P_TD_BILL_LC_AMT ,
               P_TD_BILL_STATUS ,
               P_TD_PYMT_APPR_FLAG ,
               NEW_BCT_CR_UID ,
               NEW_BCT_CR_DT ) ;
      IF NEW_BCT_REF_SEQ_NO = P_TD_SEQ_NO THEN
         OPEN SEL_FROM_OST(P_BCT_SEQ_NO) ;
         FETCH SEL_FROM_OST
         INTO P_KEY_NO, P_REF_DOC_DT,
              P_REF_DUE_DT, P_REF_CAL_YEAR, P_REF_CAL_MONTH;
         F_OS(P_OST_KEY_NO);
         INSERT INTO FT_OS
         (OST_KEY_NO, OST_COMP_CODE, OST_TRAN_CODE, OST_DOC_NO,
          OST_SEQ_NO, OST_ACNT_YEAR, OST_DOC_DT, OST_DOC_CAL_YEAR,
          OST_DOC_CAL_MONTH, OST_DUE_DT, OST_MAIN_ACNT_CODE,
          OST_SUB_ACNT_CODE, OST_DIVN_CODE, OST_DEPT_CODE,
          OST_HEAD_NO_1, OST_ANLY_CODE_1, OST_HEAD_NO_2,
          OST_ANLY_CODE_2, OST_ACTY_CODE_1, OST_ACTY_CODE_2,
          OST_CURR_CODE, OST_LC_AMT, OST_FC_AMT, OST_DRCR_FLAG,
          OST_DOC_REF, OST_DOC_REF_DT, OST_OTH_REF,
          OST_REF_KEY_NO, OST_LC_ORG_AMT, OST_FC_ORG_AMT,
          OST_REF_COMP_CODE, OST_REF_ACNT_YEAR,
          OST_REF_TRAN_CODE, OST_REF_SEQ_NO,
          OST_REF_DOC_NO, OST_REF_DOC_DT,
          OST_REF_DOC_CAL_YEAR, OST_REF_DOC_CAL_MONTH,
          OST_REF_DUE_DT,
          OST_TYPE, OST_CR_UID, OST_CR_DT)
         SELECT
          P_OST_KEY_NO, OST_COMP_CODE, OST_TRAN_CODE, OST_DOC_NO,
          OST_SEQ_NO, OST_ACNT_YEAR, OST_DOC_DT, OST_DOC_CAL_YEAR,
          OST_DOC_CAL_MONTH, OST_DUE_DT, OST_MAIN_ACNT_CODE,
          OST_SUB_ACNT_CODE, OST_DIVN_CODE, OST_DEPT_CODE,
          OST_HEAD_NO_1, OST_ANLY_CODE_1, OST_HEAD_NO_2,
          OST_ANLY_CODE_2, OST_ACTY_CODE_1, OST_ACTY_CODE_2,
          OST_CURR_CODE, OST_LC_AMT, OST_FC_AMT, OST_DRCR_FLAG,
          OST_DOC_REF, OST_DOC_REF_DT, OST_OTH_REF,
          P_KEY_NO, OST_LC_ORG_AMT, OST_FC_ORG_AMT,
          NEW_BCT_COMP_CODE, NEW_BCT_ACNT_YEAR,
          NEW_BCT_TRAN_CODE, P_BCT_SEQ_NO,
          NEW_BCT_DOC_NO, P_REF_DOC_DT,
          P_REF_CAL_YEAR, P_REF_CAL_MONTH,
          P_REF_DUE_DT,
          'R', OST_CR_UID, SYSDATE
         FROM FT_OS
         WHERE  OST_COMP_CODE = NEW_BCT_COMP_CODE
         AND    OST_ACNT_YEAR = NEW_BCT_ACNT_YEAR
         AND    OST_TRAN_CODE = NEW_BCT_REF_TRAN_CODE
         AND    OST_DOC_NO    = NEW_BCT_REF_DOC_NO
         AND    OST_SEQ_NO    = NEW_BCT_REF_SEQ_NO;
         DELETE FROM FT_OS
         WHERE  OST_COMP_CODE = NEW_BCT_COMP_CODE
         AND    OST_ACNT_YEAR = NEW_BCT_ACNT_YEAR
         AND    OST_TRAN_CODE = NEW_BCT_REF_TRAN_CODE
         AND    OST_DOC_NO    = NEW_BCT_REF_DOC_NO
         AND    OST_SEQ_NO    = NEW_BCT_REF_SEQ_NO
         AND    OST_TYPE IS NULL;
         CLOSE SEL_FROM_OST ;
      END IF;
     P_BCT_SEQ_NO := NVL(P_BCT_SEQ_NO,0) + 1;
   IF SEL_BANK_ENTRY%ISOPEN THEN
      CLOSE SEL_BANK_ENTRY;
   END IF;
   OPEN SEL_BANK_ENTRY ;
   FETCH SEL_BANK_ENTRY INTO
        P2_TD_DIVN_CODE, P2_TD_DEPT_CODE, P2_TD_HEAD_NO_1, P2_TD_ANLY_CODE_1,
        P2_TD_HEAD_NO_2, P2_TD_ANLY_CODE_2;
   IF SEL_BANK_ENTRY%NOTFOUND THEN
        P2_TD_DIVN_CODE := P_TD_DIVN_CODE;
        P2_TD_DEPT_CODE := P_TD_DEPT_CODE;
        P2_TD_HEAD_NO_1 := P_TD_HEAD_NO_1;
        P2_TD_ANLY_CODE_1 := P_TD_ANLY_CODE_1;
        P2_TD_HEAD_NO_2 := P_TD_HEAD_NO_2;
        P2_TD_ANLY_CODE_2 := P_TD_ANLY_CODE_2;
   END IF;
   IF NVL(P_TD_CURR_CODE,'XXXX') = NVL(NEW_BANK_CURR_CODE,'XXXX') THEN
      TEMP_FC_AMT   := P_TD_FC_AMT ;
      TEMP_LC_AMT   := P_TD_DOC_AMT ;
   ELSE   /* otherwise it is base currency */
      TEMP_FC_AMT   := P_TD_DOC_AMT ;
      TEMP_LC_AMT   := P_TD_DOC_AMT ;
   END IF;
     INSERT INTO FT_CUR_TRANS_DETAIL
              (TD_COMP_CODE, TD_ACNT_YEAR, TD_TRAN_CODE, TD_DOC_NO,
               TD_SEQ_NO, TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE,
               TD_DIVN_CODE, TD_DEPT_CODE, TD_HEAD_NO_1, TD_ANLY_CODE_1,
               TD_HEAD_NO_2, TD_ANLY_CODE_2, TD_CURR_CODE, TD_DOC_AMT,
               TD_DOC_DRCR_FLAG, TD_FC_AMT, TD_DOC_REF, TD_DOC_DUE_DT,
               TD_OTH_REF, TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2,
               TD_DESC, TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG,
               TD_MONTH_PRC_FLAG, TD_BILL_FC_AMT, TD_BILL_LC_AMT,
               TD_BILL_STATUS, TD_PYMT_APPR_FLAG, TD_CR_UID, TD_CR_DT)
     VALUES   (NEW_BCT_COMP_CODE,NEW_BCT_ACNT_YEAR,NEW_BCT_TRAN_CODE,
               NEW_BCT_DOC_NO ,P_BCT_SEQ_NO,
               NEW_BANK_MAIN_ACNT_CODE ,
               NEW_BANK_SUB_ACNT_CODE ,
               P2_TD_DIVN_CODE,
               P2_TD_DEPT_CODE ,
               P2_TD_HEAD_NO_1,
               P2_TD_ANLY_CODE_1,
               P2_TD_HEAD_NO_2 ,
               P2_TD_ANLY_CODE_2 ,
               P_TD_CURR_CODE ,
               TEMP_LC_AMT ,
               P_TD_DOC_DRCR_FLAG,
               TEMP_FC_AMT ,
               '' ,
               NEW_BCT_DOC_DT,
               '',
               '',
               '' ,
               '' ,
               'N' ,
               'N' ,
               'N' ,
               ''  ,
               '' ,
               '' ,
               '0' ,
               NEW_BCT_CR_UID ,
               NEW_BCT_CR_DT ) ;
   CLOSE SEL_BANK_ENTRY ;
  END LOOP;
  CLOSE SEL_RCPT_ENTRY ;
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FT_CASH_RIMB (
 OLD_RIMB_KEY_NO              IN      NUMBER,
 OLD_RIMB_COMP_CODE           IN      VARCHAR2,
 OLD_RIMB_CASH_MAIN_ACNT_CODE IN      VARCHAR2,
 OLD_RIMB_DOC_NO              IN      NUMBER,
 OLD_RIMB_DOC_DT              IN      DATE,
 OLD_RIMB_BANK_MAIN_ACNT_CODE IN      VARCHAR2,
 OLD_RIMB_TOT_DISB_AMT        IN      NUMBER,
 OLD_RIMB_CR_UID              IN      VARCHAR2,
 OLD_RIMB_CR_DT               IN      DATE,
 NEW_RIMB_KEY_NO              IN OUT  NUMBER,
 NEW_RIMB_COMP_CODE           IN OUT  VARCHAR2,
 NEW_RIMB_CASH_MAIN_ACNT_CODE IN OUT  VARCHAR2,
 NEW_RIMB_DOC_NO              IN OUT  NUMBER,
 NEW_RIMB_DOC_DT              IN OUT  DATE,
 NEW_RIMB_PETTY_CASH_NO       IN OUT  VARCHAR2,
 NEW_RIMB_BANK_MAIN_ACNT_CODE IN OUT  VARCHAR2,
 NEW_RIMB_BANK_SUB_ACNT_CODE  IN OUT  VARCHAR2,
 NEW_RIMB_BANK_DIVN_CODE      IN OUT  VARCHAR2,
 NEW_RIMB_BANK_DEPT_CODE      IN OUT  VARCHAR2,
 NEW_RIMB_BANK_HEAD_NO_1      IN OUT  NUMBER,
 NEW_RIMB_BANK_HEAD_NO_2      IN OUT  NUMBER,
 NEW_RIMB_BANK_ANLY_CODE_1    IN OUT  VARCHAR2,
 NEW_RIMB_BANK_ANLY_CODE_2    IN OUT  VARCHAR2,
 N_RIMB_BANK_ACTY_VALUE_CODE_1    IN OUT  VARCHAR2,
 N_RIMB_BANK_ACTY_VALUE_CODE_2    IN OUT  VARCHAR2,
 NEW_RIMB_TOT_DISB_AMT        IN OUT  NUMBER,
 NEW_RIMB_CR_UID              IN OUT  VARCHAR2,
 NEW_RIMB_CR_DT               IN OUT  DATE,
 TRG_MODE                     IN OUT  VARCHAR2,
 TRG_ERR_NO                      OUT  NUMBER,
 TRG_ERR_MSG                     OUT  VARCHAR2) AS
P_LC_AMT         NUMBER(14,3);
P_TOT_LC_AMT     NUMBER(14,3);
P_NAME           VARCHAR2(60);
P_ERR_NO         NUMBER(6);
P_ACNT_YEAR      NUMBER(2);
P_CUR_ACNT_YEAR  NUMBER(2);
P_RIMB_TRAN_CODE VARCHAR2(3);
P_DOC_CAL_MONTH  NUMBER(2);
P_DOC_CAL_YEAR   NUMBER(4);
P_PHS_KEY_NO     NUMBER(8) ;
P_SUB_ACNT_CODE  VARCHAR2(6);
P_DIVN_CODE      VARCHAR2(6);
P_DEPT_CODE      VARCHAR2(6);
P_ANLY_CODE_1    VARCHAR2(6);
P_ANLY_CODE_2    VARCHAR2(6);
P_ACTY_VALUE_CODE_1 VARCHAR2(6);
P_ACTY_VALUE_CODE_2 VARCHAR2(6);
CURSOR SEL_RIMB_TC IS
SELECT SUBSTR(PARA_VALUE,1,3)
FROM   FP_PARAMETER
WHERE  PARA_ID = 'RIMB.TC';
CURSOR SEL_DISB IS
SELECT DISB_LC_AMT
FROM   FT_CASH_DISB
WHERE  DISB_RIMB_KEY_NO IS NULL
FOR UPDATE OF DISB_RIMB_KEY_NO;
CURSOR SEL_CASH_ACNT_DETL IS
SELECT CS_CASH_SUB_ACNT_CODE, CS_CASH_DIVN_CODE, CS_CASH_DEPT_CODE,
       CS_CASH_ANLY_CODE_1,   CS_CASH_ANLY_CODE_2, CS_CASH_ACTY_VALUE_CODE_1,
       CS_CASH_ACTY_VALUE_CODE_2
FROM   FT_CASH_SUMMARY
WHERE  CS_PETTY_CASH_NO = NEW_RIMB_PETTY_CASH_NO
AND    CS_CASH_MAIN_ACNT_CODE = NEW_RIMB_CASH_MAIN_ACNT_CODE;
BEGIN
IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
     RAISE_APPLICATION_ERROR(-20001, 'Cannot update or delete Reimbursement');
END IF;
P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(NEW_RIMB_COMP_CODE);
F_VAL_OPCL(NEW_RIMB_COMP_CODE, NEW_RIMB_DOC_DT,
      P_ERR_NO, P_DOC_CAL_YEAR, P_DOC_CAL_MONTH,
      P_ACNT_YEAR);
IF P_ERR_NO != 0 THEN
   RAISE_APPLICATION_ERROR(-20001,'Invalid Date - Accounting period');
END IF;
IF P_ACNT_YEAR != P_CUR_ACNT_YEAR THEN
   RAISE_APPLICATION_ERROR(-20001,'Invalid Date - Accounting year');
END IF;
IF SEL_RIMB_TC%ISOPEN THEN
   CLOSE SEL_RIMB_TC;
END IF;
OPEN SEL_RIMB_TC;
FETCH SEL_RIMB_TC INTO P_RIMB_TRAN_CODE;
IF SEL_RIMB_TC%NOTFOUND THEN
   RAISE_APPLICATION_ERROR(-20001,'Reimbursement TC not found');
END IF;
CLOSE SEL_RIMB_TC;
/* validate the transaction code
F_VAL_TRAN(P_RIMB_TRAN_CODE,'N',P_NAME, P_ERR_NO);
*/
IF SEL_DISB%ISOPEN THEN
     CLOSE SEL_DISB;
END IF;
OPEN SEL_DISB;
P_TOT_LC_AMT := 0;
<<DISB_LOOP>>
LOOP
FETCH SEL_DISB INTO P_LC_AMT;
EXIT WHEN SEL_DISB%NOTFOUND;
P_TOT_LC_AMT := NVL(P_TOT_LC_AMT,0) + NVL(P_LC_AMT,0);
UPDATE FT_CASH_DISB
SET    DISB_RIMB_KEY_NO = NEW_RIMB_KEY_NO
WHERE  CURRENT OF SEL_DISB;
END LOOP DISB_LOOP;
CLOSE SEL_DISB;
IF P_TOT_LC_AMT = 0 THEN
     RAISE_APPLICATION_ERROR(-20002, 'No Disbursements');
END IF;
UPDATE FT_CASH_SUMMARY
SET    CS_TOT_DISB_AMT = NVL(CS_TOT_DISB_AMT,0) - NVL(P_TOT_LC_AMT,0),
       CS_BAL_AMT      = NVL(CS_BAL_AMT,0) + NVL(P_TOT_LC_AMT,0)
WHERE  CS_COMP_CODE = NEW_RIMB_COMP_CODE
AND    CS_CASH_MAIN_ACNT_CODE = NEW_RIMB_CASH_MAIN_ACNT_CODE;
      SELECT SEQ_PHS_KEY_NO.NEXTVAL
      INTO   P_PHS_KEY_NO
      FROM   DUAL ;
      INSERT INTO FS_PROC_HEADER
             (PHS_KEY_NO, PHS_USER_ID, PHS_PROC_DT, PHS_PROC_STATUS,
              PHS_COMP_CODE, PHS_TRAN_FRM, PHS_TRAN_TO, PHS_TRAN_DT_FRM,
              PHS_TRAN_DT_TO, PHS_DOC_NO_FRM, PHS_DOC_NO_TO,
              PHS_USER_PATTERN, PHS_HEAD_REC_TOT, PHS_DETAIL_REC_TOT,
              PHS_AMT_TOT, PHS_ERROR_NAME, PHS_CR_UID, PHS_CR_DT)
      VALUES (P_PHS_KEY_NO, NEW_RIMB_CR_UID, SYSDATE, '', NEW_RIMB_COMP_CODE,
              P_RIMB_TRAN_CODE, P_RIMB_TRAN_CODE,
              NEW_RIMB_DOC_DT, NEW_RIMB_DOC_DT, NEW_RIMB_DOC_NO,
              NEW_RIMB_DOC_NO, NEW_RIMB_CR_UID, '1', '', '', '',
              NEW_RIMB_CR_UID, NEW_RIMB_CR_DT) ;
/* Create another voucher : cr- Bank and dr - Cash acnt */
/* Insert Transaction Header */
INSERT INTO FT_CUR_TRANS_HEADER
(TH_COMP_CODE, TH_ACNT_YEAR, TH_TRAN_CODE, TH_DOC_NO,
 TH_DOC_DT, TH_DOC_CAL_YEAR, TH_DOC_CAL_MONTH, TH_DOC_REF,
 TH_DOC_REF_DT, TH_DOC_DUE_DT, TH_DIVN_CODE, TH_DEPT_CODE,
 TH_CTL_TOTAL, TH_DESC, TH_ANNOTATION, TH_CR_UID, TH_CR_DT)
 VALUES
 (NEW_RIMB_COMP_CODE, P_CUR_ACNT_YEAR, P_RIMB_TRAN_CODE,
  NEW_RIMB_DOC_NO, NEW_RIMB_DOC_DT, P_DOC_CAL_YEAR,
  P_DOC_CAL_MONTH, NULL, NULL, NEW_RIMB_DOC_DT, NULL, NULL, P_PHS_KEY_NO,
  'REIMBURSEMENT GENERATED BY SYSTEM', '', NEW_RIMB_CR_UID,
  NEW_RIMB_CR_DT);
INSERT INTO FT_CUR_TRANS_DETAIL
(TD_COMP_CODE, TD_ACNT_YEAR, TD_TRAN_CODE, TD_DOC_NO, TD_SEQ_NO,
 TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE, TD_DIVN_CODE, TD_DEPT_CODE,
 TD_HEAD_NO_1, TD_ANLY_CODE_1, TD_HEAD_NO_2, TD_ANLY_CODE_2,
 TD_DOC_AMT, TD_DOC_DRCR_FLAG, TD_DOC_DUE_DT,
 TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2, TD_DESC,
 TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG, TD_MONTH_PRC_FLAG,
 TD_PYMT_APPR_FLAG, TD_CR_UID, TD_CR_DT)
 SELECT
 NEW_RIMB_COMP_CODE, P_CUR_ACNT_YEAR, P_RIMB_TRAN_CODE,
 NEW_RIMB_DOC_NO, 1, NEW_RIMB_BANK_MAIN_ACNT_CODE, NEW_RIMB_BANK_SUB_ACNT_CODE,
 NEW_RIMB_BANK_DIVN_CODE, NEW_RIMB_BANK_DEPT_CODE, '1',
 NEW_RIMB_BANK_ANLY_CODE_1, '2', NEW_RIMB_BANK_ANLY_CODE_2,
 SUM(DISB_LC_AMT), 'C', NEW_RIMB_DOC_DT, N_RIMB_BANK_ACTY_VALUE_CODE_1,
 N_RIMB_BANK_ACTY_VALUE_CODE_2, NULL, 'N', 'N', 'N', '0',
 NEW_RIMB_CR_UID, NEW_RIMB_CR_DT
 FROM FT_CASH_DISB
 WHERE DISB_RIMB_KEY_NO = NEW_RIMB_KEY_NO;
 /* Get accounting details of Cash Account */
 IF SEL_CASH_ACNT_DETL%ISOPEN THEN
    CLOSE SEL_CASH_ACNT_DETL;
 END IF;
 OPEN SEL_CASH_ACNT_DETL;
 FETCH SEL_CASH_ACNT_DETL INTO P_SUB_ACNT_CODE, P_DIVN_CODE, P_DEPT_CODE,
         P_ANLY_CODE_1, P_ANLY_CODE_2, P_ACTY_VALUE_CODE_1, P_ACTY_VALUE_CODE_2;
 IF SEL_CASH_ACNT_DETL%NOTFOUND THEN
    RAISE_APPLICATION_ERROR(-20001,'Petty Cash Summary details not found');
 END IF;
 CLOSE SEL_CASH_ACNT_DETL;
INSERT INTO FT_CUR_TRANS_DETAIL
(TD_COMP_CODE, TD_ACNT_YEAR, TD_TRAN_CODE, TD_DOC_NO, TD_SEQ_NO,
 TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE, TD_DIVN_CODE, TD_DEPT_CODE,
 TD_HEAD_NO_1, TD_ANLY_CODE_1, TD_HEAD_NO_2, TD_ANLY_CODE_2,
 TD_DOC_AMT, TD_DOC_DRCR_FLAG, TD_DOC_DUE_DT,
 TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2, TD_DESC,
 TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG, TD_MONTH_PRC_FLAG,
 TD_PYMT_APPR_FLAG, TD_CR_UID, TD_CR_DT)
 SELECT
 NEW_RIMB_COMP_CODE, P_CUR_ACNT_YEAR, P_RIMB_TRAN_CODE,
 NEW_RIMB_DOC_NO, 2, NEW_RIMB_CASH_MAIN_ACNT_CODE, P_SUB_ACNT_CODE,
 P_DIVN_CODE, P_DEPT_CODE, '1',
 P_ANLY_CODE_1, '2', P_ANLY_CODE_2,
 SUM(DISB_LC_AMT), 'D', NEW_RIMB_DOC_DT, P_ACTY_VALUE_CODE_1,
 P_ACTY_VALUE_CODE_2, NULL, 'N', 'N', 'N', '0',
 NEW_RIMB_CR_UID, NEW_RIMB_CR_DT
 FROM FT_CASH_DISB
 WHERE DISB_RIMB_KEY_NO = NEW_RIMB_KEY_NO;
/* Insert Transaction Header */
INSERT INTO FT_CUR_TRANS_HEADER
(TH_COMP_CODE, TH_ACNT_YEAR, TH_TRAN_CODE, TH_DOC_NO,
 TH_DOC_DT, TH_DOC_CAL_YEAR, TH_DOC_CAL_MONTH, TH_DOC_REF,
 TH_DOC_REF_DT, TH_DOC_DUE_DT, TH_DIVN_CODE, TH_DEPT_CODE,
 TH_CTL_TOTAL, TH_DESC, TH_ANNOTATION, TH_CR_UID, TH_CR_DT)
 VALUES
 (NEW_RIMB_COMP_CODE, P_CUR_ACNT_YEAR, P_RIMB_TRAN_CODE,
  NVL(NEW_RIMB_DOC_NO,0) + 1, NEW_RIMB_DOC_DT, P_DOC_CAL_YEAR,
  P_DOC_CAL_MONTH, NULL, NULL, NEW_RIMB_DOC_DT, NULL, NULL, P_PHS_KEY_NO,
  'REIMBURSEMENT GENERATED BY SYSTEM', '', NEW_RIMB_CR_UID,
  NEW_RIMB_CR_DT);
/* Create another voucher : cr- cash and dr - disbursement acnts */
/* Insert Transaction Details */
INSERT INTO FT_CUR_TRANS_DETAIL
(TD_COMP_CODE, TD_ACNT_YEAR, TD_TRAN_CODE, TD_DOC_NO, TD_SEQ_NO,
 TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE, TD_DIVN_CODE, TD_DEPT_CODE,
 TD_HEAD_NO_1, TD_ANLY_CODE_1, TD_HEAD_NO_2, TD_ANLY_CODE_2,
 TD_DOC_AMT, TD_DOC_DRCR_FLAG, TD_DOC_DUE_DT,
 TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2, TD_DESC,
 TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG, TD_MONTH_PRC_FLAG,
 TD_PYMT_APPR_FLAG, TD_CR_UID, TD_CR_DT)
 SELECT
 NEW_RIMB_COMP_CODE, P_CUR_ACNT_YEAR, P_RIMB_TRAN_CODE,
 NVL(NEW_RIMB_DOC_NO,0) + 1, 1 + ROWNUM, DISB_MAIN_ACNT_CODE,
 DISB_SUB_ACNT_CODE,
 DISB_DIVN_CODE, DISB_DEPT_CODE, '1', DISB_ANLY_CODE_1, '2',
 DISB_ANLY_CODE_2, DISB_LC_AMT, 'D', NEW_RIMB_DOC_DT,
 DISB_ACTY_VALUE_CODE_1, DISB_ACTY_VALUE_CODE_2, NULL, 'N', 'N', 'N', '0',
 NEW_RIMB_CR_UID, NEW_RIMB_CR_DT
 FROM FT_CASH_DISB
 WHERE DISB_RIMB_KEY_NO = NEW_RIMB_KEY_NO;
INSERT INTO FT_CUR_TRANS_DETAIL
(TD_COMP_CODE, TD_ACNT_YEAR, TD_TRAN_CODE, TD_DOC_NO, TD_SEQ_NO,
 TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE, TD_DIVN_CODE, TD_DEPT_CODE,
 TD_HEAD_NO_1, TD_ANLY_CODE_1, TD_HEAD_NO_2, TD_ANLY_CODE_2,
 TD_DOC_AMT, TD_DOC_DRCR_FLAG, TD_DOC_DUE_DT,
 TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2, TD_DESC,
 TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG, TD_MONTH_PRC_FLAG,
 TD_PYMT_APPR_FLAG, TD_CR_UID, TD_CR_DT)
 SELECT
 NEW_RIMB_COMP_CODE, P_CUR_ACNT_YEAR, P_RIMB_TRAN_CODE,
 NVL(NEW_RIMB_DOC_NO,0) + 1, 1,
 NEW_RIMB_CASH_MAIN_ACNT_CODE, P_SUB_ACNT_CODE,
 P_DIVN_CODE, P_DEPT_CODE, '1',
 P_ANLY_CODE_1, '2', P_ANLY_CODE_2,
 SUM(DISB_LC_AMT), 'D', NEW_RIMB_DOC_DT, P_ACTY_VALUE_CODE_1,
 P_ACTY_VALUE_CODE_2, NULL, 'N', 'N', 'N', '0',
 NEW_RIMB_CR_UID, NEW_RIMB_CR_DT
 FROM FT_CASH_DISB
 WHERE DISB_RIMB_KEY_NO = NEW_RIMB_KEY_NO;
END;
/
CREATE OR REPLACE PROCEDURE STP_FT_CJV_DETAIL (
 OLD_CJVD_COMP_CODE           IN      VARCHAR2,
 OLD_CJVD_ORGL_ACNT_YEAR      IN      NUMBER,
 OLD_CJVD_ORGL_TRAN_CODE      IN      VARCHAR2,
 OLD_CJVD_ORGL_DOC_NO         IN      NUMBER,
 OLD_CJVD_ORGL_SEQ_NO         IN      NUMBER,
 OLD_CJVD_ORGL_MAIN_ACNT_CODE IN      VARCHAR2,
 OLD_CJVD_ORGL_SUB_ACNT_CODE  IN      VARCHAR2,
 OLD_CJVD_ORGL_DIVN_CODE      IN      VARCHAR2,
 OLD_CJVD_ORGL_DEPT_CODE      IN      VARCHAR2,
 OLD_CJVD_ORGL_ANLY_CODE_1    IN      VARCHAR2,
 OLD_CJVD_ORGL_ANLY_CODE_2    IN      VARCHAR2,
 OLD_CJVD_ORGL_ACTY_CODE_1    IN      VARCHAR2,
 OLD_CJVD_ORGL_ACTY_CODE_2    IN      VARCHAR2,
 OLD_CJVD_ORGL_CURR_CODE      IN      VARCHAR2,
 OLD_CJVD_ORGL_FC_AMT         IN      NUMBER,
 OLD_CJVD_ORGL_LC_AMT         IN      NUMBER,
 OLD_CJVD_ORGL_DOC_DRCR_FLAG  IN      VARCHAR2,
 OLD_CJVD_CORR_MAIN_ACNT_CODE IN      VARCHAR2,
 OLD_CJVD_CORR_SUB_ACNT_CODE  IN      VARCHAR2,
 OLD_CJVD_CORR_DIVN_CODE      IN      VARCHAR2,
 OLD_CJVD_CORR_DEPT_CODE      IN      VARCHAR2,
 OLD_CJVD_CORR_ANLY_CODE_1    IN      VARCHAR2,
 OLD_CJVD_CORR_ANLY_CODE_2    IN      VARCHAR2,
 OLD_CJVD_CORR_ACTY_CODE_1    IN      VARCHAR2,
 OLD_CJVD_CORR_ACTY_CODE_2    IN      VARCHAR2,
 OLD_CJVD_CR_UID              IN      VARCHAR2,
 OLD_CJVD_CR_DT               IN      DATE,
 NEW_CJVD_COMP_CODE           IN OUT  VARCHAR2,
 NEW_CJVD_ORGL_ACNT_YEAR      IN OUT  NUMBER,
 NEW_CJVD_ORGL_TRAN_CODE      IN OUT  VARCHAR2,
 NEW_CJVD_ORGL_DOC_NO         IN OUT  NUMBER,
 NEW_CJVD_ORGL_SEQ_NO         IN OUT  NUMBER,
 NEW_CJVD_ORGL_MAIN_ACNT_CODE IN OUT  VARCHAR2,
 NEW_CJVD_ORGL_SUB_ACNT_CODE  IN OUT  VARCHAR2,
 NEW_CJVD_ORGL_DIVN_CODE      IN OUT  VARCHAR2,
 NEW_CJVD_ORGL_DEPT_CODE      IN OUT  VARCHAR2,
 NEW_CJVD_ORGL_ANLY_CODE_1    IN OUT  VARCHAR2,
 NEW_CJVD_ORGL_ANLY_CODE_2    IN OUT  VARCHAR2,
 NEW_CJVD_ORGL_ACTY_CODE_1    IN OUT  VARCHAR2,
 NEW_CJVD_ORGL_ACTY_CODE_2    IN OUT  VARCHAR2,
 NEW_CJVD_ORGL_CURR_CODE      IN OUT  VARCHAR2,
 NEW_CJVD_ORGL_FC_AMT         IN OUT  NUMBER,
 NEW_CJVD_ORGL_LC_AMT         IN OUT  NUMBER,
 NEW_CJVD_ORGL_DOC_DRCR_FLAG  IN OUT  VARCHAR2,
 NEW_CJVD_CORR_MAIN_ACNT_CODE IN OUT  VARCHAR2,
 NEW_CJVD_CORR_SUB_ACNT_CODE  IN OUT  VARCHAR2,
 NEW_CJVD_CORR_DIVN_CODE      IN OUT  VARCHAR2,
 NEW_CJVD_CORR_DEPT_CODE      IN OUT  VARCHAR2,
 NEW_CJVD_CORR_ANLY_CODE_1    IN OUT  VARCHAR2,
 NEW_CJVD_CORR_ANLY_CODE_2    IN OUT  VARCHAR2,
 NEW_CJVD_CORR_ACTY_CODE_1    IN OUT  VARCHAR2,
 NEW_CJVD_CORR_ACTY_CODE_2    IN OUT  VARCHAR2,
 NEW_CJVD_CR_UID              IN OUT  VARCHAR2,
 NEW_CJVD_CR_DT               IN OUT  DATE,
 TRG_MODE                     IN OUT  VARCHAR2,
 TRG_ERR_NO                      OUT  NUMBER,
 TRG_ERR_MSG                     OUT  VARCHAR2) AS
BEGIN
IF   NEW_CJVD_ORGL_MAIN_ACNT_CODE !=
     NEW_CJVD_CORR_MAIN_ACNT_CODE
   OR NVL(NEW_CJVD_ORGL_SUB_ACNT_CODE,'ZZZZZZZ') !=
      NVL(NEW_CJVD_CORR_SUB_ACNT_CODE,'ZZZZZZZ')
   OR NVL(NEW_CJVD_ORGL_DIVN_CODE,'ZZZZZZZ') !=
      NVL(NEW_CJVD_CORR_DIVN_CODE,'ZZZZZZZ')
   OR NVL(NEW_CJVD_ORGL_DEPT_CODE,'ZZZZZZZ') !=
      NVL(NEW_CJVD_CORR_DEPT_CODE,'ZZZZZZZ')
   OR NVL(NEW_CJVD_ORGL_ANLY_CODE_1,'ZZZZZZZ') !=
      NVL(NEW_CJVD_CORR_ANLY_CODE_1,'ZZZZZZZ')
   OR NVL(NEW_CJVD_ORGL_ANLY_CODE_2,'ZZZZZZZ') !=
      NVL(NEW_CJVD_CORR_ANLY_CODE_2,'ZZZZZZZ')
   OR NVL(NEW_CJVD_ORGL_ACTY_CODE_1,'ZZZZZZZ') !=
      NVL(NEW_CJVD_CORR_ACTY_CODE_1,'ZZZZZZZ')
   OR NVL(NEW_CJVD_ORGL_ACTY_CODE_2,'ZZZZZZZ') !=
      NVL(NEW_CJVD_CORR_ACTY_CODE_2,'ZZZZZZZ') THEN
   INSERT INTO FT_CUR_TRANS_DETAIL (TD_COMP_CODE, TD_ACNT_YEAR, TD_TRAN_CODE,
          TD_DOC_NO, TD_SEQ_NO, TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE,
          TD_DIVN_CODE, TD_DEPT_CODE, TD_HEAD_NO_1, TD_ANLY_CODE_1,
          TD_HEAD_NO_2, TD_ANLY_CODE_2, TD_CURR_CODE, TD_DOC_AMT,
          TD_DOC_DRCR_FLAG, TD_FC_AMT, TD_DOC_REF, TD_DOC_DUE_DT, TD_OTH_REF,
          TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2, TD_DESC,
          TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG, TD_MONTH_PRC_FLAG,
          TD_BILL_FC_AMT, TD_BILL_LC_AMT, TD_BILL_STATUS, TD_PYMT_APPR_FLAG,
          TD_CR_UID, TD_CR_DT)
   SELECT CJV_COMP_CODE, CJV_ORGL_ACNT_YEAR, CJV_CORR_TRAN_CODE,
          CJV_CORR_DOC_NO, TD_SEQ_NO, TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE,
          TD_DIVN_CODE, TD_DEPT_CODE, TD_HEAD_NO_1, TD_ANLY_CODE_1,
          TD_HEAD_NO_2, TD_ANLY_CODE_2, TD_CURR_CODE, TD_DOC_AMT,
          DECODE(TD_DOC_DRCR_FLAG,'D','C','D'), TD_FC_AMT, TD_DOC_REF,
          CJV_CORR_DOC_DT, TD_OTH_REF,
          TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2, TD_DESC,
          TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG, TD_MONTH_PRC_FLAG,
          TD_BILL_FC_AMT, TD_BILL_LC_AMT, TD_BILL_STATUS, TD_PYMT_APPR_FLAG,
          TD_CR_UID, TD_CR_DT
   FROM   FT_CUR_TRANS_DETAIL, FT_CORRECTION_JV
   WHERE  TD_COMP_CODE = NEW_CJVD_COMP_CODE
   AND    TD_TRAN_CODE = NEW_CJVD_ORGL_TRAN_CODE
   AND    TD_ACNT_YEAR = NEW_CJVD_ORGL_ACNT_YEAR
   AND    TD_DOC_NO = NEW_CJVD_ORGL_DOC_NO
   AND    TD_SEQ_NO = NEW_CJVD_ORGL_SEQ_NO
   AND    CJV_COMP_CODE = NEW_CJVD_COMP_CODE
   AND    CJV_ORGL_TRAN_CODE =NEW_CJVD_ORGL_TRAN_CODE
   AND    CJV_ORGL_ACNT_YEAR = NEW_CJVD_ORGL_ACNT_YEAR
   AND    CJV_ORGL_DOC_NO = NEW_CJVD_ORGL_DOC_NO;
   INSERT INTO FT_CUR_TRANS_DETAIL (TD_COMP_CODE, TD_ACNT_YEAR, TD_TRAN_CODE,
          TD_DOC_NO, TD_SEQ_NO, TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE,
          TD_DIVN_CODE, TD_DEPT_CODE, TD_HEAD_NO_1, TD_ANLY_CODE_1,
          TD_HEAD_NO_2, TD_ANLY_CODE_2, TD_CURR_CODE, TD_DOC_AMT,
          TD_DOC_DRCR_FLAG, TD_FC_AMT, TD_DOC_REF, TD_DOC_DUE_DT, TD_OTH_REF,
          TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2, TD_DESC,
          TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG, TD_MONTH_PRC_FLAG,
          TD_BILL_FC_AMT, TD_BILL_LC_AMT, TD_BILL_STATUS, TD_PYMT_APPR_FLAG,
          TD_CR_UID, TD_CR_DT)
   SELECT CJV_COMP_CODE, CJV_ORGL_ACNT_YEAR, CJV_CORR_TRAN_CODE,
          CJV_CORR_DOC_NO, TD_SEQ_NO+500, NEW_CJVD_CORR_MAIN_ACNT_CODE,
          NEW_CJVD_CORR_SUB_ACNT_CODE, NEW_CJVD_CORR_DIVN_CODE,
          NEW_CJVD_CORR_DEPT_CODE, TD_HEAD_NO_1, NEW_CJVD_CORR_ANLY_CODE_1,
          TD_HEAD_NO_2, NEW_CJVD_CORR_ANLY_CODE_2, TD_CURR_CODE, TD_DOC_AMT,
          TD_DOC_DRCR_FLAG, TD_FC_AMT, TD_DOC_REF,
          CJV_CORR_DOC_DT, TD_OTH_REF,
          NEW_CJVD_CORR_ACTY_CODE_1, NEW_CJVD_CORR_ACTY_CODE_2, TD_DESC,
          TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG, TD_MONTH_PRC_FLAG,
          TD_BILL_FC_AMT, TD_BILL_LC_AMT, TD_BILL_STATUS, TD_PYMT_APPR_FLAG,
          TD_CR_UID, TD_CR_DT
   FROM   FT_CUR_TRANS_DETAIL, FT_CORRECTION_JV
   WHERE  TD_COMP_CODE = NEW_CJVD_COMP_CODE
   AND    TD_TRAN_CODE = NEW_CJVD_ORGL_TRAN_CODE
   AND    TD_ACNT_YEAR = NEW_CJVD_ORGL_ACNT_YEAR
   AND    TD_DOC_NO = NEW_CJVD_ORGL_DOC_NO
   AND    TD_SEQ_NO = NEW_CJVD_ORGL_SEQ_NO
   AND    CJV_COMP_CODE = NEW_CJVD_COMP_CODE
   AND    CJV_ORGL_TRAN_CODE =NEW_CJVD_ORGL_TRAN_CODE
   AND    CJV_ORGL_ACNT_YEAR = NEW_CJVD_ORGL_ACNT_YEAR
   AND    CJV_ORGL_DOC_NO = NEW_CJVD_ORGL_DOC_NO;
  F_CHK_DRCR_SUM(NEW_CJVD_COMP_CODE, NEW_CJVD_ORGL_ACNT_YEAR,
                 NEW_CJVD_ORGL_TRAN_CODE, NEW_CJVD_ORGL_DOC_NO);
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FT_CORRECTION_JV (
 OLD_CJV_COMP_CODE         IN      VARCHAR2,
 OLD_CJV_ORGL_ACNT_YEAR    IN      NUMBER,
 OLD_CJV_ORGL_TRAN_CODE    IN      VARCHAR2,
 OLD_CJV_ORGL_DOC_NO       IN      NUMBER,
 OLD_CJV_ORGL_DOC_DT       IN      DATE,
 OLD_CJV_CORR_TRAN_CODE    IN      VARCHAR2,
 OLD_CJV_CORR_DOC_NO       IN      NUMBER,
 OLD_CJV_CORR_DOC_DT       IN      DATE,
 OLD_CJV_CORR_DESC         IN      VARCHAR2,
 OLD_CJV_CR_UID            IN      VARCHAR2,
 OLD_CJV_CR_DT             IN      DATE,
 NEW_CJV_COMP_CODE         IN OUT  VARCHAR2,
 NEW_CJV_ORGL_ACNT_YEAR    IN OUT  NUMBER,
 NEW_CJV_ORGL_TRAN_CODE    IN OUT  VARCHAR2,
 NEW_CJV_ORGL_DOC_NO       IN OUT  NUMBER,
 NEW_CJV_ORGL_DOC_DT       IN OUT  DATE,
 NEW_CJV_CORR_TRAN_CODE    IN OUT  VARCHAR2,
 NEW_CJV_CORR_DOC_NO       IN OUT  NUMBER,
 NEW_CJV_CORR_DOC_DT       IN OUT  DATE,
 NEW_CJV_CORR_DESC         IN OUT  VARCHAR2,
 NEW_CJV_CR_UID            IN OUT  VARCHAR2,
 NEW_CJV_CR_DT             IN OUT  DATE,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2) AS
P_ERR_NO            NUMBER(6);
P_CAL_MONTH         NUMBER(2);
P_CAL_YEAR          NUMBER(4);
P_ACNT_YEAR         NUMBER(2);
P_CUR_ACNT_YEAR     NUMBER(2);
P_PHS_KEY_NO        NUMBER(8);
BEGIN
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
    P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(NEW_CJV_COMP_CODE);
ELSE
    P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(OLD_CJV_COMP_CODE);
END IF;
P_ERR_NO := 0;
/* Validate if the document period corresponding to the document date
    is open. */
F_VAL_OPCL(NEW_CJV_COMP_CODE, NEW_CJV_CORR_DOC_DT, P_ERR_NO,
           P_CAL_YEAR, P_CAL_MONTH, P_ACNT_YEAR);
IF P_ERR_NO != 0 THEN
     RAISE_APPLICATION_ERROR(-20500 - P_ERR_NO, 'Period not open');
END IF;
      /* Insert into audit trail header */
      SELECT SEQ_PHS_KEY_NO.NEXTVAL
      INTO   P_PHS_KEY_NO
      FROM   DUAL ;
      INSERT INTO FS_PROC_HEADER
             (PHS_KEY_NO, PHS_USER_ID, PHS_PROC_DT, PHS_PROC_STATUS,
              PHS_COMP_CODE, PHS_TRAN_FRM, PHS_TRAN_TO, PHS_TRAN_DT_FRM,
              PHS_TRAN_DT_TO, PHS_DOC_NO_FRM, PHS_DOC_NO_TO,
              PHS_USER_PATTERN, PHS_HEAD_REC_TOT, PHS_DETAIL_REC_TOT,
              PHS_AMT_TOT, PHS_ERROR_NAME, PHS_CR_UID, PHS_CR_DT)
      VALUES (P_PHS_KEY_NO, NEW_CJV_CR_UID, SYSDATE, '', NEW_CJV_COMP_CODE,
              NEW_CJV_CORR_TRAN_CODE, NEW_CJV_CORR_TRAN_CODE,
              NEW_CJV_CORR_DOC_DT, NEW_CJV_CORR_DOC_DT, NEW_CJV_CORR_DOC_NO,
              NEW_CJV_CORR_DOC_NO, NEW_CJV_CR_UID, '1', '', '', '',
              NEW_CJV_CR_UID, NEW_CJV_CR_DT) ;
   INSERT INTO FT_CUR_TRANS_HEADER (TH_COMP_CODE, TH_ACNT_YEAR, TH_TRAN_CODE,
          TH_DOC_NO, TH_DOC_DT, TH_DOC_CAL_YEAR, TH_DOC_CAL_MONTH,
          TH_DOC_REF, TH_DOC_REF_DT, TH_DOC_DUE_DT, TH_DIVN_CODE,
          TH_DEPT_CODE, TH_CTL_TOTAL, TH_DESC, TH_ANNOTATION,
          TH_CR_UID, TH_CR_DT)
   SELECT TH_COMP_CODE, P_ACNT_YEAR, NEW_CJV_CORR_TRAN_CODE,
          NEW_CJV_CORR_DOC_NO, NEW_CJV_CORR_DOC_DT, P_CAL_YEAR, P_CAL_MONTH,
          NEW_CJV_ORGL_TRAN_CODE || NEW_CJV_ORGL_DOC_NO,
          NEW_CJV_ORGL_DOC_DT, NEW_CJV_CORR_DOC_DT, TH_DIVN_CODE,
          TH_DEPT_CODE, P_PHS_KEY_NO,
          'CORRECTION OF ' || NEW_CJV_ORGL_TRAN_CODE || ' ' ||
          TO_CHAR(NEW_CJV_ORGL_DOC_NO) || ' DATED ' ||
          TO_CHAR(NEW_CJV_ORGL_DOC_DT,'DD/MM/YYYY') || ' ' || NEW_CJV_CORR_DESC,
          TH_ANNOTATION,
          NEW_CJV_CR_UID, NEW_CJV_CR_DT
   FROM   FT_CUR_TRANS_HEADER
   WHERE  TH_COMP_CODE = NEW_CJV_COMP_CODE
   AND    TH_ACNT_YEAR = NEW_CJV_ORGL_ACNT_YEAR
   AND    TH_TRAN_CODE = NEW_CJV_ORGL_TRAN_CODE
   AND    TH_DOC_NO    = NEW_CJV_ORGL_DOC_NO;
END;
/
CREATE OR REPLACE PROCEDURE STP_FT_CUR_TRANS_DETAIL (
 OLD_TD_COMP_CODE               IN      VARCHAR2,
 OLD_TD_ACNT_YEAR               IN      NUMBER,
 OLD_TD_TRAN_CODE               IN      VARCHAR2,
 OLD_TD_DOC_NO                  IN      NUMBER,
 OLD_TD_SEQ_NO                  IN      NUMBER,
 OLD_TD_MAIN_ACNT_CODE          IN      VARCHAR2,
 OLD_TD_SUB_ACNT_CODE           IN      VARCHAR2,
 OLD_TD_DIVN_CODE               IN      VARCHAR2,
 OLD_TD_DEPT_CODE               IN      VARCHAR2,
 OLD_TD_HEAD_NO_1               IN      NUMBER,
 OLD_TD_ANLY_CODE_1             IN      VARCHAR2,
 OLD_TD_HEAD_NO_2               IN      NUMBER,
 OLD_TD_ANLY_CODE_2             IN      VARCHAR2,
 OLD_TD_CURR_CODE               IN      VARCHAR2,
 OLD_TD_DOC_AMT                 IN      NUMBER,
 OLD_TD_DOC_DRCR_FLAG           IN      VARCHAR2,
 OLD_TD_FC_AMT                  IN      NUMBER,
 OLD_TD_DOC_REF                 IN      VARCHAR2,
 OLD_TD_DOC_DUE_DT              IN      DATE,
 OLD_TD_OTH_REF                 IN      VARCHAR2,
 OLD_TD_ACTY_VALUE_CODE_1       IN      VARCHAR2,
 OLD_TD_ACTY_VALUE_CODE_2       IN      VARCHAR2,
 OLD_TD_DESC                    IN      VARCHAR2,
 OLD_TD_DBK_PRINT_FLAG          IN      VARCHAR2,
 OLD_TD_LED_PRINT_FLAG          IN      VARCHAR2,
 OLD_TD_MONTH_PRC_FLAG          IN      VARCHAR2,
 OLD_TD_BILL_FC_AMT             IN      NUMBER,
 OLD_TD_BILL_LC_AMT             IN      NUMBER,
 OLD_TD_BILL_STATUS             IN      VARCHAR2,
 OLD_TD_PYMT_APPR_FLAG          IN      VARCHAR2,
 OLD_TD_CR_UID                  IN      VARCHAR2,
 OLD_TD_CR_DT                   IN      DATE,
 OLD_TD_PYMT_LAST_APPR_FC_AMT   IN      NUMBER,
 OLD_TD_PYMT_LAST_APPR_LC_AMT   IN      NUMBER,
 OLD_TD_PYMT_LAST_APPR_BANK     IN      VARCHAR2,
 NEW_TD_COMP_CODE               IN OUT  VARCHAR2,
 NEW_TD_ACNT_YEAR               IN OUT  NUMBER,
 NEW_TD_TRAN_CODE               IN OUT  VARCHAR2,
 NEW_TD_DOC_NO                  IN OUT  NUMBER,
 NEW_TD_SEQ_NO                  IN OUT  NUMBER,
 NEW_TD_MAIN_ACNT_CODE          IN OUT  VARCHAR2,
 NEW_TD_SUB_ACNT_CODE           IN OUT  VARCHAR2,
 NEW_TD_DIVN_CODE               IN OUT  VARCHAR2,
 NEW_TD_DEPT_CODE               IN OUT  VARCHAR2,
 NEW_TD_HEAD_NO_1               IN OUT  NUMBER,
 NEW_TD_ANLY_CODE_1             IN OUT  VARCHAR2,
 NEW_TD_HEAD_NO_2               IN OUT  NUMBER,
 NEW_TD_ANLY_CODE_2             IN OUT  VARCHAR2,
 NEW_TD_CURR_CODE               IN OUT  VARCHAR2,
 NEW_TD_DOC_AMT                 IN OUT  NUMBER,
 NEW_TD_DOC_DRCR_FLAG           IN OUT  VARCHAR2,
 NEW_TD_FC_AMT                  IN OUT  NUMBER,
 NEW_TD_DOC_REF                 IN OUT  VARCHAR2,
 NEW_TD_DOC_DUE_DT              IN OUT  DATE,
 NEW_TD_OTH_REF                 IN OUT  VARCHAR2,
 NEW_TD_ACTY_VALUE_CODE_1       IN OUT  VARCHAR2,
 NEW_TD_ACTY_VALUE_CODE_2       IN OUT  VARCHAR2,
 NEW_TD_DESC                    IN OUT  VARCHAR2,
 NEW_TD_DBK_PRINT_FLAG          IN OUT  VARCHAR2,
 NEW_TD_LED_PRINT_FLAG          IN OUT  VARCHAR2,
 NEW_TD_MONTH_PRC_FLAG          IN OUT  VARCHAR2,
 NEW_TD_BILL_FC_AMT             IN OUT  NUMBER,
 NEW_TD_BILL_LC_AMT             IN OUT  NUMBER,
 NEW_TD_BILL_STATUS             IN OUT  VARCHAR2,
 NEW_TD_PYMT_APPR_FLAG          IN OUT  VARCHAR2,
 NEW_TD_CR_UID                  IN OUT  VARCHAR2,
 NEW_TD_CR_DT                   IN OUT  DATE,
 NEW_TD_PYMT_LAST_APPR_FC_AMT   IN OUT  NUMBER,
 NEW_TD_PYMT_LAST_APPR_LC_AMT   IN OUT  NUMBER,
 NEW_TD_PYMT_LAST_APPR_BANK     IN OUT  VARCHAR2,
 TRG_MODE                       IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2) AS
P_COMP_CODE         VARCHAR2(3);
P_ACNT_YEAR         NUMBER(2);
P_TRAN_CODE         VARCHAR2(3);
P_DOC_NO            NUMBER(6);
P_CUR_ACNT_YEAR     NUMBER(2);
P_CAL_MONTH         NUMBER(2);
P_CAL_YEAR          NUMBER(4);
P_DOC_DT            DATE;
P_DOC_DUE_DT        DATE;
P_DOC_REF_DT        DATE;
P_TD_MAIN_ACNT_CODE VARCHAR2(6);
P_OPEN_ENTRY_FLAG   VARCHAR2(1);
P_MAIN_ACNT_CATG    VARCHAR2(2);
P_DBTI_KEY_FIELD    VARCHAR2(30);
P_PHS_KEY_NO        FS_PROC_HEADER.PHS_KEY_NO%TYPE ;
P_CR_UID            FT_CUR_TRANS_HEADER.TH_CR_UID%TYPE ;
P_CR_DT             FT_CUR_TRANS_HEADER.TH_CR_DT%TYPE ;
P_BAL_AMT           NUMBER(20,3) ;
P_TRAN_AMT          NUMBER(20,3) ;
P_PDS_SEQ_NO        NUMBER(6) ;
P_ERR_NO            NUMBER(6);
CURSOR SEL_TH IS
       SELECT TH_DOC_DT, TH_DOC_CAL_MONTH, TH_DOC_CAL_YEAR,
              TH_DOC_DUE_DT, TH_DOC_REF_DT, TH_CTL_TOTAL,
              TH_CR_UID, TH_CR_DT
       FROM   FT_CUR_TRANS_HEADER
       WHERE  TH_COMP_CODE = P_COMP_CODE
       AND    TH_ACNT_YEAR = P_ACNT_YEAR
       AND    TH_TRAN_CODE = P_TRAN_CODE
       AND    TH_DOC_NO    = P_DOC_NO;
CURSOR SEL_TH_INFO IS
       SELECT TO_DATE(DBTI_VALUE_1,'DD-MON-YYYY'), TO_NUMBER(DBTI_VALUE_2),
              TO_NUMBER(DBTI_VALUE_3), TO_DATE(DBTI_VALUE_4,'DD-MON-YYYY'),
              TO_DATE(DBTI_VALUE_5,'DD-MON-YYYY'), TO_NUMBER(DBTI_VALUE_10),
              DBTI_VALUE_11, TO_DATE(DBTI_VALUE_12,'DD-MON-YYYY')
       FROM   FP_DBTRG_INTERFACE
       WHERE  DBTI_KEY_FIELD = P_DBTI_KEY_FIELD;
CURSOR SEL_MAIN IS
       SELECT MAIN_OPEN_ENTRY_FLAG, MAIN_ACNT_CATG
       FROM   FM_MAIN_ACCOUNT
       WHERE  MAIN_ACNT_CODE = P_TD_MAIN_ACNT_CODE;
CURSOR SEQ_NO IS
       SELECT MAX(PDS_SEQ_NO)
       FROM   FS_PROC_DETAIL
       WHERE  PDS_KEY_NO = P_PHS_KEY_NO ;
/* Declare Local procedures for repetitive use within the trigger */
PROCEDURE VALIDATE_CODE_COMBN IS
P_KEY    NUMBER(8);
BEGIN
F_VAL_COMB (NEW_TD_COMP_CODE, NEW_TD_DIVN_CODE, NEW_TD_DEPT_CODE,
            NEW_TD_MAIN_ACNT_CODE, NEW_TD_SUB_ACNT_CODE,
            NEW_TD_ANLY_CODE_1, NEW_TD_ANLY_CODE_2, P_ERR_NO, P_KEY);
IF P_ERR_NO != 0 THEN
     RAISE_APPLICATION_ERROR(-20016, 'Invalid Code combination');
END IF;
END;
PROCEDURE INSERT_CUR_OS IS
P_OST_KEY_NO     NUMBER(8);
P_OST_REF_KEY_NO NUMBER(8);
P_OST_LC_AMT     NUMBER(14,3);
P_OST_FC_AMT     NUMBEr(14,3);
CURSOR F_OS_DET IS
       SELECT OST_KEY_NO, OST_REF_KEY_NO,
              OST_LC_AMT, OST_FC_AMT
       FROM   FT_UNPOSTED_OS
       WHERE  (OST_COMP_CODE = NEW_TD_COMP_CODE)
       AND    (OST_ACNT_YEAR = NEW_TD_ACNT_YEAR)
       AND    (OST_TRAN_CODE = NEW_TD_TRAN_CODE)
       AND    (OST_DOC_NO    = NEW_TD_DOC_NO)
       AND    (OST_SEQ_NO    = NEW_TD_SEQ_NO);
BEGIN
   P_TD_MAIN_ACNT_CODE := NEW_TD_MAIN_ACNT_CODE;
   IF SEL_MAIN%ISOPEN THEN
        CLOSE SEL_MAIN;
   END IF;
   OPEN SEL_MAIN;
   FETCH SEL_MAIN INTO P_OPEN_ENTRY_FLAG, P_MAIN_ACNT_CATG ;
   IF SEL_MAIN%FOUND THEN
        IF P_OPEN_ENTRY_FLAG = 'Y' THEN
           IF F_OS_DET%ISOPEN THEN
                CLOSE F_OS_DET;
           END IF;
           OPEN F_OS_DET;
           FETCH F_OS_DET INTO P_OST_KEY_NO, P_OST_REF_KEY_NO,
                               P_OST_LC_AMT, P_OST_FC_AMT;
           IF F_OS_DET%FOUND THEN
                LOOP
                EXIT WHEN F_OS_DET%NOTFOUND;
                     INSERT INTO FS_MATCH_OS
                     SELECT FT_UNPOSTED_OS.*, 'FIN7',SYSDATE
                     FROM   FT_UNPOSTED_OS
                     WHERE  (OST_KEY_NO = P_OST_KEY_NO);
                     FETCH F_OS_DET INTO P_OST_KEY_NO, P_OST_REF_KEY_NO,
                                         P_OST_LC_AMT, P_OST_FC_AMT;
                END LOOP;
           ELSE
                F_OS(P_OST_KEY_NO);
                INSERT INTO FT_OS
                  (OST_KEY_NO, OST_COMP_CODE, OST_TRAN_CODE, OST_DOC_NO,
                   OST_SEQ_NO, OST_ACNT_YEAR, OST_DOC_DT, OST_DOC_CAL_YEAR,
                   OST_DOC_CAL_MONTH, OST_DUE_DT, OST_MAIN_ACNT_CODE,
                   OST_SUB_ACNT_CODE, OST_DIVN_CODE, OST_DEPT_CODE,
                   OST_HEAD_NO_1, OST_ANLY_CODE_1, OST_HEAD_NO_2,
                   OST_ANLY_CODE_2, OST_ACTY_CODE_1, OST_ACTY_CODE_2,
                   OST_CURR_CODE, OST_LC_AMT, OST_FC_AMT, OST_DRCR_FLAG,
                   OST_DOC_REF, OST_DOC_REF_DT, OST_OTH_REF,
                   OST_LC_ORG_AMT, OST_FC_ORG_AMT, OST_TYPE,
                   OST_CR_UID, OST_CR_DT)
                VALUES
                  (P_OST_KEY_NO, NEW_TD_COMP_CODE, NEW_TD_TRAN_CODE,
                   NEW_TD_DOC_NO, NEW_TD_SEQ_NO, NEW_TD_ACNT_YEAR,
                   P_DOC_DT, P_CAL_YEAR, P_CAL_MONTH, NEW_TD_DOC_DUE_DT,
                   NEW_TD_MAIN_ACNT_CODE, NEW_TD_SUB_ACNT_CODE,
                   NEW_TD_DIVN_CODE, NEW_TD_DEPT_CODE, NEW_TD_HEAD_NO_1,
                   NEW_TD_ANLY_CODE_1, NEW_TD_HEAD_NO_2,
                   NEW_TD_ANLY_CODE_2, NEW_TD_ACTY_VALUE_CODE_1,
                   NEW_TD_ACTY_VALUE_CODE_2,
                   NEW_TD_CURR_CODE, NEW_TD_DOC_AMT, NEW_TD_FC_AMT,
                   NEW_TD_DOC_DRCR_FLAG, NEW_TD_DOC_REF, P_DOC_REF_DT,
                   NEW_TD_OTH_REF, NEW_TD_DOC_AMT, NEW_TD_FC_AMT, NULL,
                   NEW_TD_CR_UID, NEW_TD_CR_DT);
           END IF;
           CLOSE F_OS_DET;
        END IF;
   END IF;
   CLOSE SEL_MAIN;
END;
PROCEDURE UPDATE_CUR_OS_CODES IS
BEGIN
     UPDATE FT_OS
     SET    OST_DIVN_CODE   = NEW_TD_DIVN_CODE,
            OST_DEPT_CODE   = NEW_TD_DEPT_CODE,
            OST_ANLY_CODE_1 = NEW_TD_ANLY_CODE_1,
            OST_ANLY_CODE_2 = NEW_TD_ANLY_CODE_2,
            OST_ACTY_CODE_1 = NEW_TD_ACTY_VALUE_CODE_1,
            OST_ACTY_CODE_2 = NEW_TD_ACTY_VALUE_CODE_2,
            OST_DOC_REF     = NEW_TD_DOC_REF,
            OST_OTH_REF     = NEW_TD_OTH_REF,
            OST_DUE_DT      = NEW_TD_DOC_DUE_DT
     WHERE  (OST_COMP_CODE = OLD_TD_COMP_CODE)
     AND    (OST_ACNT_YEAR = OLD_TD_ACNT_YEAR)
     AND    (OST_TRAN_CODE = OLD_TD_TRAN_CODE)
     AND    (OST_DOC_NO    = OLD_TD_DOC_NO)
     AND    (OST_SEQ_NO    = OLD_TD_SEQ_NO);
END;
PROCEDURE INCREASE_ACNT_BAL IS
BEGIN
   F_UPD_ACNT_BAL (NEW_TD_COMP_CODE, P_ACNT_YEAR,
                   NEW_TD_MAIN_ACNT_CODE, NEW_TD_SUB_ACNT_CODE,
                   NEW_TD_DIVN_CODE, NEW_TD_DEPT_CODE,
                   NEW_TD_ANLY_CODE_1, NEW_TD_ANLY_CODE_2,
                   P_CAL_YEAR, P_CAL_MONTH, NEW_TD_CURR_CODE,
                   NEW_TD_DOC_AMT, NEW_TD_FC_AMT, NEW_TD_DOC_DRCR_FLAG,
                   'P', 'A', NEW_TD_CR_UID, P_ERR_NO);
   IF P_ERR_NO != 0 THEN
      RAISE_APPLICATION_ERROR(-20500 - P_ERR_NO, 'Error at balance updation');
   END IF;
END;
BEGIN
/* Main procedure */
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
    P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(NEW_TD_COMP_CODE);
ELSE
    P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(OLD_TD_COMP_CODE);
END IF;
P_ERR_NO := 0;
IF TRG_MODE = 'U' THEN
   NEW_TD_ACNT_YEAR := OLD_TD_ACNT_YEAR;
END IF;
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
    P_COMP_CODE := NEW_TD_COMP_CODE;
    P_TRAN_CODE := NEW_TD_TRAN_CODE;
    P_ACNT_YEAR := NEW_TD_ACNT_YEAR;
    P_DOC_NO := NEW_TD_DOC_NO;
ELSE
    P_COMP_CODE := OLD_TD_COMP_CODE;
    P_TRAN_CODE := OLD_TD_TRAN_CODE;
    P_ACNT_YEAR := OLD_TD_ACNT_YEAR;
    P_DOC_NO := OLD_TD_DOC_NO;
END IF;
P_DBTI_KEY_FIELD := P_COMP_CODE ||
                    TO_CHAR(P_ACNT_YEAR) ||
                    P_TRAN_CODE ||
                    TO_CHAR(P_DOC_NO);
IF SEL_TH_INFO%ISOPEN THEN
    CLOSE SEL_TH_INFO;
END IF;
OPEN SEL_TH_INFO;
FETCH SEL_TH_INFO INTO P_DOC_DT, P_CAL_MONTH, P_CAL_YEAR,
                    P_DOC_DUE_DT, P_DOC_REF_DT,
                    P_PHS_KEY_NO, P_CR_UID, P_CR_DT ;
IF SEL_TH_INFO%NOTFOUND THEN
     IF SEL_TH%ISOPEN THEN
         CLOSE SEL_TH;
     END IF;
     OPEN SEL_TH;
     FETCH SEL_TH INTO P_DOC_DT, P_CAL_MONTH, P_CAL_YEAR,
                         P_DOC_DUE_DT, P_DOC_REF_DT,
                         P_PHS_KEY_NO, P_CR_UID, P_CR_DT ;
     IF SEL_TH%NOTFOUND THEN
          RAISE_APPLICATION_ERROR(-20117,'Header not found');
     END IF;
     CLOSE SEL_TH;
ELSE
     /* Used for verification in DB triggers corresponding to
        FT_UNPOSTED_OS and FT_OS tables */
     IF TRG_MODE = 'I' OR TRG_MODE = 'U'  THEN
          UPDATE FP_DBTRG_INTERFACE
          SET    DBTI_VALUE_6 = TO_CHAR(NEW_TD_SEQ_NO),
                 DBTI_VALUE_7 = NEW_TD_MAIN_ACNT_CODE,
                 DBTI_VALUE_8 = NEW_TD_SUB_ACNT_CODE
          WHERE  DBTI_KEY_FIELD = P_DBTI_KEY_FIELD;
     ELSE
          UPDATE FP_DBTRG_INTERFACE
          SET    DBTI_VALUE_6 = TO_CHAR(OLD_TD_SEQ_NO),
                 DBTI_VALUE_7 = OLD_TD_MAIN_ACNT_CODE,
                 DBTI_VALUE_8 = OLD_TD_SUB_ACNT_CODE
          WHERE  DBTI_KEY_FIELD = P_DBTI_KEY_FIELD;
     END IF;
END IF;
CLOSE SEL_TH_INFO;
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
     IF NEW_TD_DOC_DUE_DT IS NULL THEN
        NEW_TD_DOC_DUE_DT := P_DOC_DUE_DT;
     END IF;
END IF;
IF TRG_MODE = 'I' THEN
   VALIDATE_CODE_COMBN;
   INCREASE_ACNT_BAL;
   INSERT_CUR_OS;
/* Below are added by Selva on 18/03/95 for Audit trail */
   IF P_PHS_KEY_NO IS NOT NULL THEN
      P_BAL_AMT := 0 ;
      IF NEW_TD_DOC_DRCR_FLAG = 'D' THEN
         P_TRAN_AMT := NEW_TD_DOC_AMT ;
      ELSE
         P_TRAN_AMT := NEW_TD_DOC_AMT * - 1;
      END IF;
      F_GET_LC_BAL (NEW_TD_COMP_CODE       ,
                    NEW_TD_ACNT_YEAR       ,
                    NEW_TD_MAIN_ACNT_CODE  ,
                    NEW_TD_SUB_ACNT_CODE   ,
                    NEW_TD_DIVN_CODE       ,
                    NEW_TD_DEPT_CODE       ,
                    NEW_TD_ANLY_CODE_1     ,
                    NEW_TD_ANLY_CODE_2     ,
                    P_CAL_YEAR             ,
                    P_CAL_MONTH            ,
                    P_BAL_AMT              ,
                    P_ERR_NO);
      IF SEQ_NO%ISOPEN THEN
         CLOSE SEQ_NO ;
      END IF ;
      OPEN SEQ_NO ;
      FETCH SEQ_NO INTO P_PDS_SEQ_NO ;
      IF SEQ_NO%NOTFOUND THEN
         P_PDS_SEQ_NO := 1 ;
      ELSE
         P_PDS_SEQ_NO := NVL(P_PDS_SEQ_NO,0) + 1 ;
      END IF ;
      INSERT INTO FS_PROC_DETAIL
             (PDS_KEY_NO, PDS_SEQ_NO, PDS_COMP_CODE, PDS_CAL_MONTH,
              PDS_CAL_YEAR, PDS_MAIN_ACNT_CODE, PDS_SUB_ACNT_CODE,
              PDS_DIVN_CODE, PDS_DEPT_CODE, PDS_HEAD_NO_1, PDS_ANLY_CODE_1,
              PDS_HEAD_NO_2, PDS_ANLY_CODE_2, PDS_BEFORE_BAL_AMT,
              PDS_AFTER_BAL_AMT, PDS_PROC_UID, PDS_PROC_DT, PDS_PROC_STATUS,
              PDS_CR_UID, PDS_CR_DT)
      VALUES (P_PHS_KEY_NO, P_PDS_SEQ_NO, NEW_TD_COMP_CODE, P_CAL_MONTH,
              P_CAL_YEAR, NEW_TD_MAIN_ACNT_CODE, NEW_TD_SUB_ACNT_CODE,
              NEW_TD_DIVN_CODE, NEW_TD_DEPT_CODE, 1, NEW_TD_ANLY_CODE_1,
              2, NEW_TD_ANLY_CODE_2, P_BAL_AMT - P_TRAN_AMT, P_BAL_AMT,
              P_CR_UID, SYSDATE, 'S', P_CR_UID, P_CR_DT) ;
   END IF ;
/* Above are added by Selva on 18/03/95 */
END IF;
IF TRG_MODE = 'U' THEN
   IF (OLD_TD_COMP_CODE != NEW_TD_COMP_CODE) OR
      (OLD_TD_TRAN_CODE != NEW_TD_TRAN_CODE) OR
      (OLD_TD_DOC_NO != NEW_TD_DOC_NO) OR
      (OLD_TD_SEQ_NO != NEW_TD_SEQ_NO) THEN
      RAISE_APPLICATION_ERROR(-20018, 'Primary key change');
   END IF;
   IF     (OLD_TD_MAIN_ACNT_CODE != NEW_TD_MAIN_ACNT_CODE) OR
          (NVL(OLD_TD_SUB_ACNT_CODE,'ZZZZZZZ') !=
           NVL(NEW_TD_SUB_ACNT_CODE,'ZZZZZZZ')) OR
          (NVL(OLD_TD_DOC_DRCR_FLAG,'ZZ') !=
           NVL(NEW_TD_DOC_DRCR_FLAG,'ZZ')) OR
          (NVL(OLD_TD_CURR_CODE,'ZZZZ') !=
           NVL(NEW_TD_CURR_CODE,'ZZZZ')) THEN
          RAISE_APPLICATION_ERROR(-20019, 'Significant codes change');
    ELSE
            IF  (NVL(OLD_TD_DIVN_CODE,'ZZZZZZZ') !=
                 NVL(NEW_TD_DIVN_CODE,'ZZZZZZZ')) OR
                (NVL(OLD_TD_DEPT_CODE,'ZZZZZZZ') !=
                 NVL(NEW_TD_DEPT_CODE,'ZZZZZZZ')) OR
                (NVL(OLD_TD_ANLY_CODE_1,'ZZZZZZZ') !=
                 NVL(NEW_TD_ANLY_CODE_1,'ZZZZZZZ')) OR
                (NVL(OLD_TD_ANLY_CODE_2,'ZZZZZZZ') !=
                 NVL(NEW_TD_ANLY_CODE_2,'ZZZZZZZ')) THEN
                    RAISE_APPLICATION_ERROR
                   (-20020, 'Significant codes change');
                    IF (NVL(OLD_TD_DOC_AMT,0) != NVL(NEW_TD_DOC_AMT,0)) OR
                       (NVL(OLD_TD_FC_AMT,0) != NVL(NEW_TD_FC_AMT,0))
                    THEN
                       RAISE_APPLICATION_ERROR(-20021, 'Amount change');
                    END IF;
            ELSE
                    IF (NVL(OLD_TD_DOC_DUE_DT,TO_DATE('01-JAN-1900','DD-MON-YYYY')) !=
                        NVL(NEW_TD_DOC_DUE_DT,TO_DATE('01-JAN-1900','DD-MON-YYYY'))) OR
                       (NVL(OLD_TD_DOC_REF,' ') !=
                        NVL(NEW_TD_DOC_REF,' ')) OR
                       (NVL(OLD_TD_OTH_REF,' ') !=
                        NVL(NEW_TD_OTH_REF,' ')) OR
                       (NVL(OLD_TD_ACTY_VALUE_CODE_1,'ZZZZZZZ') !=
                        NVL(NEW_TD_ACTY_VALUE_CODE_1,'ZZZZZZZ')) OR
                       (NVL(OLD_TD_ACTY_VALUE_CODE_2,'ZZZZZZZ') !=
                        NVL(NEW_TD_ACTY_VALUE_CODE_2,'ZZZZZZZ')) THEN
                           VALIDATE_CODE_COMBN;
                           UPDATE_CUR_OS_CODES;
                    END IF;
                    IF (NVL(OLD_TD_DOC_AMT,0) != NVL(NEW_TD_DOC_AMT,0)) OR
                       (NVL(OLD_TD_FC_AMT,0) != NVL(NEW_TD_FC_AMT,0))
                    THEN
                       RAISE_APPLICATION_ERROR(-20022, 'Amount change');
                    END IF;
            END IF;
    END IF;
END IF;
IF TRG_MODE = 'D' THEN
     RAISE_APPLICATION_ERROR(-20023, 'Cannot delete record');
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FT_CUR_TRANS_HEADER (
 OLD_TH_COMP_CODE          IN      VARCHAR2,
 OLD_TH_ACNT_YEAR          IN      NUMBER,
 OLD_TH_TRAN_CODE          IN      VARCHAR2,
 OLD_TH_DOC_NO             IN      NUMBER,
 OLD_TH_DOC_DT             IN      DATE,
 OLD_TH_DOC_CAL_YEAR       IN      NUMBER,
 OLD_TH_DOC_CAL_MONTH      IN      NUMBER,
 OLD_TH_DOC_REF            IN      VARCHAR2,
 OLD_TH_DOC_REF_DT         IN      DATE,
 OLD_TH_DOC_DUE_DT         IN      DATE,
 OLD_TH_DIVN_CODE          IN      VARCHAR2,
 OLD_TH_DEPT_CODE          IN      VARCHAR2,
 OLD_TH_CTL_TOTAL          IN      NUMBER,
 OLD_TH_DESC               IN      VARCHAR2,
 OLD_TH_ANNOTATION         IN      VARCHAR2,
 OLD_TH_CR_UID             IN      VARCHAR2,
 OLD_TH_CR_DT              IN      DATE,
 NEW_TH_COMP_CODE          IN OUT  VARCHAR2,
 NEW_TH_ACNT_YEAR          IN OUT  NUMBER,
 NEW_TH_TRAN_CODE          IN OUT  VARCHAR2,
 NEW_TH_DOC_NO             IN OUT  NUMBER,
 NEW_TH_DOC_DT             IN OUT  DATE,
 NEW_TH_DOC_CAL_YEAR       IN OUT  NUMBER,
 NEW_TH_DOC_CAL_MONTH      IN OUT  NUMBER,
 NEW_TH_DOC_REF            IN OUT  VARCHAR2,
 NEW_TH_DOC_REF_DT         IN OUT  DATE,
 NEW_TH_DOC_DUE_DT         IN OUT  DATE,
 NEW_TH_DIVN_CODE          IN OUT  VARCHAR2,
 NEW_TH_DEPT_CODE          IN OUT  VARCHAR2,
 NEW_TH_CTL_TOTAL          IN OUT  NUMBER,
 NEW_TH_DESC               IN OUT  VARCHAR2,
 NEW_TH_ANNOTATION         IN OUT  VARCHAR2,
 NEW_TH_CR_UID             IN OUT  VARCHAR2,
 NEW_TH_CR_DT              IN OUT  DATE,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2) AS
P_ERR_NO            NUMBER(6);
P_CAL_MONTH         NUMBER(2);
P_CAL_YEAR          NUMBER(4);
P_ACNT_YEAR         NUMBER(2);
P_CUR_ACNT_YEAR     NUMBER(2);
P_DBTI_KEY_FIELD    VARCHAR2(30);
PROCEDURE SETUP_DBTRG_INTERFACE IS
BEGIN
          IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
              P_DBTI_KEY_FIELD := OLD_TH_COMP_CODE ||
                                  TO_CHAR(OLD_TH_ACNT_YEAR) ||
                                  OLD_TH_TRAN_CODE ||
                                  TO_CHAR(OLD_TH_DOC_NO) ;
          ELSE
              P_DBTI_KEY_FIELD := NEW_TH_COMP_CODE ||
                                  TO_CHAR(NEW_TH_ACNT_YEAR) ||
                                  NEW_TH_TRAN_CODE ||
                                  TO_CHAR(NEW_TH_DOC_NO) ;
          END IF;
          DELETE FROM FP_DBTRG_INTERFACE
          WHERE  DBTI_KEY_FIELD = P_DBTI_KEY_FIELD;
          IF TRG_MODE = 'D' THEN
              INSERT INTO FP_DBTRG_INTERFACE
                     (DBTI_KEY_FIELD, DBTI_VALUE_1, DBTI_VALUE_2,
                      DBTI_VALUE_3, DBTI_VALUE_4, DBTI_VALUE_5)
              VALUES (P_DBTI_KEY_FIELD, TO_CHAR(OLD_TH_DOC_DT,'DD-MON-YYYY'),
                      TO_CHAR(OLD_TH_DOC_CAL_MONTH),
                      TO_CHAR(OLD_TH_DOC_CAL_YEAR),
                      TO_CHAR(OLD_TH_DOC_DUE_DT,'DD-MON-YYYY'),
                      TO_CHAR(OLD_TH_DOC_REF_DT,'DD-MON-YYYY'));
          ELSE
              INSERT INTO FP_DBTRG_INTERFACE
                     (DBTI_KEY_FIELD, DBTI_VALUE_1, DBTI_VALUE_2,
                      DBTI_VALUE_3, DBTI_VALUE_4, DBTI_VALUE_5,
                      DBTI_VALUE_10, DBTI_VALUE_11, DBTI_VALUE_12)
              VALUES (P_DBTI_KEY_FIELD, TO_CHAR(NEW_TH_DOC_DT,'DD-MON-YYYY'),
                      TO_CHAR(NEW_TH_DOC_CAL_MONTH),
                      TO_CHAR(NEW_TH_DOC_CAL_YEAR),
                      TO_CHAR(NEW_TH_DOC_DUE_DT,'DD-MON-YYYY'),
                      TO_CHAR(NEW_TH_DOC_REF_DT,'DD-MON-YYYY'),
                      TO_CHAR(NEW_TH_CTL_TOTAL),
                      NEW_TH_CR_UID,
                      TO_CHAR(NEW_TH_CR_DT,'DD-MON-YYYY'));
          END IF;
END;
PROCEDURE VALIDATE_NARRATION IS
BEGIN
    /* Validate the data type of various components of the Narration, if
        Structuring of the narration is used. */
    IF NVL(OLD_TH_DESC,' ') != NVL(NEW_TH_DESC,' ') THEN
        F_VAL_NARRATION(NEW_TH_TRAN_CODE, NEW_TH_DESC, P_ERR_NO);
        IF P_ERR_NO != 0 THEN
            RAISE_APPLICATION_ERROR(-20012, 'Invalid Narration');
        END IF;
    END IF;
END;
BEGIN
DBMS_OUTPUT.PUT_LINE('3' || TRG_MODE) ;
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
    P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(NEW_TH_COMP_CODE);
ELSE
    P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(OLD_TH_COMP_CODE);
END IF;
P_ERR_NO := 0;
IF TRG_MODE = 'I' THEN
    /* Initialise User id. and Date */
    IF NEW_TH_CR_UID IS NULL THEN
         NEW_TH_CR_UID := NVL(NEW_TH_CR_UID,'UNDEF');
    END IF;
    NEW_TH_CR_DT := SYSDATE;
    /* Validate if the document period corresponding to the document date
        is open. */
    F_VAL_OPCL(NEW_TH_COMP_CODE, NEW_TH_DOC_DT, P_ERR_NO,
               P_CAL_YEAR, P_CAL_MONTH, P_ACNT_YEAR);
    IF P_ERR_NO != 0 THEN
         RAISE_APPLICATION_ERROR(-20500 - P_ERR_NO, 'Period not open');
    END IF;
    NEW_TH_ACNT_YEAR := P_ACNT_YEAR;
    NEW_TH_DOC_CAL_MONTH := P_CAL_MONTH;
    NEW_TH_DOC_CAL_YEAR  := P_CAL_YEAR;
     VALIDATE_NARRATION;
     /* Transfer records from UNPOSTED tables to Permanent tables */
     SETUP_DBTRG_INTERFACE;
     IF P_ACNT_YEAR = P_CUR_ACNT_YEAR THEN
        INSERT INTO FT_CUR_TRANS_DETAIL
        SELECT *
        FROM   FT_UNPOSTED_TRANS_DETAIL
        WHERE  (TD_COMP_CODE = NEW_TH_COMP_CODE)
        AND    (TD_ACNT_YEAR = NEW_TH_ACNT_YEAR)
        AND    (TD_TRAN_CODE = NEW_TH_TRAN_CODE)
        AND    (TD_DOC_NO    = NEW_TH_DOC_NO);
    ELSE
        INSERT INTO FT_PRV_TRANS_DETAIL
        SELECT *
        FROM   FT_UNPOSTED_TRANS_DETAIL
        WHERE  (TD_COMP_CODE = NEW_TH_COMP_CODE)
        AND    (TD_ACNT_YEAR = NEW_TH_ACNT_YEAR)
        AND    (TD_TRAN_CODE    = NEW_TH_TRAN_CODE)
        AND    (TD_DOC_NO    = NEW_TH_DOC_NO);
    END IF;
END IF;
IF TRG_MODE = 'U' THEN
    /* Initialise User id. and Date */
    IF NEW_TH_CR_UID IS NULL THEN
         NEW_TH_CR_UID := NVL(OLD_TH_CR_UID,'UNDEF');
    END IF;
    NEW_TH_CR_DT := SYSDATE;
    IF OLD_TH_COMP_CODE != NEW_TH_COMP_CODE OR
       OLD_TH_TRAN_CODE != NEW_TH_TRAN_CODE OR
       OLD_TH_DOC_NO != NEW_TH_DOC_NO OR
       OLD_TH_ACNT_YEAR != NEW_TH_ACNT_YEAR THEN
       RAISE_APPLICATION_ERROR(-20013, 'Primary key change');
    END IF;
    IF OLD_TH_DOC_NO != NEW_TH_DOC_NO OR
       OLD_TH_DOC_DT != NEW_TH_DOC_DT  OR
       NVL(OLD_TH_DOC_DUE_DT,TO_DATE('01-JAN-1900','DD-MON-YYYY')) !=
       NVL(NEW_TH_DOC_DUE_DT,TO_DATE('01-JAN-1900','DD-MON-YYYY')) THEN
            RAISE_APPLICATION_ERROR
                  (-20014, 'Cannot update Document number or date');
    END IF;
    VALIDATE_NARRATION;
END IF;
IF TRG_MODE = 'D' THEN
RAISE_APPLICATION_ERROR(-20015, 'Cannot Delete record');
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FT_OS (
 OLD_OST_KEY_NO            IN      NUMBER,
 OLD_OST_COMP_CODE         IN      VARCHAR2,
 OLD_OST_TRAN_CODE         IN      VARCHAR2,
 OLD_OST_DOC_NO            IN      NUMBER,
 OLD_OST_SEQ_NO            IN      NUMBER,
 OLD_OST_ACNT_YEAR         IN      NUMBER,
 OLD_OST_DOC_DT            IN      DATE,
 OLD_OST_DOC_CAL_YEAR      IN      NUMBER,
 OLD_OST_DOC_CAL_MONTH     IN      NUMBER,
 OLD_OST_DUE_DT            IN      DATE,
 OLD_OST_MAIN_ACNT_CODE    IN      VARCHAR2,
 OLD_OST_SUB_ACNT_CODE     IN      VARCHAR2,
 OLD_OST_DIVN_CODE         IN      VARCHAR2,
 OLD_OST_DEPT_CODE         IN      VARCHAR2,
 OLD_OST_HEAD_NO_1         IN      NUMBER,
 OLD_OST_ANLY_CODE_1       IN      VARCHAR2,
 OLD_OST_HEAD_NO_2         IN      NUMBER,
 OLD_OST_ANLY_CODE_2       IN      VARCHAR2,
 OLD_OST_ACTY_CODE_1       IN      VARCHAR2,
 OLD_OST_ACTY_CODE_2       IN      VARCHAR2,
 OLD_OST_CURR_CODE         IN      VARCHAR2,
 OLD_OST_LC_AMT            IN      NUMBER,
 OLD_OST_FC_AMT            IN      NUMBER,
 OLD_OST_DRCR_FLAG         IN      VARCHAR2,
 OLD_OST_DOC_REF           IN      VARCHAR2,
 OLD_OST_DOC_REF_DT        IN      DATE,
 OLD_OST_OTH_REF           IN      VARCHAR2,
 OLD_OST_LC_ADJ_AMT        IN      NUMBER,
 OLD_OST_FC_ADJ_AMT        IN      NUMBER,
 OLD_OST_LC_PDC_AMT        IN      NUMBER,
 OLD_OST_FC_PDC_AMT        IN      NUMBER,
 OLD_OST_LC_UNP_AMT        IN      NUMBER,
 OLD_OST_FC_UNP_AMT        IN      NUMBER,
 OLD_OST_LC_UNDEP_AMT      IN      NUMBER,
 OLD_OST_FC_UNDEP_AMT      IN      NUMBER,
 OLD_OST_LC_ORG_AMT        IN      NUMBER,
 OLD_OST_FC_ORG_AMT        IN      NUMBER,
 OLD_OST_REF_KEY_NO        IN      NUMBER,
 OLD_OST_REF_COMP_CODE     IN      VARCHAR2,
 OLD_OST_REF_ACNT_YEAR     IN      NUMBER,
 OLD_OST_REF_TRAN_CODE     IN      VARCHAR2,
 OLD_OST_REF_SEQ_NO        IN      NUMBER,
 OLD_OST_REF_DOC_NO        IN      NUMBER,
 OLD_OST_REF_DOC_DT        IN      DATE,
 OLD_OST_REF_DOC_CAL_YEAR  IN      NUMBER,
 OLD_OST_REF_DOC_CAL_MONTH IN      NUMBER,
 OLD_OST_REF_DUE_DT        IN      DATE,
 OLD_OST_LAST_MATCH_DT     IN      DATE,
 OLD_OST_TYPE              IN      VARCHAR2,
 OLD_OST_CR_UID            IN      VARCHAR2,
 OLD_OST_CR_DT             IN      DATE,
 NEW_OST_KEY_NO            IN OUT  NUMBER,
 NEW_OST_COMP_CODE         IN OUT  VARCHAR2,
 NEW_OST_TRAN_CODE         IN OUT  VARCHAR2,
 NEW_OST_DOC_NO            IN OUT  NUMBER,
 NEW_OST_SEQ_NO            IN OUT  NUMBER,
 NEW_OST_ACNT_YEAR         IN OUT  NUMBER,
 NEW_OST_DOC_DT            IN OUT  DATE,
 NEW_OST_DOC_CAL_YEAR      IN OUT  NUMBER,
 NEW_OST_DOC_CAL_MONTH     IN OUT  NUMBER,
 NEW_OST_DUE_DT            IN OUT  DATE,
 NEW_OST_MAIN_ACNT_CODE    IN OUT  VARCHAR2,
 NEW_OST_SUB_ACNT_CODE     IN OUT  VARCHAR2,
 NEW_OST_DIVN_CODE         IN OUT  VARCHAR2,
 NEW_OST_DEPT_CODE         IN OUT  VARCHAR2,
 NEW_OST_HEAD_NO_1         IN OUT  NUMBER,
 NEW_OST_ANLY_CODE_1       IN OUT  VARCHAR2,
 NEW_OST_HEAD_NO_2         IN OUT  NUMBER,
 NEW_OST_ANLY_CODE_2       IN OUT  VARCHAR2,
 NEW_OST_ACTY_CODE_1       IN OUT  VARCHAR2,
 NEW_OST_ACTY_CODE_2       IN OUT  VARCHAR2,
 NEW_OST_CURR_CODE         IN OUT  VARCHAR2,
 NEW_OST_LC_AMT            IN OUT  NUMBER,
 NEW_OST_FC_AMT            IN OUT  NUMBER,
 NEW_OST_DRCR_FLAG         IN OUT  VARCHAR2,
 NEW_OST_DOC_REF           IN OUT  VARCHAR2,
 NEW_OST_DOC_REF_DT        IN OUT  DATE,
 NEW_OST_OTH_REF           IN OUT  VARCHAR2,
 NEW_OST_LC_ADJ_AMT        IN OUT  NUMBER,
 NEW_OST_FC_ADJ_AMT        IN OUT  NUMBER,
 NEW_OST_LC_PDC_AMT        IN OUT  NUMBER,
 NEW_OST_FC_PDC_AMT        IN OUT  NUMBER,
 NEW_OST_LC_UNP_AMT        IN OUT  NUMBER,
 NEW_OST_FC_UNP_AMT        IN OUT  NUMBER,
 NEW_OST_LC_UNDEP_AMT      IN OUT  NUMBER,
 NEW_OST_FC_UNDEP_AMT      IN OUT  NUMBER,
 NEW_OST_LC_ORG_AMT        IN OUT  NUMBER,
 NEW_OST_FC_ORG_AMT        IN OUT  NUMBER,
 NEW_OST_REF_KEY_NO        IN OUT  NUMBER,
 NEW_OST_REF_COMP_CODE     IN OUT  VARCHAR2,
 NEW_OST_REF_ACNT_YEAR     IN OUT  NUMBER,
 NEW_OST_REF_TRAN_CODE     IN OUT  VARCHAR2,
 NEW_OST_REF_SEQ_NO        IN OUT  NUMBER,
 NEW_OST_REF_DOC_NO        IN OUT  NUMBER,
 NEW_OST_REF_DOC_DT        IN OUT  DATE,
 NEW_OST_REF_DOC_CAL_YEAR  IN OUT  NUMBER,
 NEW_OST_REF_DOC_CAL_MONTH IN OUT  NUMBER,
 NEW_OST_REF_DUE_DT        IN OUT  DATE,
 NEW_OST_LAST_MATCH_DT     IN OUT  DATE,
 NEW_OST_TYPE              IN OUT  VARCHAR2,
 NEW_OST_CR_UID            IN OUT  VARCHAR2,
 NEW_OST_CR_DT             IN OUT  DATE,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2) AS
P_COMP_CODE         VARCHAR2(3);
P_ACNT_YEAR         NUMBER(2);
P_TRAN_CODE         VARCHAR2(3);
P_DOC_NO            NUMBER(6);
P_SEQ_NO            NUMBER(3);
P_MAIN_ACNT_CODE    VARCHAR2(6);
P_SUB_ACNT_CODE     VARCHAR2(6);
P_CUR_ACNT_YEAR     NUMBER(2);
P_DBTI_KEY_FIELD    VARCHAR2(30);
P_DUMMY             VARCHAR2(1);
CURSOR SEL_TD_INFO IS
SELECT 'X'
FROM   FP_DBTRG_INTERFACE
WHERE  DBTI_KEY_FIELD = P_DBTI_KEY_FIELD;
CURSOR SEL_CUR_TD IS
SELECT 'X'
FROM   FT_CUR_TRANS_DETAIL
WHERE  (TD_COMP_CODE = P_COMP_CODE)
AND    (TD_TRAN_CODE = P_TRAN_CODE)
AND    (TD_DOC_NO    = P_DOC_NO)
AND    (TD_ACNT_YEAR = P_ACNT_YEAR)
AND    (TD_SEQ_NO = P_SEQ_NO)
AND    (TD_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE)
AND    (TD_SUB_ACNT_CODE = P_SUB_ACNT_CODE);
CURSOR SEL_PRV_TD IS
SELECT 'X'
FROM   FT_PRV_TRANS_DETAIL
WHERE  (TD_COMP_CODE = P_COMP_CODE)
AND    (TD_TRAN_CODE = P_TRAN_CODE)
AND    (TD_DOC_NO    = P_DOC_NO)
AND    (TD_ACNT_YEAR = P_ACNT_YEAR)
AND    (TD_SEQ_NO = P_SEQ_NO)
AND    (TD_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE)
AND    (TD_SUB_ACNT_CODE = P_SUB_ACNT_CODE);
PROCEDURE CHECK_TRANS_DETAIL IS
BEGIN
     P_COMP_CODE      := NEW_OST_COMP_CODE;
     P_TRAN_CODE      := NEW_OST_TRAN_CODE;
     P_DOC_NO         := NEW_OST_DOC_NO;
     P_SEQ_NO         := NEW_OST_SEQ_NO;
     P_ACNT_YEAR      := NEW_OST_ACNT_YEAR;
     P_MAIN_ACNT_CODE := NEW_OST_MAIN_ACNT_CODE;
     P_SUB_ACNT_CODE  := NEW_OST_SUB_ACNT_CODE;
     P_DBTI_KEY_FIELD := P_COMP_CODE ||
                         TO_CHAR(P_ACNT_YEAR) ||
                         P_TRAN_CODE ||
                         TO_CHAR(P_DOC_NO);
     IF SEL_TD_INFO%ISOPEN THEN
         CLOSE SEL_TD_INFO;
     END IF;
     OPEN SEL_TD_INFO;
     FETCH SEL_TD_INFO INTO P_DUMMY;
     IF SEL_TD_INFO%NOTFOUND THEN
          IF P_ACNT_YEAR = P_CUR_ACNT_YEAR THEN
              IF SEL_CUR_TD%ISOPEN THEN
                  CLOSE SEL_CUR_TD;
              END IF;
              OPEN SEL_CUR_TD;
              FETCH SEL_CUR_TD INTO P_DUMMY;
              IF SEL_CUR_TD%NOTFOUND THEN
                   RAISE_APPLICATION_ERROR
                           (-20033,'Transaction detail not found');
              END IF;
              CLOSE SEL_CUR_TD;
          ELSE
              IF SEL_PRV_TD%ISOPEN THEN
                  CLOSE SEL_PRV_TD;
              END IF;
              OPEN SEL_PRV_TD;
              FETCH SEL_PRV_TD INTO P_DUMMY;
              IF SEL_PRV_TD%NOTFOUND THEN
                   RAISE_APPLICATION_ERROR
                         (-20034,'Transaction detail not found');
              END IF;
              CLOSE SEL_PRV_TD;
          END IF;
     END IF;
     CLOSE SEL_TD_INFO;
END;
PROCEDURE INSERT_TEMP_OS IS
BEGIN
       /* Create record in Temporary table with Doc Type as I */
       INSERT INTO FW_TEMP_OS VALUES
        (NEW_OST_KEY_NO, NEW_OST_COMP_CODE, NEW_OST_TRAN_CODE,
         NEW_OST_DOC_NO, NEW_OST_SEQ_NO, NEW_OST_ACNT_YEAR,
         NEW_OST_DOC_DT, NEW_OST_DOC_CAL_YEAR,
         NEW_OST_DOC_CAL_MONTH, NEW_OST_DUE_DT,
         NEW_OST_MAIN_ACNT_CODE, NEW_OST_SUB_ACNT_CODE,
         NEW_OST_DIVN_CODE, NEW_OST_DEPT_CODE,
         NEW_OST_HEAD_NO_1, NEW_OST_ANLY_CODE_1,
         NEW_OST_HEAD_NO_2, NEW_OST_ANLY_CODE_2,
         NEW_OST_ACTY_CODE_1, NEW_OST_ACTY_CODE_2,
         NEW_OST_CURR_CODE, NEW_OST_LC_AMT,
         NEW_OST_FC_AMT, NEW_OST_DRCR_FLAG,
         NEW_OST_DOC_REF, NEW_OST_DOC_REF_DT,
         NEW_OST_OTH_REF, NEW_OST_LC_ADJ_AMT,
         NEW_OST_FC_ADJ_AMT, NEW_OST_LC_PDC_AMT,
         NEW_OST_FC_PDC_AMT, NEW_OST_LC_UNP_AMT,
         NEW_OST_FC_UNP_AMT, NEW_OST_LC_UNDEP_AMT,
         NEW_OST_FC_UNDEP_AMT, NEW_OST_LC_ORG_AMT,
         NEW_OST_FC_ORG_AMT, NEW_OST_REF_KEY_NO,
         NEW_OST_REF_COMP_CODE, NEW_OST_REF_ACNT_YEAR,
         NEW_OST_REF_TRAN_CODE, NEW_OST_REF_SEQ_NO,
         NEW_OST_REF_DOC_NO, NEW_OST_REF_DOC_DT,
         NEW_OST_REF_DOC_CAL_YEAR, NEW_OST_REF_DOC_CAL_MONTH,
         NEW_OST_REF_DUE_DT, NEW_OST_LAST_MATCH_DT,
         'I', NEW_OST_CR_UID, NEW_OST_CR_DT);
END;
PROCEDURE DELETE_TEMP_OS IS
BEGIN
       /* Create record in Temporary table with Doc Type as D */
       INSERT INTO FW_TEMP_OS VALUES
        (OLD_OST_KEY_NO, OLD_OST_COMP_CODE, OLD_OST_TRAN_CODE,
         OLD_OST_DOC_NO, OLD_OST_SEQ_NO, OLD_OST_ACNT_YEAR,
         OLD_OST_DOC_DT, OLD_OST_DOC_CAL_YEAR,
         OLD_OST_DOC_CAL_MONTH, OLD_OST_DUE_DT,
         OLD_OST_MAIN_ACNT_CODE, OLD_OST_SUB_ACNT_CODE,
         OLD_OST_DIVN_CODE, OLD_OST_DEPT_CODE,
         OLD_OST_HEAD_NO_1, OLD_OST_ANLY_CODE_1,
         OLD_OST_HEAD_NO_2, OLD_OST_ANLY_CODE_2,
         OLD_OST_ACTY_CODE_1, OLD_OST_ACTY_CODE_2,
         OLD_OST_CURR_CODE, OLD_OST_LC_AMT,
         OLD_OST_FC_AMT, OLD_OST_DRCR_FLAG,
         OLD_OST_DOC_REF, OLD_OST_DOC_REF_DT,
         OLD_OST_OTH_REF, OLD_OST_LC_ADJ_AMT,
         OLD_OST_FC_ADJ_AMT, OLD_OST_LC_PDC_AMT,
         OLD_OST_FC_PDC_AMT, OLD_OST_LC_UNP_AMT,
         OLD_OST_FC_UNP_AMT, OLD_OST_LC_UNDEP_AMT,
         OLD_OST_FC_UNDEP_AMT, OLD_OST_LC_ORG_AMT,
         OLD_OST_FC_ORG_AMT, OLD_OST_REF_KEY_NO,
         OLD_OST_REF_COMP_CODE, OLD_OST_REF_ACNT_YEAR,
         OLD_OST_REF_TRAN_CODE, OLD_OST_REF_SEQ_NO,
         OLD_OST_REF_DOC_NO, OLD_OST_REF_DOC_DT,
         OLD_OST_REF_DOC_CAL_YEAR, OLD_OST_REF_DOC_CAL_MONTH,
         OLD_OST_REF_DUE_DT, OLD_OST_LAST_MATCH_DT,
         'D', OLD_OST_CR_UID, OLD_OST_CR_DT);
END;
BEGIN
/* Main Procedure */
/* Skip processing of Internal updates so that there is no
   recursive looping */
/* Internal updates will return a Document Type Z,
   which will be reset to old document type  */
IF (NVL(NEW_OST_ACNT_YEAR,1) = 1 OR
    NVL(OLD_OST_ACNT_YEAR,1) = 1) AND
    NEW_OST_TYPE IS NULL AND
    OLD_OST_TYPE IS NULL AND
    NVL(NEW_OST_LC_ADJ_AMT,0) + NVL(NEW_OST_LC_PDC_AMT,0) +
    NVL(NEW_OST_LC_UNDEP_AMT,0) = 0 THEN
    RETURN ;
END IF ;
IF TRG_MODE = 'U' THEN
   IF NVL(NEW_OST_TYPE,'X') = 'Z' THEN
      NEW_OST_TYPE := OLD_OST_TYPE;
      RETURN;
   END IF;
END IF;
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
    P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(NEW_OST_COMP_CODE);
ELSE
    P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(OLD_OST_COMP_CODE);
END IF;
IF TRG_MODE = 'I' THEN
   CHECK_TRANS_DETAIL;
END IF;
IF TRG_MODE = 'I' THEN
     IF NVL(NEW_OST_TYPE,'R') != 'R' THEN
          RAISE_APPLICATION_ERROR(-20035, 'Invalid Document Type');
     END IF;
     IF NEW_OST_REF_KEY_NO IS NOT NULL THEN
          IF NVL(NEW_OST_TYPE,'X') = 'R' THEN
              IF NEW_OST_KEY_NO = NEW_OST_REF_KEY_NO THEN
                   RAISE_APPLICATION_ERROR
                      (-20036, ' Reference entry can refer to itself ');
              END IF;
              /* Ensure Entries relevant to P type are null */
              NEW_OST_LC_UNP_AMT     := 0;
              NEW_OST_FC_UNP_AMT     := 0;
              NEW_OST_LC_ADJ_AMT     := 0;
              NEW_OST_FC_ADJ_AMT     := 0;
              NEW_OST_LC_PDC_AMT     := 0;
              NEW_OST_FC_PDC_AMT     := 0;
              NEW_OST_LC_UNDEP_AMT   := 0;
              NEW_OST_FC_UNDEP_AMT   := 0;
              INSERT_TEMP_OS;
          ELSE
              RAISE_APPLICATION_ERROR
                 (-20037,'Invalid Doc Type or Cannot insert a Parent entry');
          END IF;
     ELSE
          IF NEW_OST_TYPE IS NOT NULL THEN
              RAISE_APPLICATION_ERROR
                      (-20038,'Inconsistent Ref key and Doc Type');
          ELSE
              /* Make sure all reference information is consistent with key */
              NEW_OST_REF_COMP_CODE     := NULL;
              NEW_OST_REF_ACNT_YEAR     := NULL;
              NEW_OST_REF_TRAN_CODE     := NULL;
              NEW_OST_REF_SEQ_NO        := NULL;
              NEW_OST_REF_DOC_NO        := NULL;
              NEW_OST_REF_DOC_DT        := NULL;
              NEW_OST_REF_DOC_CAL_YEAR  := NULL;
              NEW_OST_REF_DOC_CAL_MONTH := NULL;
              NEW_OST_REF_DUE_DT        := NULL;
              /* Ensure Entries relevant to P type are null */
              NEW_OST_LC_UNP_AMT     := 0;
              NEW_OST_FC_UNP_AMT     := 0;
              NEW_OST_LC_ADJ_AMT     := 0;
              NEW_OST_FC_ADJ_AMT     := 0;
              NEW_OST_LC_PDC_AMT     := 0;
              NEW_OST_FC_PDC_AMT     := 0;
              NEW_OST_LC_UNDEP_AMT   := 0;
              NEW_OST_FC_UNDEP_AMT   := 0;
          END IF;
     END IF;
END IF;
IF TRG_MODE = 'U' THEN
     IF NEW_OST_TYPE IS NULL THEN
              IF OLD_OST_TYPE = 'R' THEN
                 DELETE_TEMP_OS;
              END IF;
              IF (NVL(NEW_OST_LC_UNP_AMT,0) != 0) OR
                 (NVL(NEW_OST_FC_UNP_AMT,0) != 0) OR
                 (NVL(NEW_OST_LC_ADJ_AMT,0) != 0) OR
                 (NVL(NEW_OST_FC_ADJ_AMT,0) != 0) OR
                 (NVL(NEW_OST_LC_PDC_AMT,0) != 0) OR
                 (NVL(NEW_OST_FC_PDC_AMT,0) != 0) OR
                 (NVL(NEW_OST_LC_UNDEP_AMT,0) != 0) OR
                 (NVL(NEW_OST_FC_UNDEP_AMT,0) != 0) THEN
                 IF (NVL(NEW_OST_LC_AMT,0) = NVL(NEW_OST_LC_ORG_AMT,0)) AND
                    (NVL(NEW_OST_FC_AMT,0) = NVL(NEW_OST_FC_ORG_AMT,0)) THEN
                    NEW_OST_REF_KEY_NO        := NEW_OST_KEY_NO;
                    NEW_OST_REF_COMP_CODE     := NEW_OST_COMP_CODE;
                    NEW_OST_REF_ACNT_YEAR     := NEW_OST_ACNT_YEAR;
                    NEW_OST_REF_TRAN_CODE     := NEW_OST_TRAN_CODE;
                    NEW_OST_REF_SEQ_NO        := NEW_OST_SEQ_NO;
                    NEW_OST_REF_DOC_NO        := NEW_OST_DOC_NO;
                    NEW_OST_REF_DOC_DT        := NEW_OST_DOC_DT;
                    NEW_OST_REF_DOC_CAL_YEAR  := NEW_OST_DOC_CAL_YEAR;
                    NEW_OST_REF_DOC_CAL_MONTH := NEW_OST_DOC_CAL_MONTH;
                    NEW_OST_REF_DUE_DT        := NEW_OST_DUE_DT;
                    NEW_OST_TYPE              := 'P';
                ELSE
                    RAISE_APPLICATION_ERROR
                          (-20039, 'Doesnot qualify as a Parent entry');
                END IF;
             END IF;
     ELSE
         IF NEW_OST_TYPE = 'P' THEN
              IF (NVL(NEW_OST_LC_UNP_AMT,0) != 0) OR
                 (NVL(NEW_OST_FC_UNP_AMT,0) != 0) OR
                 (NVL(NEW_OST_LC_ADJ_AMT,0) != 0) OR
                 (NVL(NEW_OST_FC_ADJ_AMT,0) != 0) OR
                 (NVL(NEW_OST_LC_PDC_AMT,0) != 0) OR
                 (NVL(NEW_OST_FC_PDC_AMT,0) != 0) OR
                 (NVL(NEW_OST_LC_UNDEP_AMT,0) != 0) OR
                 (NVL(NEW_OST_FC_UNDEP_AMT,0) != 0) THEN
                 IF (NVL(NEW_OST_LC_AMT,0) = NVL(NEW_OST_LC_ORG_AMT,0)) AND
                    (NVL(NEW_OST_FC_AMT,0) = NVL(NEW_OST_FC_ORG_AMT,0)) THEN
                    NEW_OST_REF_KEY_NO        := NEW_OST_KEY_NO;
                    NEW_OST_REF_COMP_CODE     := NEW_OST_COMP_CODE;
                    NEW_OST_REF_ACNT_YEAR     := NEW_OST_ACNT_YEAR;
                    NEW_OST_REF_TRAN_CODE     := NEW_OST_TRAN_CODE;
                    NEW_OST_REF_SEQ_NO        := NEW_OST_SEQ_NO;
                    NEW_OST_REF_DOC_NO        := NEW_OST_DOC_NO;
                    NEW_OST_REF_DOC_DT        := NEW_OST_DOC_DT;
                    NEW_OST_REF_DOC_CAL_YEAR  := NEW_OST_DOC_CAL_YEAR;
                    NEW_OST_REF_DOC_CAL_MONTH := NEW_OST_DOC_CAL_MONTH;
                    NEW_OST_REF_DUE_DT        := NEW_OST_DUE_DT;
                ELSE
                    RAISE_APPLICATION_ERROR
                          (-20040, 'Doesnot qualify as a Parent entry');
                END IF;
             ELSE
                 /* Revert this P entry to a Null entry */
                 NEW_OST_TYPE              := NULL;
                 NEW_OST_REF_KEY_NO        := NULL;
                 NEW_OST_REF_COMP_CODE     := NULL;
                 NEW_OST_REF_ACNT_YEAR     := NULL;
                 NEW_OST_REF_TRAN_CODE     := NULL;
                 NEW_OST_REF_SEQ_NO        := NULL;
                 NEW_OST_REF_DOC_NO        := NULL;
                 NEW_OST_REF_DOC_DT        := NULL;
                 NEW_OST_REF_DOC_CAL_YEAR  := NULL;
                 NEW_OST_REF_DOC_CAL_MONTH := NULL;
                 NEW_OST_REF_DUE_DT        := NULL;
             END IF;
         ELSE
         /* If it is a R entry being updated,
                Carry out a Deletion and Re insert */
            DELETE_TEMP_OS;
            INSERT_TEMP_OS;
         END IF;
     END IF;
END IF;
IF TRG_MODE = 'D' THEN
     IF NVL(OLD_OST_TYPE,'R') != 'R' THEN
          RAISE_APPLICATION_ERROR(-20041, 'Invalid Document Type');
     END IF;
     IF OLD_OST_REF_KEY_NO IS NOT NULL THEN
          IF NVL(OLD_OST_TYPE,'X') = 'R' THEN
            DELETE_TEMP_OS;
          ELSE
              RAISE_APPLICATION_ERROR
                 (-20042,'Invalid Type or Cannot delete a Parent entry');
          END IF;
     END IF;
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FT_OS_AFTER AS
P_COPY_DIVN_REF     VARCHAR2(1);
P_COPY_DEPT_REF     VARCHAR2(1);
P_COPY_ANLY_REF_1   VARCHAR2(1);
P_COPY_ANLY_REF_2   VARCHAR2(1);
P_OST_DIVN_CODE     VARCHAR2(6);
P_OST_DEPT_CODE     VARCHAR2(6);
P_OST_ANLY_CODE_1   VARCHAR2(6);
P_OST_ANLY_CODE_2   VARCHAR2(6);
CURSOR SEL_TEMP_OS IS
SELECT *
FROM   FW_TEMP_OS
FOR UPDATE OF OST_KEY_NO;
REC_TEMP_OS     SEL_TEMP_OS%ROWTYPE;
CURSOR SEL_OS IS
  SELECT OST_DIVN_CODE, OST_DEPT_CODE,
         OST_ANLY_CODE_1, OST_ANLY_CODE_2,
         OST_COMP_CODE, OST_ACNT_YEAR,
         OST_TRAN_CODE, OST_SEQ_NO,
         OST_DOC_NO, OST_DOC_DT,
         OST_DOC_CAL_YEAR, OST_DOC_CAL_MONTH,
         OST_DUE_DT, OST_CURR_CODE
  FROM   FT_OS
  WHERE  OST_KEY_NO = REC_TEMP_OS.OST_REF_KEY_NO
  FOR UPDATE OF OST_FC_ADJ_AMT, OST_LC_ADJ_AMT,
                OST_LAST_MATCH_DT;
P_OST_REF_COMP_CODE       VARCHAR2(3);
P_OST_REF_ACNT_YEAR       NUMBER(2);
P_OST_REF_TRAN_CODE       VARCHAR2(3);
P_OST_REF_SEQ_NO          NUMBER(3);
P_OST_REF_DOC_NO          NUMBER(6);
P_OST_REF_DOC_DT          DATE;
P_OST_REF_DOC_CAL_YEAR    NUMBER(4);
P_OST_REF_DOC_CAL_MONTH   NUMBER(2);
P_OST_REF_DUE_DT          DATE;
P_OST_CURR_CODE           VARCHAR2(3);
CURSOR SEL_CPREF IS
SELECT NVL(SUBSTR(PARA_VALUE,1,1),'N'), NVL(SUBSTR(PARA_VALUE,2,1),'N'),
       NVL(SUBSTR(PARA_VALUE,3,1),'N'), NVL(SUBSTR(PARA_VALUE,4,1),'N')
FROM   FP_PARAMETER
WHERE  PARA_ID = 'COPY.OS.REF';
BEGIN
/* Main procedure */
IF SEL_CPREF%ISOPEN THEN
    CLOSE SEL_CPREF;
END IF;
OPEN SEL_CPREF;
FETCH SEL_CPREF INTO P_COPY_DIVN_REF, P_COPY_DEPT_REF,
                       P_COPY_ANLY_REF_1, P_COPY_ANLY_REF_2;
IF SEL_CPREF%NOTFOUND THEN
     P_COPY_DIVN_REF   := 'N';
     P_COPY_DEPT_REF   := 'N';
     P_COPY_ANLY_REF_1 := 'N';
     P_COPY_ANLY_REF_2 := 'N';
END IF;
CLOSE SEL_CPREF;
IF SEL_TEMP_OS%ISOPEN THEN
     CLOSE SEL_TEMP_OS;
END IF;
OPEN SEL_TEMP_OS;
LOOP
FETCH SEL_TEMP_OS INTO REC_TEMP_OS;
EXIT WHEN SEL_TEMP_OS%NOTFOUND;
    IF REC_TEMP_OS.OST_TYPE = 'I' THEN
         IF SEL_OS%ISOPEN THEN
              CLOSE SEL_OS;
         END IF;
         OPEN SEL_OS;
         FETCH SEL_OS INTO P_OST_DIVN_CODE, P_OST_DEPT_CODE,
                      P_OST_ANLY_CODE_1, P_OST_ANLY_CODE_2,
                      P_OST_REF_COMP_CODE, P_OST_REF_ACNT_YEAR,
                      P_OST_REF_TRAN_CODE, P_OST_REF_SEQ_NO,
                      P_OST_REF_DOC_NO, P_OST_REF_DOC_DT,
                      P_OST_REF_DOC_CAL_YEAR, P_OST_REF_DOC_CAL_MONTH,
                      P_OST_REF_DUE_DT, P_OST_CURR_CODE;
         IF SEL_OS%NOTFOUND THEN
              RAISE_APPLICATION_ERROR(-20043,'Invalid OS Reference');
         END IF;
         IF NVL(P_OST_CURR_CODE,'XXXX') !=
            NVL(REC_TEMP_OS.OST_CURR_CODE,'XXXX') THEN
              CLOSE SEL_OS;
              RAISE_APPLICATION_ERROR(-20044,'Currrency mismatch ');
         END IF;
         UPDATE FT_OS
         SET    OST_LC_ADJ_AMT     = NVL(OST_LC_ADJ_AMT,0) +
                                     NVL(REC_TEMP_OS.OST_LC_AMT,0),
                OST_FC_ADJ_AMT     = NVL(OST_FC_ADJ_AMT,0) +
                                     NVL(REC_TEMP_OS.OST_FC_AMT,0),
                OST_LAST_MATCH_DT  =
                    GREATEST(NVL(OST_LAST_MATCH_DT,TO_DATE('01-JAN-1900','DD-MON-YYYY')),
                                         REC_TEMP_OS.OST_DOC_DT)
         WHERE  CURRENT OF SEL_OS;
         UPDATE FT_OS
         SET    OST_REF_COMP_CODE     = P_OST_REF_COMP_CODE,
                OST_REF_ACNT_YEAR     = P_OST_REF_ACNT_YEAR,
                OST_REF_TRAN_CODE     = P_OST_REF_TRAN_CODE,
                OST_REF_DOC_NO        = P_OST_REF_DOC_NO,
                OST_REF_SEQ_NO        = P_OST_REF_SEQ_NO,
                OST_REF_DOC_DT        = P_OST_REF_DOC_DT,
                OST_REF_DOC_CAL_MONTH = P_OST_REF_DOC_CAL_MONTH,
                OST_REF_DOC_CAL_YEAR  = P_OST_REF_DOC_CAL_YEAR,
                OST_REF_DUE_DT        = P_OST_REF_DUE_DT,
                OST_DIVN_CODE         = DECODE(P_COPY_DIVN_REF,
                                          'Y', P_OST_DIVN_CODE,
                                          OST_DIVN_CODE),
                OST_DEPT_CODE         = DECODE(P_COPY_DEPT_REF,
                                          'Y', P_OST_DEPT_CODE,
                                          OST_DEPT_CODE),
                OST_ANLY_CODE_1       = DECODE(P_COPY_ANLY_REF_1,
                                          'Y', P_OST_ANLY_CODE_1,
                                          OST_ANLY_CODE_1),
                OST_ANLY_CODE_2       = DECODE(P_COPY_ANLY_REF_2,
                                          'Y', P_OST_ANLY_CODE_2,
                                          OST_ANLY_CODE_2),
                OST_TYPE              = 'Z'
         WHERE  OST_KEY_NO = REC_TEMP_OS.OST_KEY_NO;
         CLOSE SEL_OS;
    ELSE
         IF SEL_OS%ISOPEN THEN
              CLOSE SEL_OS;
         END IF;
         OPEN SEL_OS;
         FETCH SEL_OS INTO P_OST_DIVN_CODE, P_OST_DEPT_CODE,
                      P_OST_ANLY_CODE_1, P_OST_ANLY_CODE_2,
                      P_OST_REF_COMP_CODE, P_OST_REF_ACNT_YEAR,
                      P_OST_REF_TRAN_CODE, P_OST_REF_SEQ_NO,
                      P_OST_REF_DOC_NO, P_OST_REF_DOC_DT,
                      P_OST_REF_DOC_CAL_YEAR, P_OST_REF_DOC_CAL_MONTH,
                      P_OST_REF_DUE_DT, P_OST_CURR_CODE;
         IF SEL_OS%NOTFOUND THEN
              CLOSE SEL_OS;
              RAISE_APPLICATION_ERROR(-20045,'Invalid OS Reference');
         END IF;
         IF NVL(P_OST_CURR_CODE,'XXXX') !=
            NVL(REC_TEMP_OS.OST_CURR_CODE,'XXXX') THEN
              CLOSE SEL_OS;
              RAISE_APPLICATION_ERROR(-20046,'Currrency mismatch ');
         END IF;
         UPDATE FT_OS
         SET    OST_LC_ADJ_AMT     = NVL(OST_LC_ADJ_AMT,0) -
                                     NVL(REC_TEMP_OS.OST_LC_AMT,0),
                OST_FC_ADJ_AMT     = NVL(OST_FC_ADJ_AMT,0) -
                                     NVL(REC_TEMP_OS.OST_FC_AMT,0),
                OST_LAST_MATCH_DT  =
                     GREATEST(NVL(OST_LAST_MATCH_DT,TO_DATE('01-JAN-1900','DD-MON-YYYY')),
                                         REC_TEMP_OS.OST_DOC_DT)
         WHERE  CURRENT OF SEL_OS;
         CLOSE SEL_OS;
    END IF;
    DELETE FROM FW_TEMP_OS
    WHERE  CURRENT OF SEL_TEMP_OS;
END LOOP;
CLOSE SEL_TEMP_OS;
END;
/
CREATE OR REPLACE PROCEDURE STP_FT_PDC (
 OLD_PDC_COMP_CODE               IN      VARCHAR2,
 OLD_PDC_CHQ_NO                  IN      VARCHAR2,
 OLD_PDC_BANK_ACNT_CODE          IN      VARCHAR2,
 OLD_PDC_BANK_SUB_ACNT_CODE      IN      VARCHAR2,
 OLD_PDC_BANK_DIVN_CODE          IN      VARCHAR2,
 OLD_PDC_BANK_DEPT_CODE          IN      VARCHAR2,
 OLD_PDC_BANK_HEAD_NO_1          IN      NUMBER,
 OLD_PDC_BANK_ANLY_CODE_1        IN      VARCHAR2,
 OLD_PDC_BANK_HEAD_NO_2          IN      NUMBER,
 OLD_PDC_BANK_ANLY_CODE_2        IN      VARCHAR2,
 OLD_PDC_BANK_ACTY_VALUE_CODE_1  IN      VARCHAR2,
 OLD_PDC_BANK_ACTY_VALUE_CODE_2  IN      VARCHAR2,
 OLD_PDC_BANK_CURR_CODE          IN      VARCHAR2,
 OLD_PDC_BANK_FC_AMT             IN      NUMBER,
 OLD_PDC_BANK_NAME               IN      VARCHAR2,
 OLD_PDC_DEPOSIT_BANK            IN      VARCHAR2,
 OLD_PDC_DOC_NO                  IN      NUMBER,
 OLD_PDC_DOC_DT                  IN      DATE,
 OLD_PDC_DOC_CAL_YEAR            IN      NUMBER,
 OLD_PDC_DOC_CAL_MONTH           IN      NUMBER,
 OLD_PDC_DUE_DT                  IN      DATE,
 OLD_PDC_DIVN_CODE               IN      VARCHAR2,
 OLD_PDC_DEPT_CODE               IN      VARCHAR2,
 OLD_PDC_MAIN_ACNT_CODE          IN      VARCHAR2,
 OLD_PDC_SUB_ACNT_CODE           IN      VARCHAR2,
 OLD_PDC_HEAD_NO_1               IN      NUMBER,
 OLD_PDC_ANLY_CODE_1             IN      VARCHAR2,
 OLD_PDC_HEAD_NO_2               IN      NUMBER,
 OLD_PDC_ANLY_CODE_2             IN      VARCHAR2,
 OLD_PDC_ACTY_CODE_1             IN      VARCHAR2,
 OLD_PDC_ACTY_CODE_2             IN      VARCHAR2,
 OLD_PDC_CURR_CODE               IN      VARCHAR2,
 OLD_PDC_FC_AMT                  IN      NUMBER,
 OLD_PDC_LC_AMT                  IN      NUMBER,
 OLD_PDC_NAME                    IN      VARCHAR2,
 OLD_PDC_REF                     IN      VARCHAR2,
 OLD_PDC_STATUS                  IN      VARCHAR2,
 OLD_PDC_TYPE_FLAG               IN      VARCHAR2,
 OLD_PDC_REF_TRAN_CODE           IN      VARCHAR2,
 OLD_PDC_REF_ACNT_YEAR           IN      NUMBER,
 OLD_PDC_REF_DOC_NO              IN      NUMBER,
 OLD_PDC_REF_SEQ_NO              IN      NUMBER,
 OLD_PDC_REF_DOC_DT              IN      DATE,
 OLD_PDC_CDISC_TRAN_CODE         IN      VARCHAR2,
 OLD_PDC_CDISC_DOC_NO            IN      NUMBER,
 OLD_PDC_FC_CDISC_AMT            IN      NUMBER,
 OLD_PDC_LC_CDISC_AMT            IN      NUMBER,
 OLD_PDC_CDISC_ACNT_YEAR         IN      NUMBER,
 OLD_PDC_CR_UID                  IN      VARCHAR2,
 OLD_PDC_CR_DT                   IN      DATE,
 NEW_PDC_COMP_CODE               IN OUT  VARCHAR2,
 NEW_PDC_CHQ_NO                  IN OUT  VARCHAR2,
 NEW_PDC_BANK_ACNT_CODE          IN OUT  VARCHAR2,
 NEW_PDC_BANK_SUB_ACNT_CODE      IN      VARCHAR2,
 NEW_PDC_BANK_DIVN_CODE          IN      VARCHAR2,
 NEW_PDC_BANK_DEPT_CODE          IN      VARCHAR2,
 NEW_PDC_BANK_HEAD_NO_1          IN      NUMBER,
 NEW_PDC_BANK_ANLY_CODE_1        IN      VARCHAR2,
 NEW_PDC_BANK_HEAD_NO_2          IN      NUMBER,
 NEW_PDC_BANK_ANLY_CODE_2        IN      VARCHAR2,
 NEW_PDC_BANK_ACTY_VALUE_CODE_1  IN      VARCHAR2,
 NEW_PDC_BANK_ACTY_VALUE_CODE_2  IN      VARCHAR2,
 NEW_PDC_BANK_CURR_CODE          IN      VARCHAR2,
 NEW_PDC_BANK_FC_AMT             IN      NUMBER,
 NEW_PDC_BANK_NAME               IN OUT  VARCHAR2,
 NEW_PDC_DEPOSIT_BANK            IN OUT  VARCHAR2,
 NEW_PDC_DOC_NO                  IN OUT  NUMBER,
 NEW_PDC_DOC_DT                  IN OUT  DATE,
 NEW_PDC_DOC_CAL_YEAR            IN OUT  NUMBER,
 NEW_PDC_DOC_CAL_MONTH           IN OUT  NUMBER,
 NEW_PDC_DUE_DT                  IN OUT  DATE,
 NEW_PDC_DIVN_CODE               IN OUT  VARCHAR2,
 NEW_PDC_DEPT_CODE               IN OUT  VARCHAR2,
 NEW_PDC_MAIN_ACNT_CODE          IN OUT  VARCHAR2,
 NEW_PDC_SUB_ACNT_CODE           IN OUT  VARCHAR2,
 NEW_PDC_HEAD_NO_1               IN OUT  NUMBER,
 NEW_PDC_ANLY_CODE_1             IN OUT  VARCHAR2,
 NEW_PDC_HEAD_NO_2               IN OUT  NUMBER,
 NEW_PDC_ANLY_CODE_2             IN OUT  VARCHAR2,
 NEW_PDC_ACTY_CODE_1             IN OUT  VARCHAR2,
 NEW_PDC_ACTY_CODE_2             IN OUT  VARCHAR2,
 NEW_PDC_CURR_CODE               IN OUT  VARCHAR2,
 NEW_PDC_FC_AMT                  IN OUT  NUMBER,
 NEW_PDC_LC_AMT                  IN OUT  NUMBER,
 NEW_PDC_NAME                    IN OUT  VARCHAR2,
 NEW_PDC_REF                     IN OUT  VARCHAR2,
 NEW_PDC_STATUS                  IN OUT  VARCHAR2,
 NEW_PDC_TYPE_FLAG               IN OUT  VARCHAR2,
 NEW_PDC_REF_TRAN_CODE           IN OUT  VARCHAR2,
 NEW_PDC_REF_ACNT_YEAR           IN OUT  NUMBER,
 NEW_PDC_REF_DOC_NO              IN OUT  NUMBER,
 NEW_PDC_REF_SEQ_NO              IN OUT  NUMBER,
 NEW_PDC_REF_DOC_DT              IN OUT  DATE,
 NEW_PDC_CDISC_TRAN_CODE         IN OUT  VARCHAR2,
 NEW_PDC_CDISC_DOC_NO            IN OUT  NUMBER,
 NEW_PDC_FC_CDISC_AMT            IN OUT  NUMBER,
 NEW_PDC_LC_CDISC_AMT            IN OUT  NUMBER,
 NEW_PDC_CDISC_ACNT_YEAR         IN OUT  NUMBER,
 NEW_PDC_CR_UID                  IN OUT  VARCHAR2,
 NEW_PDC_CR_DT                   IN OUT  DATE,
 TRG_MODE                        IN OUT  VARCHAR2,
 TRG_ERR_NO                         OUT  NUMBER,
 TRG_ERR_MSG                        OUT  VARCHAR2,
 OLD_PDC_SEQ_NO                     IN   NUMBER,
 NEW_PDC_SEQ_NO                     IN   NUMBER) AS
P_COMP_CODE         VARCHAR2(3);
P_CHQ_NO            VARCHAR2(10);
P_PDC_MAIN_ACNT_CODE VARCHAR2(6);
P_OPEN_ENTRY_FLAG   VARCHAR2(1);
P_PHS_KEY_NO        NUMBER(8) ;
P_ERR_NO            NUMBER(6);
CURSOR SEL_MAIN IS
       SELECT MAIN_OPEN_ENTRY_FLAG
       FROM   FM_MAIN_ACCOUNT
       WHERE  MAIN_ACNT_CODE = P_PDC_MAIN_ACNT_CODE;
/* Declare Local procedures for repetitive use within the trigger */
PROCEDURE VALIDATE_CODE_COMBN IS
P_KEY    NUMBER(8);
BEGIN
F_VAL_COMB (NEW_PDC_COMP_CODE, NEW_PDC_DIVN_CODE, NEW_PDC_DEPT_CODE,
            NEW_PDC_MAIN_ACNT_CODE, NEW_PDC_SUB_ACNT_CODE,
            NEW_PDC_ANLY_CODE_1, NEW_PDC_ANLY_CODE_2, P_ERR_NO, P_KEY);
IF P_ERR_NO != 0 THEN
     RAISE_APPLICATION_ERROR(-20009, 'Invalid Code combination');
END IF;
END;
PROCEDURE VALIDATE_CODE_COMBN_B IS
P_KEY    NUMBER(8);
BEGIN
F_VAL_COMB (NEW_PDC_COMP_CODE, NEW_PDC_BANK_DIVN_CODE, NEW_PDC_BANK_DEPT_CODE,
            NEW_PDC_BANK_ACNT_CODE, NEW_PDC_BANK_SUB_ACNT_CODE,
            NEW_PDC_BANK_ANLY_CODE_1, NEW_PDC_BANK_ANLY_CODE_2,P_ERR_NO, P_KEY);
IF P_ERR_NO != 0 THEN
     RAISE_APPLICATION_ERROR(-20009, 'Invalid Code combination');
END IF;
END;
PROCEDURE INSERT_PDC_OS IS
P_POS_KEY_NO     NUMBER(8);
BEGIN
   P_PDC_MAIN_ACNT_CODE := NEW_PDC_MAIN_ACNT_CODE;
   IF SEL_MAIN%ISOPEN THEN
        CLOSE SEL_MAIN;
   END IF;
   OPEN SEL_MAIN;
   FETCH SEL_MAIN INTO P_OPEN_ENTRY_FLAG;
   IF SEL_MAIN%FOUND THEN
        IF P_OPEN_ENTRY_FLAG = 'Y' THEN
           F_PDC_OS(P_POS_KEY_NO);
           INSERT INTO FT_PDC_OS
               (POS_KEY_NO, POS_COMP_CODE, POS_PDC_CHQ_NO,
                POS_MAIN_ACNT_CODE, POS_SUB_ACNT_CODE,
                POS_CURR_CODE, POS_LC_AMT, POS_FC_AMT, POS_DRCR_FLAG,
                POS_CR_UID, POS_CR_DT, POS_PDC_SEQ_NO)
           VALUES
               (P_POS_KEY_NO, NEW_PDC_COMP_CODE, NEW_PDC_CHQ_NO,
                NEW_PDC_MAIN_ACNT_CODE, NEW_PDC_SUB_ACNT_CODE,
                NEW_PDC_CURR_CODE, NEW_PDC_LC_AMT, NEW_PDC_FC_AMT,
                DECODE(NEW_PDC_TYPE_FLAG,'R','C','I','D'),
                NEW_PDC_CR_UID, NEW_PDC_CR_DT, NEW_PDC_SEQ_NO);
        END IF;
   END IF;
   CLOSE SEL_MAIN;
END;
PROCEDURE DELETE_PDC_OS IS
BEGIN
   P_PDC_MAIN_ACNT_CODE := OLD_PDC_MAIN_ACNT_CODE;
   IF SEL_MAIN%ISOPEN THEN
        CLOSE SEL_MAIN;
   END IF;
   OPEN SEL_MAIN;
   FETCH SEL_MAIN INTO P_OPEN_ENTRY_FLAG;
   IF SEL_MAIN%FOUND THEN
        IF P_OPEN_ENTRY_FLAG = 'Y' THEN
             DELETE FROM FT_PDC_OS
             WHERE  POS_COMP_CODE = OLD_PDC_COMP_CODE
             AND    POS_PDC_SEQ_NO = OLD_PDC_SEQ_NO;
        END IF;
   END IF;
   CLOSE SEL_MAIN;
END;
PROCEDURE UPDATE_PDC_OS_AMT IS
P_UNMAT_POS_KEY_NO     NUMBER(8);
P_UNMAT_POS_LC_AMT     NUMBER(14,3);
P_UNMAT_POS_FC_AMT     NUMBER(14,3);
P_DIFF_LC_AMT          NUMBER(14,3);
P_DIFF_FC_AMT          NUMBER(14,3);
P_BASE_CURR            VARCHAR2(3) ;
CURSOR SEL_OS IS
       SELECT POS_KEY_NO, POS_LC_AMT, POS_FC_AMT
       FROM   FT_PDC_OS
       WHERE  (POS_COMP_CODE  = OLD_PDC_COMP_CODE)
       AND    (POS_PDC_SEQ_NO = OLD_PDC_SEQ_NO)
       AND    (POS_REF_KEY_NO IS NULL);
CURSOR FET_BASE_CURR IS
       SELECT PARA_VALUE
       FROM FP_PARAMETER
       WHERE PARA_ID = 'BASE.CURR';
BEGIN
     P_DIFF_LC_AMT := NVL(NEW_PDC_LC_AMT,0) - NVL(OLD_PDC_LC_AMT,0);
     P_DIFF_FC_AMT := NVL(NEW_PDC_FC_AMT,0) - NVL(OLD_PDC_FC_AMT,0);
     IF FET_BASE_CURR%ISOPEN THEN
        CLOSE FET_BASE_CURR;
     END IF;
     OPEN FET_BASE_CURR;
     FETCH FET_BASE_CURR INTO P_BASE_CURR ;
     IF FET_BASE_CURR%NOTFOUND THEN
        CLOSE FET_BASE_CURR;
        RAISE_APPLICATION_ERROR(-20999,
             'Base currency parameter not found') ;
     END IF ;
     CLOSE FET_BASE_CURR;
     IF SEL_OS%ISOPEN THEN
        CLOSE SEL_OS;
     END IF;
     OPEN SEL_OS;
     FETCH SEL_OS INTO P_UNMAT_POS_KEY_NO,
                       P_UNMAT_POS_LC_AMT, P_UNMAT_POS_FC_AMT;
     IF SEL_OS%NOTFOUND THEN
        IF P_BASE_CURR = NVL(NEW_PDC_CURR_CODE,OLD_PDC_CURR_CODE) THEN
           IF NVL(NEW_PDC_FC_AMT,0) != NVL(OLD_PDC_FC_AMT,0) OR
              NVL(NEW_PDC_LC_AMT,0) != NVL(OLD_PDC_LC_AMT,0) THEN
              DELETE_PDC_OS;
              INSERT_PDC_OS;
           END IF ;
        ELSE
           IF NVL(NEW_PDC_FC_AMT,0) != NVL(OLD_PDC_FC_AMT,0) THEN
              DELETE_PDC_OS;
              INSERT_PDC_OS;
           END IF ;
        END IF ;
     ELSE
          P_DIFF_LC_AMT := NVL(NEW_PDC_LC_AMT,0) / NVL(NEW_PDC_FC_AMT,0) *
                           (NVL(P_DIFF_FC_AMT,0) + NVL(P_UNMAT_POS_FC_AMT,0));
          IF (NVL(P_UNMAT_POS_FC_AMT,0) + NVL(P_DIFF_FC_AMT,0) >= 0) THEN
             IF (NVL(P_UNMAT_POS_FC_AMT,0) + NVL(P_DIFF_FC_AMT,0) = 0) THEN
                 DELETE FROM FT_PDC_OS
                 WHERE  POS_KEY_NO = P_UNMAT_POS_KEY_NO
                 AND    NVL(POS_FC_AMT,0) + NVL(P_DIFF_FC_AMT,0) = 0 ;
             ELSE
                 UPDATE FT_PDC_OS
                 SET    POS_LC_AMT = NVL(P_DIFF_LC_AMT,0),
                        POS_FC_AMT = NVL(POS_FC_AMT,0) + NVL(P_DIFF_FC_AMT,0)
                 WHERE  POS_KEY_NO = P_UNMAT_POS_KEY_NO;
             END IF;
          ELSE
             DELETE_PDC_OS;
             INSERT_PDC_OS;
          END IF;
     END IF;
     CLOSE SEL_OS;
END;
PROCEDURE TRANSFER_PDC_OS IS
P_ACNT_YEAR      NUMBER(2);
P_CAL_YEAR       NUMBER(4);
P_CAL_MONTH      NUMBER(2);
P_ERR_NO         NUMBER(6);
P_DUMMY          VARCHAR2(1);
CURSOR SEL_PDC_OS IS
SELECT 'X'
FROM   FT_PDC_OS
WHERE  POS_COMP_CODE = NEW_PDC_COMP_CODE
AND    POS_PDC_SEQ_NO = NEW_PDC_SEQ_NO
AND    POS_REF_KEY_NO IS NOT NULL;
BEGIN
F_VAL_OPCL(NEW_PDC_COMP_CODE, NEW_PDC_REF_DOC_DT, P_ERR_NO,
           P_CAL_YEAR, P_CAL_MONTH, P_ACNT_YEAR);
IF P_ERR_NO != 0 THEN
   RAISE_APPLICATION_ERROR(-20500 - P_ERR_NO, 'Period not open');
END IF;
NEW_PDC_REF_ACNT_YEAR := P_ACNT_YEAR;
IF SEL_PDC_OS%ISOPEN THEN
     CLOSE SEL_PDC_OS;
END IF;
OPEN SEL_PDC_OS;
FETCH SEL_PDC_OS INTO P_DUMMY;
IF SEL_PDC_OS%FOUND THEN
   /* Delete the default entry that will be generated
      by TRG_FT_CUR_TRANS_DETAIL */
   DELETE FROM FT_OS
   WHERE  OST_COMP_CODE = NEW_PDC_COMP_CODE
   AND    OST_ACNT_YEAR = NEW_PDC_REF_ACNT_YEAR
   AND    OST_TRAN_CODE = NEW_PDC_REF_TRAN_CODE
   AND    OST_DOC_NO = NEW_PDC_REF_DOC_NO
   AND    OST_SEQ_NO = NEW_PDC_REF_SEQ_NO
   AND    OST_MAIN_ACNT_CODE = NEW_PDC_MAIN_ACNT_CODE
   AND    OST_SUB_ACNT_CODE = NEW_PDC_SUB_ACNT_CODE;
   /* Insert Fresh entry */
   INSERT INTO FS_MATCH_OS
   (OST_KEY_NO, OST_COMP_CODE, OST_TRAN_CODE, OST_DOC_NO, OST_SEQ_NO,
    OST_ACNT_YEAR, OST_DOC_DT, OST_DOC_CAL_YEAR, OST_DOC_CAL_MONTH,
    OST_DUE_DT, OST_MAIN_ACNT_CODE, OST_SUB_ACNT_CODE, OST_DIVN_CODE,
    OST_DEPT_CODE, OST_HEAD_NO_1, OST_ANLY_CODE_1, OST_HEAD_NO_2,
    OST_ANLY_CODE_2, OST_ACTY_CODE_1, OST_ACTY_CODE_2, OST_CURR_CODE,
    OST_LC_AMT, OST_FC_AMT, OST_DRCR_FLAG, OST_DOC_REF, OST_LC_ORG_AMT,
    OST_FC_ORG_AMT, OST_REF_KEY_NO, OST_TYPE, OST_CR_UID, OST_CR_DT)
   SELECT
    SEQ_OST_KEY_NO.NEXTVAL, POS_COMP_CODE, NEW_PDC_REF_TRAN_CODE,
    NEW_PDC_REF_DOC_NO, NEW_PDC_REF_SEQ_NO, NEW_PDC_REF_ACNT_YEAR,
    NEW_PDC_REF_DOC_DT, P_CAL_YEAR, P_CAL_MONTH, NEW_PDC_REF_DOC_DT,
    POS_MAIN_ACNT_CODE, POS_SUB_ACNT_CODE, NEW_PDC_DIVN_CODE,
    NEW_PDC_DEPT_CODE, NEW_PDC_HEAD_NO_1, NEW_PDC_ANLY_CODE_1,
    NEW_PDC_HEAD_NO_2, NEW_PDC_ANLY_CODE_2, NEW_PDC_ACTY_CODE_1,
    NEW_PDC_ACTY_CODE_2, POS_CURR_CODE, POS_LC_AMT, POS_FC_AMT,
    POS_DRCR_FLAG, NEW_PDC_REF, NEW_PDC_LC_AMT, NEW_PDC_FC_AMT,
    POS_REF_KEY_NO, DECODE(POS_REF_KEY_NO, NULL, NULL, 'R'),
    POS_CR_UID, POS_CR_DT
   FROM FT_PDC_OS
   WHERE  POS_COMP_CODE  = NEW_PDC_COMP_CODE
   AND    POS_PDC_SEQ_NO = NEW_PDC_SEQ_NO;
   STP_FT_OS_AFTER ;
   DELETE FROM FT_PDC_OS
   WHERE  POS_COMP_CODE  = NEW_PDC_COMP_CODE
   AND    POS_PDC_SEQ_NO = NEW_PDC_SEQ_NO;
END IF;
CLOSE SEL_PDC_OS;
DELETE FROM FT_PDC_OS
WHERE  POS_COMP_CODE  = NEW_PDC_COMP_CODE
AND    POS_PDC_SEQ_NO = NEW_PDC_SEQ_NO;
END;
PROCEDURE TRANSFER_TRANS IS
P_ACNT_YEAR      NUMBER(2);
P_CAL_YEAR       NUMBER(4);
P_CAL_MONTH      NUMBER(2);
P_ERR_NO         NUMBER(6);
BEGIN
F_VAL_OPCL(NEW_PDC_COMP_CODE, NEW_PDC_REF_DOC_DT, P_ERR_NO,
           P_CAL_YEAR, P_CAL_MONTH, P_ACNT_YEAR);
IF P_ERR_NO != 0 THEN
   RAISE_APPLICATION_ERROR(-20500 - P_ERR_NO, 'Period not open');
END IF;
NEW_PDC_REF_ACNT_YEAR := P_ACNT_YEAR;
IF NEW_PDC_REF_SEQ_NO = 1 THEN
      /* Insert into audit trail header */
      SELECT SEQ_PHS_KEY_NO.NEXTVAL
      INTO   P_PHS_KEY_NO
      FROM   DUAL ;
      INSERT INTO FS_PROC_HEADER
             (PHS_KEY_NO, PHS_USER_ID, PHS_PROC_DT, PHS_PROC_STATUS,
              PHS_COMP_CODE, PHS_TRAN_FRM, PHS_TRAN_TO, PHS_TRAN_DT_FRM,
              PHS_TRAN_DT_TO, PHS_DOC_NO_FRM, PHS_DOC_NO_TO,
              PHS_USER_PATTERN, PHS_HEAD_REC_TOT, PHS_DETAIL_REC_TOT,
              PHS_AMT_TOT, PHS_ERROR_NAME, PHS_CR_UID, PHS_CR_DT)
      VALUES (P_PHS_KEY_NO, NEW_PDC_CR_UID, SYSDATE, '', NEW_PDC_COMP_CODE,
              NEW_PDC_REF_TRAN_CODE, NEW_PDC_REF_TRAN_CODE,
              NEW_PDC_REF_DOC_DT, NEW_PDC_REF_DOC_DT, NEW_PDC_REF_DOC_NO,
              NEW_PDC_REF_DOC_NO, NEW_PDC_CR_UID, '1', '', '', '',
              NEW_PDC_CR_UID, NEW_PDC_CR_DT) ;
   /* Insert Header */
    INSERT INTO FT_CUR_TRANS_HEADER
    (TH_COMP_CODE, TH_ACNT_YEAR, TH_TRAN_CODE, TH_DOC_NO, TH_DOC_DT,
     TH_DOC_CAL_YEAR, TH_DOC_CAL_MONTH, TH_DOC_DUE_DT, TH_CR_UID, TH_CR_DT,
     TH_DOC_REF, TH_DOC_REF_DT, TH_DESC, TH_CTL_TOTAL)
    VALUES
    (NEW_PDC_COMP_CODE, NEW_PDC_REF_ACNT_YEAR, NEW_PDC_REF_TRAN_CODE,
     NEW_PDC_REF_DOC_NO, NEW_PDC_REF_DOC_DT, P_CAL_YEAR, P_CAL_MONTH,
     NEW_PDC_REF_DOC_DT, NEW_PDC_CR_UID, NEW_PDC_CR_DT,
     NEW_PDC_CHQ_NO, NEW_PDC_DUE_DT, DECODE(NEW_PDC_TYPE_FLAG, 'R',
     'CONFIRMATION OF PDC RECEIVED VIDE RECEIPT NO. ',
     'CONFIRMATION OF PDC ISSUED VIDE ISSUE NO. ') ||
      TO_CHAR(NEW_PDC_DOC_NO) || ' DATED ' || TO_CHAR(NEW_PDC_DOC_DT,'DD/MM/YYYY')
     , P_PHS_KEY_NO);
END IF;
/* Insert Audit Trail record */
INSERT INTO FS_PDC_TRAIL
(PT_PDC_SEQ_NO, PT_PDC_COMP_CODE, PT_PDC_CHQ_NO, PT_ACNT_YEAR,
 PT_TRAN_CODE, PT_DOC_NO, PT_SEQ_NO, PT_CR_UID, PT_CR_DT)
VALUES
(NEW_PDC_SEQ_NO, NEW_PDC_COMP_CODE, NEW_PDC_CHQ_NO, NEW_PDC_REF_ACNT_YEAR,
 NEW_PDC_REF_TRAN_CODE, NEW_PDC_REF_DOC_NO, NEW_PDC_REF_SEQ_NO,
 NEW_PDC_CR_UID, NEW_PDC_CR_DT);
VALIDATE_CODE_COMBN;
/* Insert Debtor or Creditor record */
INSERT INTO FT_CUR_TRANS_DETAIL
(TD_COMP_CODE, TD_ACNT_YEAR, TD_TRAN_CODE, TD_DOC_NO, TD_SEQ_NO,
 TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE, TD_DIVN_CODE, TD_DEPT_CODE,
 TD_HEAD_NO_1, TD_ANLY_CODE_1, TD_HEAD_NO_2, TD_ANLY_CODE_2,
 TD_CURR_CODE, TD_DOC_AMT, TD_DOC_DRCR_FLAG, TD_FC_AMT, TD_DOC_REF,
 TD_DOC_DUE_DT, TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2,
 TD_DESC, TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG, TD_MONTH_PRC_FLAG,
 TD_PYMT_APPR_FLAG, TD_CR_UID, TD_CR_DT)
VALUES
(NEW_PDC_COMP_CODE, NEW_PDC_REF_ACNT_YEAR, NEW_PDC_REF_TRAN_CODE,
 NEW_PDC_REF_DOC_NO, NEW_PDC_REF_SEQ_NO, NEW_PDC_MAIN_ACNT_CODE,
 NEW_PDC_SUB_ACNT_CODE, NEW_PDC_DIVN_CODE, NEW_PDC_DEPT_CODE,
 NEW_PDC_HEAD_NO_1, NEW_PDC_ANLY_CODE_1, NEW_PDC_HEAD_NO_2,
 NEW_PDC_ANLY_CODE_2, NEW_PDC_CURR_CODE, NEW_PDC_LC_AMT,
 DECODE(NEW_PDC_TYPE_FLAG,'R','C','I','D','X'),
 NEW_PDC_FC_AMT, NEW_PDC_CHQ_NO, NEW_PDC_REF_DOC_DT,
 NEW_PDC_ACTY_CODE_1, NEW_PDC_ACTY_CODE_2, TO_CHAR(NEW_PDC_DOC_NO) ||
 ' ' || NEW_PDC_NAME || ', REF. ' || NEW_PDC_REF,
 'N', 'N', 'N', '0', NEW_PDC_CR_UID, NEW_PDC_CR_DT);
VALIDATE_CODE_COMBN_B;
/* Insert Bank record */
INSERT INTO FT_CUR_TRANS_DETAIL
(TD_COMP_CODE, TD_ACNT_YEAR, TD_TRAN_CODE, TD_DOC_NO, TD_SEQ_NO,
 TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE, TD_DIVN_CODE, TD_DEPT_CODE,
 TD_HEAD_NO_1, TD_ANLY_CODE_1, TD_HEAD_NO_2, TD_ANLY_CODE_2,
 TD_CURR_CODE, TD_DOC_AMT, TD_DOC_DRCR_FLAG, TD_FC_AMT, TD_DOC_REF,
 TD_DOC_DUE_DT, TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2,
 TD_DESC, TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG, TD_MONTH_PRC_FLAG,
 TD_PYMT_APPR_FLAG, TD_CR_UID, TD_CR_DT)
VALUES
(NEW_PDC_COMP_CODE, NEW_PDC_REF_ACNT_YEAR, NEW_PDC_REF_TRAN_CODE,
 NEW_PDC_REF_DOC_NO, NEW_PDC_REF_SEQ_NO + 1, NEW_PDC_BANK_ACNT_CODE,
 NEW_PDC_BANK_SUB_ACNT_CODE, NEW_PDC_BANK_DIVN_CODE, NEW_PDC_BANK_DEPT_CODE,
 NEW_PDC_BANK_HEAD_NO_1, NEW_PDC_BANK_ANLY_CODE_1,
 NEW_PDC_BANK_HEAD_NO_2, NEW_PDC_BANK_ANLY_CODE_2,
 NEW_PDC_BANK_CURR_CODE, NEW_PDC_LC_AMT,
 DECODE(NEW_PDC_TYPE_FLAG,'R','D','I','C','X'),
 NEW_PDC_BANK_FC_AMT, NEW_PDC_CHQ_NO, NEW_PDC_REF_DOC_DT,
 NEW_PDC_ACTY_CODE_1, NEW_PDC_ACTY_CODE_2, TO_CHAR(NEW_PDC_DOC_NO) ||
 ' ' || NEW_PDC_NAME || ', REF. ' || NEW_PDC_REF,
 'N', 'N', 'N', '0', NEW_PDC_CR_UID, NEW_PDC_CR_DT);
END;
BEGIN
/* Main procedure */
P_ERR_NO := 0;
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
    P_COMP_CODE := NEW_PDC_COMP_CODE;
    P_CHQ_NO := NEW_PDC_CHQ_NO;
ELSE
    P_COMP_CODE := OLD_PDC_COMP_CODE;
    P_CHQ_NO := OLD_PDC_CHQ_NO;
END IF;
IF TRG_MODE = 'I' THEN
   IF NVL(NEW_PDC_STATUS,'X') != 'P' THEN
      RAISE_APPLICATION_ERROR(-20011, 'PDC must be pending during insert');
   END IF;
   VALIDATE_CODE_COMBN;
   INSERT_PDC_OS;
END IF;
IF TRG_MODE = 'U' THEN
   IF (OLD_PDC_COMP_CODE != NEW_PDC_COMP_CODE) OR
      (OLD_PDC_SEQ_NO != NEW_PDC_SEQ_NO) THEN
      RAISE_APPLICATION_ERROR(-20011, 'Primary key change');
   END IF;
   IF (OLD_PDC_TYPE_FLAG != NEW_PDC_TYPE_FLAG) THEN
      RAISE_APPLICATION_ERROR(-20011, 'PDC Type cannot be changed');
   END IF;
   IF OLD_PDC_STATUS = 'C' THEN
      RAISE_APPLICATION_ERROR(-20011, 'Cannot update a confirmed document');
   END IF;
   IF NEW_PDC_STATUS = 'P' THEN
       /* Non Confirmation updation */
       IF (OLD_PDC_MAIN_ACNT_CODE != NEW_PDC_MAIN_ACNT_CODE) OR
          (NVL(OLD_PDC_SUB_ACNT_CODE,'ZZZZZZZ') !=
           NVL(NEW_PDC_SUB_ACNT_CODE,'ZZZZZZZ')) OR
          (NVL(OLD_PDC_CURR_CODE,'ZZZZ') !=
           NVL(NEW_PDC_CURR_CODE,'ZZZZ')) THEN
            VALIDATE_CODE_COMBN;
            DELETE_PDC_OS;
            INSERT_PDC_OS;
       ELSE
            IF  (NVL(OLD_PDC_DIVN_CODE,'ZZZZZZZ') !=
                 NVL(NEW_PDC_DIVN_CODE,'ZZZZZZZ')) OR
                (NVL(OLD_PDC_DEPT_CODE,'ZZZZZZZ') !=
                 NVL(NEW_PDC_DEPT_CODE,'ZZZZZZZ')) OR
                (NVL(OLD_PDC_ANLY_CODE_1,'ZZZZZZZ') !=
                 NVL(NEW_PDC_ANLY_CODE_1,'ZZZZZZZ')) OR
                (NVL(OLD_PDC_ANLY_CODE_2,'ZZZZZZZ') !=
                 NVL(NEW_PDC_ANLY_CODE_2,'ZZZZZZZ')) THEN
                 VALIDATE_CODE_COMBN;
                 /* required??? */
                 IF (NVL(OLD_PDC_LC_AMT,0) != NVL(NEW_PDC_LC_AMT,0)) OR
                    (NVL(OLD_PDC_FC_AMT,0) != NVL(NEW_PDC_FC_AMT,0)) THEN
                    UPDATE_PDC_OS_AMT;
                 END IF;
            END IF;
            IF (NVL(OLD_PDC_LC_AMT,0) != NVL(NEW_PDC_LC_AMT,0)) OR
               (NVL(OLD_PDC_FC_AMT,0) != NVL(NEW_PDC_FC_AMT,0)) THEN
               UPDATE_PDC_OS_AMT;
            END IF;
       END IF;
   END IF;
   /* PDC Confirmation */
   IF NEW_PDC_STATUS = 'C' AND OLD_PDC_STATUS = 'P' THEN
       IF (OLD_PDC_MAIN_ACNT_CODE != NEW_PDC_MAIN_ACNT_CODE) OR
          (NVL(OLD_PDC_SUB_ACNT_CODE,'ZZZZZZZ') !=
           NVL(NEW_PDC_SUB_ACNT_CODE,'ZZZZZZZ')) OR
          (NVL(OLD_PDC_CURR_CODE,'ZZZZ') !=
           NVL(NEW_PDC_CURR_CODE,'ZZZZ')) OR
          (NVL(OLD_PDC_DIVN_CODE,'ZZZZZZZ') !=
           NVL(NEW_PDC_DIVN_CODE,'ZZZZZZZ')) OR
          (NVL(OLD_PDC_DEPT_CODE,'ZZZZZZZ') !=
           NVL(NEW_PDC_DEPT_CODE,'ZZZZZZZ')) OR
          (NVL(OLD_PDC_ANLY_CODE_1,'ZZZZZZZ') !=
           NVL(NEW_PDC_ANLY_CODE_1,'ZZZZZZZ')) OR
          (NVL(OLD_PDC_ANLY_CODE_2,'ZZZZZZZ') !=
           NVL(NEW_PDC_ANLY_CODE_2,'ZZZZZZZ')) THEN
          RAISE_APPLICATION_ERROR(-20010,
                'Cannot initiate confirmation along with Code change');
       END IF;
       IF (NVL(OLD_PDC_LC_AMT,0) != NVL(NEW_PDC_LC_AMT,0)) OR
          (NVL(OLD_PDC_FC_AMT,0) != NVL(NEW_PDC_FC_AMT,0)) THEN
          RAISE_APPLICATION_ERROR(-20010,
                'Cannot initiate confirmation along with Amount change');
       END IF;
       IF NEW_PDC_REF_TRAN_CODE IS NULL OR
          NEW_PDC_REF_ACNT_YEAR IS NULL OR
          NEW_PDC_REF_DOC_NO IS NULL OR
          NEW_PDC_REF_SEQ_NO IS NULL OR
          NEW_PDC_REF_DOC_DT IS NULL THEN
          RAISE_APPLICATION_ERROR(-20010,
          'Cannot initiate confirmation without providing Document reference');
       END IF;
       TRANSFER_TRANS;
       TRANSFER_PDC_OS;
    END IF;
END IF;
IF TRG_MODE = 'D' THEN
   IF OLD_PDC_STATUS = 'C' THEN
      RAISE_APPLICATION_ERROR(-20011, 'Cannot delete a confirmed document');
   END IF;
   DELETE_PDC_OS;
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FT_PDC_OS (
 OLD_POS_KEY_NO            IN      NUMBER,
 OLD_POS_COMP_CODE         IN      VARCHAR2,
 OLD_POS_PDC_CHQ_NO        IN      VARCHAR2,
 OLD_POS_MAIN_ACNT_CODE    IN      VARCHAR2,
 OLD_POS_SUB_ACNT_CODE     IN      VARCHAR2,
 OLD_POS_CURR_CODE         IN      VARCHAR2,
 OLD_POS_LC_AMT            IN      NUMBER,
 OLD_POS_FC_AMT            IN      NUMBER,
 OLD_POS_DRCR_FLAG         IN      VARCHAR2,
 OLD_POS_REF_DUE_DT        IN      DATE,
 OLD_POS_REF_KEY_NO        IN      NUMBER,
 OLD_POS_CR_UID            IN      VARCHAR2,
 OLD_POS_CR_DT             IN      DATE,
 NEW_POS_KEY_NO            IN OUT  NUMBER,
 NEW_POS_COMP_CODE         IN OUT  VARCHAR2,
 NEW_POS_PDC_CHQ_NO        IN OUT  VARCHAR2,
 NEW_POS_MAIN_ACNT_CODE    IN OUT  VARCHAR2,
 NEW_POS_SUB_ACNT_CODE     IN OUT  VARCHAR2,
 NEW_POS_CURR_CODE         IN OUT  VARCHAR2,
 NEW_POS_LC_AMT            IN OUT  NUMBER,
 NEW_POS_FC_AMT            IN OUT  NUMBER,
 NEW_POS_DRCR_FLAG         IN OUT  VARCHAR2,
 NEW_POS_REF_DUE_DT        IN OUT  DATE,
 NEW_POS_REF_KEY_NO        IN OUT  NUMBER,
 NEW_POS_CR_UID            IN OUT  VARCHAR2,
 NEW_POS_CR_DT             IN OUT  DATE,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2) AS
P_COMP_CODE         VARCHAR2(3);
P_CHQ_NO            VARCHAR2(10);
P_MAIN_ACNT_CODE    VARCHAR2(6);
P_SUB_ACNT_CODE     VARCHAR2(6);
P_PREV_POS_LC_AMT   NUMBER(14,3);
P_PREV_POS_FC_AMT   NUMBER(14,3);
P_DUMMY             VARCHAR2(1);
P_OST_CURR_CODE     VARCHAR2(3);
P_OST_LC_AMT        NUMBER(14,3);
P_OST_FC_AMT        NUMBER(14,3);
P_OST_LC_ORG_AMT    NUMBER(14,3);
P_OST_FC_ORG_AMT    NUMBER(14,3);
CURSOR SEL_OS IS
  SELECT OST_CURR_CODE, OST_LC_AMT, OST_FC_AMT,
         OST_LC_ORG_AMT, OST_FC_ORG_AMT
  FROM   FT_OS
  WHERE  OST_KEY_NO = NEW_POS_REF_KEY_NO
  AND    NVL(OST_TYPE,'P') = 'P'
  FOR UPDATE OF OST_FC_PDC_AMT, OST_LC_PDC_AMT;
BEGIN
IF TRG_MODE = 'U' THEN
    IF OLD_POS_COMP_CODE != NEW_POS_COMP_CODE OR
       OLD_POS_PDC_CHQ_NO != NEW_POS_PDC_CHQ_NO OR
       OLD_POS_MAIN_ACNT_CODE != NEW_POS_MAIN_ACNT_CODE OR
       OLD_POS_SUB_ACNT_CODE != NEW_POS_SUB_ACNT_CODE  OR
       NVL(OLD_POS_REF_KEY_NO,0) != NVL(NEW_POS_REF_KEY_NO,0) THEN
       RAISE_APPLICATION_ERROR(-20024,'Significant OS fields changed');
    END IF;
END IF;
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
     IF NEW_POS_REF_KEY_NO IS NOT NULL THEN
          IF TRG_MODE = 'I' THEN
               P_PREV_POS_LC_AMT := 0;
               P_PREV_POS_FC_AMT := 0;
          ELSE
               P_PREV_POS_LC_AMT := OLD_POS_LC_AMT;
               P_PREV_POS_FC_AMT := OLD_POS_FC_AMT;
          END IF;
          IF SEL_OS%ISOPEN THEN
               CLOSE SEL_OS;
          END IF;
          OPEN SEL_OS;
          FETCH SEL_OS INTO P_OST_CURR_CODE,
                            P_OST_FC_AMT, P_OST_LC_AMT,
                            P_OST_FC_ORG_AMT, P_OST_LC_ORG_AMT;
          IF SEL_OS%NOTFOUND THEN
               CLOSE SEL_OS;
               RAISE_APPLICATION_ERROR(-20029,'Invalid OS Reference');
          END IF;
          IF NVL(P_OST_CURR_CODE,'XXXX') !=
             NVL(NEW_POS_CURR_CODE,'XXXX') THEN
               CLOSE SEL_OS;
               RAISE_APPLICATION_ERROR(-20030,'Currrency mismatch ');
          END IF;
          IF NVL(P_OST_LC_AMT,0) != NVL(P_OST_LC_ORG_AMT,0) OR
             NVL(P_OST_FC_AMT,0) != NVL(P_OST_FC_ORG_AMT,0) THEN
               RAISE_APPLICATION_ERROR
                    (-20031,'Doesnot qualify as parent entry ');
          END IF;
          UPDATE FT_OS
          SET    OST_LC_PDC_AMT     = NVL(OST_LC_PDC_AMT,0) +
                                      NVL(NEW_POS_LC_AMT,0) -
                                      NVL(P_PREV_POS_LC_AMT,0),
                 OST_FC_PDC_AMT     = NVL(OST_FC_PDC_AMT,0) +
                                      NVL(NEW_POS_FC_AMT,0) -
                                      NVL(P_PREV_POS_FC_AMT,0)
          WHERE  CURRENT OF SEL_OS;
          CLOSE SEL_OS;
     END IF;
END IF;
IF TRG_MODE = 'D' THEN
     IF OLD_POS_REF_KEY_NO IS NOT NULL THEN
          UPDATE FT_OS
          SET    OST_LC_PDC_AMT     = NVL(OST_LC_PDC_AMT,0) -
                                      NVL(OLD_POS_LC_AMT,0),
                 OST_FC_PDC_AMT     = NVL(OST_FC_PDC_AMT,0) -
                                      NVL(OLD_POS_FC_AMT,0)
          WHERE  OST_KEY_NO = OLD_POS_REF_KEY_NO;
     END IF;
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FT_PRV_TRANS_DETAIL (
 OLD_TD_COMP_CODE               IN      VARCHAR2,
 OLD_TD_ACNT_YEAR               IN      NUMBER,
 OLD_TD_TRAN_CODE               IN      VARCHAR2,
 OLD_TD_DOC_NO                  IN      NUMBER,
 OLD_TD_SEQ_NO                  IN      NUMBER,
 OLD_TD_MAIN_ACNT_CODE          IN      VARCHAR2,
 OLD_TD_SUB_ACNT_CODE           IN      VARCHAR2,
 OLD_TD_DIVN_CODE               IN      VARCHAR2,
 OLD_TD_DEPT_CODE               IN      VARCHAR2,
 OLD_TD_HEAD_NO_1               IN      NUMBER,
 OLD_TD_ANLY_CODE_1             IN      VARCHAR2,
 OLD_TD_HEAD_NO_2               IN      NUMBER,
 OLD_TD_ANLY_CODE_2             IN      VARCHAR2,
 OLD_TD_CURR_CODE               IN      VARCHAR2,
 OLD_TD_DOC_AMT                 IN      NUMBER,
 OLD_TD_DOC_DRCR_FLAG           IN      VARCHAR2,
 OLD_TD_FC_AMT                  IN      NUMBER,
 OLD_TD_DOC_REF                 IN      VARCHAR2,
 OLD_TD_DOC_DUE_DT              IN      DATE,
 OLD_TD_OTH_REF                 IN      VARCHAR2,
 OLD_TD_ACTY_VALUE_CODE_1       IN      VARCHAR2,
 OLD_TD_ACTY_VALUE_CODE_2       IN      VARCHAR2,
 OLD_TD_DESC                    IN      VARCHAR2,
 OLD_TD_DBK_PRINT_FLAG          IN      VARCHAR2,
 OLD_TD_LED_PRINT_FLAG          IN      VARCHAR2,
 OLD_TD_MONTH_PRC_FLAG          IN      VARCHAR2,
 OLD_TD_BILL_FC_AMT             IN      NUMBER,
 OLD_TD_BILL_LC_AMT             IN      NUMBER,
 OLD_TD_BILL_STATUS             IN      VARCHAR2,
 OLD_TD_PYMT_APPR_FLAG          IN      VARCHAR2,
 OLD_TD_CR_UID                  IN      VARCHAR2,
 OLD_TD_CR_DT                   IN      DATE,
 OLD_TD_PYMT_LAST_APPR_FC_AMT   IN      NUMBER,
 OLD_TD_PYMT_LAST_APPR_LC_AMT   IN      NUMBER,
 OLD_TD_PYMT_LAST_APPR_BANK     IN      VARCHAR2,
 NEW_TD_COMP_CODE               IN OUT  VARCHAR2,
 NEW_TD_ACNT_YEAR               IN OUT  NUMBER,
 NEW_TD_TRAN_CODE               IN OUT  VARCHAR2,
 NEW_TD_DOC_NO                  IN OUT  NUMBER,
 NEW_TD_SEQ_NO                  IN OUT  NUMBER,
 NEW_TD_MAIN_ACNT_CODE          IN OUT  VARCHAR2,
 NEW_TD_SUB_ACNT_CODE           IN OUT  VARCHAR2,
 NEW_TD_DIVN_CODE               IN OUT  VARCHAR2,
 NEW_TD_DEPT_CODE               IN OUT  VARCHAR2,
 NEW_TD_HEAD_NO_1               IN OUT  NUMBER,
 NEW_TD_ANLY_CODE_1             IN OUT  VARCHAR2,
 NEW_TD_HEAD_NO_2               IN OUT  NUMBER,
 NEW_TD_ANLY_CODE_2             IN OUT  VARCHAR2,
 NEW_TD_CURR_CODE               IN OUT  VARCHAR2,
 NEW_TD_DOC_AMT                 IN OUT  NUMBER,
 NEW_TD_DOC_DRCR_FLAG           IN OUT  VARCHAR2,
 NEW_TD_FC_AMT                  IN OUT  NUMBER,
 NEW_TD_DOC_REF                 IN OUT  VARCHAR2,
 NEW_TD_DOC_DUE_DT              IN OUT  DATE,
 NEW_TD_OTH_REF                 IN OUT  VARCHAR2,
 NEW_TD_ACTY_VALUE_CODE_1       IN OUT  VARCHAR2,
 NEW_TD_ACTY_VALUE_CODE_2       IN OUT  VARCHAR2,
 NEW_TD_DESC                    IN OUT  VARCHAR2,
 NEW_TD_DBK_PRINT_FLAG          IN OUT  VARCHAR2,
 NEW_TD_LED_PRINT_FLAG          IN OUT  VARCHAR2,
 NEW_TD_MONTH_PRC_FLAG          IN OUT  VARCHAR2,
 NEW_TD_BILL_FC_AMT             IN OUT  NUMBER,
 NEW_TD_BILL_LC_AMT             IN OUT  NUMBER,
 NEW_TD_BILL_STATUS             IN OUT  VARCHAR2,
 NEW_TD_PYMT_APPR_FLAG          IN OUT  VARCHAR2,
 NEW_TD_CR_UID                  IN OUT  VARCHAR2,
 NEW_TD_CR_DT                   IN OUT  DATE,
 NEW_TD_PYMT_LAST_APPR_FC_AMT   IN OUT  NUMBER,
 NEW_TD_PYMT_LAST_APPR_LC_AMT   IN OUT  NUMBER,
 NEW_TD_PYMT_LAST_APPR_BANK     IN OUT  VARCHAR2,
 TRG_MODE                       IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2) AS
P_COMP_CODE         VARCHAR2(3);
P_ACNT_YEAR         NUMBER(2);
P_TRAN_CODE         VARCHAR2(3);
P_DOC_NO            NUMBER(6);
P_CUR_ACNT_YEAR     NUMBER(2);
P_CAL_MONTH         NUMBER(2);
P_CAL_YEAR          NUMBER(4);
P_DOC_DT            DATE;
P_DOC_DUE_DT        DATE;
P_DOC_REF_DT        DATE;
P_TD_MAIN_ACNT_CODE VARCHAR2(6);
P_OPEN_ENTRY_FLAG   VARCHAR2(1);
P_MAIN_ACNT_CATG    VARCHAR2(2);
P_DBTI_KEY_FIELD    VARCHAR2(30);
P_PHS_KEY_NO        FS_PROC_HEADER.PHS_KEY_NO%TYPE ;
P_CR_UID            FT_CUR_TRANS_HEADER.TH_CR_UID%TYPE ;
P_CR_DT             FT_CUR_TRANS_HEADER.TH_CR_DT%TYPE ;
P_BAL_AMT           NUMBER(20,3) ;
P_TRAN_AMT          NUMBER(20,3) ;
P_PDS_SEQ_NO        NUMBER(6) ;
P_ERR_NO            NUMBER(6);
CURSOR SEL_TH IS
       SELECT TH_DOC_DT, TH_DOC_CAL_MONTH, TH_DOC_CAL_YEAR,
              TH_DOC_DUE_DT, TH_DOC_REF_DT, TH_CTL_TOTAL,
              TH_CR_UID, TH_CR_DT
       FROM   FT_PRV_TRANS_HEADER
       WHERE  TH_COMP_CODE = P_COMP_CODE
       AND    TH_ACNT_YEAR = P_ACNT_YEAR
       AND    TH_TRAN_CODE = P_TRAN_CODE
       AND    TH_DOC_NO    = P_DOC_NO;
CURSOR SEL_TH_INFO IS
       SELECT TO_DATE(DBTI_VALUE_1,'DD-MON-YYYY'), TO_NUMBER(DBTI_VALUE_2),
              TO_NUMBER(DBTI_VALUE_3), TO_DATE(DBTI_VALUE_4,'DD-MON-YYYY'),
              TO_DATE(DBTI_VALUE_5,'DD-MON-YYYY'), TO_NUMBER(DBTI_VALUE_10),
              DBTI_VALUE_11, TO_DATE(DBTI_VALUE_12,'DD-MON-YYYY')
       FROM   FP_DBTRG_INTERFACE
       WHERE  DBTI_KEY_FIELD = P_DBTI_KEY_FIELD;
CURSOR SEL_MAIN IS
       SELECT MAIN_OPEN_ENTRY_FLAG, MAIN_ACNT_CATG
       FROM   FM_MAIN_ACCOUNT
       WHERE  MAIN_ACNT_CODE = P_TD_MAIN_ACNT_CODE;
CURSOR SEQ_NO IS
       SELECT MAX(PDS_SEQ_NO)
       FROM   FS_PROC_DETAIL
       WHERE  PDS_KEY_NO = P_PHS_KEY_NO ;
/* Declare Local procedures for repetitive use within the trigger */
PROCEDURE VALIDATE_CODE_COMBN IS
P_KEY    NUMBER(8);
BEGIN
F_VAL_COMB (NEW_TD_COMP_CODE, NEW_TD_DIVN_CODE, NEW_TD_DEPT_CODE,
            NEW_TD_MAIN_ACNT_CODE, NEW_TD_SUB_ACNT_CODE,
            NEW_TD_ANLY_CODE_1, NEW_TD_ANLY_CODE_2, P_ERR_NO, P_KEY);
IF P_ERR_NO != 0 THEN
     RAISE_APPLICATION_ERROR(-20016, 'Invalid Code combination');
END IF;
END;
PROCEDURE INSERT_CUR_OS IS
P_OST_KEY_NO     NUMBER(8);
P_OST_REF_KEY_NO NUMBER(8);
P_OST_LC_AMT     NUMBER(14,3);
P_OST_FC_AMT     NUMBEr(14,3);
CURSOR F_OS_DET IS
       SELECT OST_KEY_NO, OST_REF_KEY_NO,
              OST_LC_AMT, OST_FC_AMT
       FROM   FT_UNPOSTED_OS
       WHERE  (OST_COMP_CODE = NEW_TD_COMP_CODE)
       AND    (OST_ACNT_YEAR = NEW_TD_ACNT_YEAR)
       AND    (OST_TRAN_CODE = NEW_TD_TRAN_CODE)
       AND    (OST_DOC_NO    = NEW_TD_DOC_NO)
       AND    (OST_SEQ_NO    = NEW_TD_SEQ_NO);
BEGIN
   P_TD_MAIN_ACNT_CODE := NEW_TD_MAIN_ACNT_CODE;
   IF SEL_MAIN%ISOPEN THEN
        CLOSE SEL_MAIN;
   END IF;
   OPEN SEL_MAIN;
   FETCH SEL_MAIN INTO P_OPEN_ENTRY_FLAG, P_MAIN_ACNT_CATG ;
   IF SEL_MAIN%FOUND THEN
        IF P_OPEN_ENTRY_FLAG = 'Y' THEN
           IF F_OS_DET%ISOPEN THEN
                CLOSE F_OS_DET;
           END IF;
           OPEN F_OS_DET;
           FETCH F_OS_DET INTO P_OST_KEY_NO, P_OST_REF_KEY_NO,
                               P_OST_LC_AMT, P_OST_FC_AMT;
           IF F_OS_DET%FOUND THEN
                LOOP
                EXIT WHEN F_OS_DET%NOTFOUND;
                     INSERT INTO FS_MATCH_OS
                     SELECT FT_UNPOSTED_OS.*, 'FIN7',SYSDATE
                     FROM   FT_UNPOSTED_OS
                     WHERE  (OST_KEY_NO = P_OST_KEY_NO);
                     FETCH F_OS_DET INTO P_OST_KEY_NO, P_OST_REF_KEY_NO,
                                         P_OST_LC_AMT, P_OST_FC_AMT;
                END LOOP;
           ELSE
                F_OS(P_OST_KEY_NO);
                INSERT INTO FT_OS
                  (OST_KEY_NO, OST_COMP_CODE, OST_TRAN_CODE, OST_DOC_NO,
                   OST_SEQ_NO, OST_ACNT_YEAR, OST_DOC_DT, OST_DOC_CAL_YEAR,
                   OST_DOC_CAL_MONTH, OST_DUE_DT, OST_MAIN_ACNT_CODE,
                   OST_SUB_ACNT_CODE, OST_DIVN_CODE, OST_DEPT_CODE,
                   OST_HEAD_NO_1, OST_ANLY_CODE_1, OST_HEAD_NO_2,
                   OST_ANLY_CODE_2, OST_ACTY_CODE_1, OST_ACTY_CODE_2,
                   OST_CURR_CODE, OST_LC_AMT, OST_FC_AMT, OST_DRCR_FLAG,
                   OST_DOC_REF, OST_DOC_REF_DT, OST_OTH_REF,
                   OST_LC_ORG_AMT, OST_FC_ORG_AMT, OST_TYPE,
                   OST_CR_UID, OST_CR_DT)
                VALUES
                  (P_OST_KEY_NO, NEW_TD_COMP_CODE, NEW_TD_TRAN_CODE,
                   NEW_TD_DOC_NO, NEW_TD_SEQ_NO, NEW_TD_ACNT_YEAR,
                   P_DOC_DT, P_CAL_YEAR, P_CAL_MONTH, NEW_TD_DOC_DUE_DT,
                   NEW_TD_MAIN_ACNT_CODE, NEW_TD_SUB_ACNT_CODE,
                   NEW_TD_DIVN_CODE, NEW_TD_DEPT_CODE, NEW_TD_HEAD_NO_1,
                   NEW_TD_ANLY_CODE_1, NEW_TD_HEAD_NO_2,
                   NEW_TD_ANLY_CODE_2, NEW_TD_ACTY_VALUE_CODE_1,
                   NEW_TD_ACTY_VALUE_CODE_2,
                   NEW_TD_CURR_CODE, NEW_TD_DOC_AMT, NEW_TD_FC_AMT,
                   NEW_TD_DOC_DRCR_FLAG, NEW_TD_DOC_REF, P_DOC_REF_DT,
                   NEW_TD_OTH_REF, NEW_TD_DOC_AMT, NEW_TD_FC_AMT, NULL,
                   NEW_TD_CR_UID, NEW_TD_CR_DT);
           END IF;
           CLOSE F_OS_DET;
        END IF;
   END IF;
   CLOSE SEL_MAIN;
END;
PROCEDURE UPDATE_CUR_OS_CODES IS
BEGIN
     UPDATE FT_OS
     SET    OST_DIVN_CODE   = NEW_TD_DIVN_CODE,
            OST_DEPT_CODE   = NEW_TD_DEPT_CODE,
            OST_ANLY_CODE_1 = NEW_TD_ANLY_CODE_1,
            OST_ANLY_CODE_2 = NEW_TD_ANLY_CODE_2,
            OST_ACTY_CODE_1 = NEW_TD_ACTY_VALUE_CODE_1,
            OST_ACTY_CODE_2 = NEW_TD_ACTY_VALUE_CODE_2,
            OST_DOC_REF     = NEW_TD_DOC_REF,
            OST_OTH_REF     = NEW_TD_OTH_REF,
            OST_DUE_DT      = NEW_TD_DOC_DUE_DT
     WHERE  (OST_COMP_CODE = OLD_TD_COMP_CODE)
     AND    (OST_ACNT_YEAR = OLD_TD_ACNT_YEAR)
     AND    (OST_TRAN_CODE = OLD_TD_TRAN_CODE)
     AND    (OST_DOC_NO    = OLD_TD_DOC_NO)
     AND    (OST_SEQ_NO    = OLD_TD_SEQ_NO);
END;
PROCEDURE INCREASE_ACNT_BAL IS
BEGIN
   F_UPD_ACNT_BAL (NEW_TD_COMP_CODE, P_ACNT_YEAR,
                   NEW_TD_MAIN_ACNT_CODE, NEW_TD_SUB_ACNT_CODE,
                   NEW_TD_DIVN_CODE, NEW_TD_DEPT_CODE,
                   NEW_TD_ANLY_CODE_1, NEW_TD_ANLY_CODE_2,
                   P_CAL_YEAR, P_CAL_MONTH, NEW_TD_CURR_CODE,
                   NEW_TD_DOC_AMT, NEW_TD_FC_AMT, NEW_TD_DOC_DRCR_FLAG,
                   'P', 'A', NEW_TD_CR_UID, P_ERR_NO);
   IF P_ERR_NO != 0 THEN
      RAISE_APPLICATION_ERROR(-20500 - P_ERR_NO, 'Error at balance updation');
   END IF;
END;
BEGIN
/* Main procedure */
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
    P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(NEW_TD_COMP_CODE);
ELSE
    P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(OLD_TD_COMP_CODE);
END IF;
P_ERR_NO := 0;
IF TRG_MODE = 'U' THEN
   NEW_TD_ACNT_YEAR := OLD_TD_ACNT_YEAR;
END IF;
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
    P_COMP_CODE := NEW_TD_COMP_CODE;
    P_TRAN_CODE := NEW_TD_TRAN_CODE;
    P_ACNT_YEAR := NEW_TD_ACNT_YEAR;
    P_DOC_NO := NEW_TD_DOC_NO;
ELSE
    P_COMP_CODE := OLD_TD_COMP_CODE;
    P_TRAN_CODE := OLD_TD_TRAN_CODE;
    P_ACNT_YEAR := OLD_TD_ACNT_YEAR;
    P_DOC_NO := OLD_TD_DOC_NO;
END IF;
P_DBTI_KEY_FIELD := P_COMP_CODE ||
                    TO_CHAR(P_ACNT_YEAR) ||
                    P_TRAN_CODE ||
                    TO_CHAR(P_DOC_NO);
IF SEL_TH_INFO%ISOPEN THEN
    CLOSE SEL_TH_INFO;
END IF;
OPEN SEL_TH_INFO;
FETCH SEL_TH_INFO INTO P_DOC_DT, P_CAL_MONTH, P_CAL_YEAR,
                    P_DOC_DUE_DT, P_DOC_REF_DT,
                    P_PHS_KEY_NO, P_CR_UID, P_CR_DT ;
IF SEL_TH_INFO%NOTFOUND THEN
     IF SEL_TH%ISOPEN THEN
         CLOSE SEL_TH;
     END IF;
     OPEN SEL_TH;
     FETCH SEL_TH INTO P_DOC_DT, P_CAL_MONTH, P_CAL_YEAR,
                         P_DOC_DUE_DT, P_DOC_REF_DT,
                         P_PHS_KEY_NO, P_CR_UID, P_CR_DT ;
     IF SEL_TH%NOTFOUND THEN
          RAISE_APPLICATION_ERROR(-20017,'Header not found');
     END IF;
     CLOSE SEL_TH;
ELSE
     /* Used for verification in DB triggers corresponding to
        FT_UNPOSTED_OS and FT_OS tables */
     IF TRG_MODE = 'I' OR TRG_MODE = 'U'  THEN
          UPDATE FP_DBTRG_INTERFACE
          SET    DBTI_VALUE_6 = TO_CHAR(NEW_TD_SEQ_NO),
                 DBTI_VALUE_7 = NEW_TD_MAIN_ACNT_CODE,
                 DBTI_VALUE_8 = NEW_TD_SUB_ACNT_CODE
          WHERE  DBTI_KEY_FIELD = P_DBTI_KEY_FIELD;
     ELSE
          UPDATE FP_DBTRG_INTERFACE
          SET    DBTI_VALUE_6 = TO_CHAR(OLD_TD_SEQ_NO),
                 DBTI_VALUE_7 = OLD_TD_MAIN_ACNT_CODE,
                 DBTI_VALUE_8 = OLD_TD_SUB_ACNT_CODE
          WHERE  DBTI_KEY_FIELD = P_DBTI_KEY_FIELD;
     END IF;
END IF;
CLOSE SEL_TH_INFO;
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
     IF NEW_TD_DOC_DUE_DT IS NULL THEN
        NEW_TD_DOC_DUE_DT := P_DOC_DUE_DT;
     END IF;
END IF;
IF TRG_MODE = 'I' THEN
   VALIDATE_CODE_COMBN;
   INCREASE_ACNT_BAL;
   INSERT_CUR_OS;
/* Below are added by Selva on 18/03/95 for Audit trail */
   IF P_PHS_KEY_NO IS NOT NULL THEN
      P_BAL_AMT := 0 ;
      IF NEW_TD_DOC_DRCR_FLAG = 'D' THEN
         P_TRAN_AMT := NEW_TD_DOC_AMT ;
      ELSE
         P_TRAN_AMT := NEW_TD_DOC_AMT * - 1;
      END IF;
      F_GET_LC_BAL (NEW_TD_COMP_CODE       ,
                    NEW_TD_ACNT_YEAR       ,
                    NEW_TD_MAIN_ACNT_CODE  ,
                    NEW_TD_SUB_ACNT_CODE   ,
                    NEW_TD_DIVN_CODE       ,
                    NEW_TD_DEPT_CODE       ,
                    NEW_TD_ANLY_CODE_1     ,
                    NEW_TD_ANLY_CODE_2     ,
                    P_CAL_YEAR             ,
                    P_CAL_MONTH            ,
                    P_BAL_AMT              ,
                    P_ERR_NO);
      IF SEQ_NO%ISOPEN THEN
         CLOSE SEQ_NO ;
      END IF ;
      OPEN SEQ_NO ;
      FETCH SEQ_NO INTO P_PDS_SEQ_NO ;
      IF SEQ_NO%NOTFOUND THEN
         P_PDS_SEQ_NO := 1 ;
      ELSE
         P_PDS_SEQ_NO := NVL(P_PDS_SEQ_NO,0) + 1 ;
      END IF ;
      INSERT INTO FS_PROC_DETAIL
             (PDS_KEY_NO, PDS_SEQ_NO, PDS_COMP_CODE, PDS_CAL_MONTH,
              PDS_CAL_YEAR, PDS_MAIN_ACNT_CODE, PDS_SUB_ACNT_CODE,
              PDS_DIVN_CODE, PDS_DEPT_CODE, PDS_HEAD_NO_1, PDS_ANLY_CODE_1,
              PDS_HEAD_NO_2, PDS_ANLY_CODE_2, PDS_BEFORE_BAL_AMT,
              PDS_AFTER_BAL_AMT, PDS_PROC_UID, PDS_PROC_DT, PDS_PROC_STATUS,
              PDS_CR_UID, PDS_CR_DT)
      VALUES (P_PHS_KEY_NO, P_PDS_SEQ_NO, NEW_TD_COMP_CODE, P_CAL_MONTH,
              P_CAL_YEAR, NEW_TD_MAIN_ACNT_CODE, NEW_TD_SUB_ACNT_CODE,
              NEW_TD_DIVN_CODE, NEW_TD_DEPT_CODE, 1, NEW_TD_ANLY_CODE_1,
              2, NEW_TD_ANLY_CODE_2, P_BAL_AMT - P_TRAN_AMT, P_BAL_AMT,
              P_CR_UID, SYSDATE, 'S', P_CR_UID, P_CR_DT) ;
   END IF ;
/* Above are added by Selva on 18/03/95 */
END IF;
IF TRG_MODE = 'U' THEN
   IF (OLD_TD_COMP_CODE != NEW_TD_COMP_CODE) OR
      (OLD_TD_TRAN_CODE != NEW_TD_TRAN_CODE) OR
      (OLD_TD_DOC_NO != NEW_TD_DOC_NO) OR
      (OLD_TD_SEQ_NO != NEW_TD_SEQ_NO) THEN
      RAISE_APPLICATION_ERROR(-20018, 'Primary key change');
   END IF;
   IF     (OLD_TD_MAIN_ACNT_CODE != NEW_TD_MAIN_ACNT_CODE) OR
          (NVL(OLD_TD_SUB_ACNT_CODE,'ZZZZZZZ') !=
           NVL(NEW_TD_SUB_ACNT_CODE,'ZZZZZZZ')) OR
          (NVL(OLD_TD_DOC_DRCR_FLAG,'0') !=
           NVL(NEW_TD_DOC_DRCR_FLAG,'0')) OR
          (NVL(OLD_TD_CURR_CODE,'ZZZZ') !=
           NVL(NEW_TD_CURR_CODE,'ZZZZ')) THEN
          RAISE_APPLICATION_ERROR(-20019, 'Significant codes change');
    ELSE
            IF  (NVL(OLD_TD_DIVN_CODE,'ZZZZZZZ') !=
                 NVL(NEW_TD_DIVN_CODE,'ZZZZZZZ')) OR
                (NVL(OLD_TD_DEPT_CODE,'ZZZZZZZ') !=
                 NVL(NEW_TD_DEPT_CODE,'ZZZZZZZ')) OR
                (NVL(OLD_TD_ANLY_CODE_1,'ZZZZZZZ') !=
                 NVL(NEW_TD_ANLY_CODE_1,'ZZZZZZZ')) OR
                (NVL(OLD_TD_ANLY_CODE_2,'ZZZZZZZ') !=
                 NVL(NEW_TD_ANLY_CODE_2,'ZZZZZZZ')) THEN
                    RAISE_APPLICATION_ERROR
                   (-20020, 'Significant codes change');
                    IF (NVL(OLD_TD_DOC_AMT,0) != NVL(NEW_TD_DOC_AMT,0)) OR
                       (NVL(OLD_TD_FC_AMT,0) != NVL(NEW_TD_FC_AMT,0))
                    THEN
                       RAISE_APPLICATION_ERROR(-20021, 'Amount change');
                    END IF;
            ELSE
                    IF (NVL(OLD_TD_DOC_DUE_DT,TO_DATE('01-JAN-1900','DD-MON-YYYY')) !=
                        NVL(NEW_TD_DOC_DUE_DT,TO_DATE('01-JAN-1900','DD-MON-YYYY'))) OR
                       (NVL(OLD_TD_DOC_REF,' ') !=
                        NVL(NEW_TD_DOC_REF,' ')) OR
                       (NVL(OLD_TD_OTH_REF,' ') !=
                        NVL(NEW_TD_OTH_REF,' ')) OR
                       (NVL(OLD_TD_ACTY_VALUE_CODE_1,'ZZZZZZZ') !=
                        NVL(NEW_TD_ACTY_VALUE_CODE_1,'ZZZZZZZ')) OR
                       (NVL(OLD_TD_ACTY_VALUE_CODE_2,'ZZZZZZZ') !=
                        NVL(NEW_TD_ACTY_VALUE_CODE_2,'ZZZZZZZ')) THEN
                           VALIDATE_CODE_COMBN;
                           UPDATE_CUR_OS_CODES;
                    END IF;
                    IF (NVL(OLD_TD_DOC_AMT,0) != NVL(NEW_TD_DOC_AMT,0)) OR
                       (NVL(OLD_TD_FC_AMT,0) != NVL(NEW_TD_FC_AMT,0))
                    THEN
                       RAISE_APPLICATION_ERROR(-20022, 'Amount change');
                    END IF;
            END IF;
    END IF;
END IF;
IF TRG_MODE = 'D' THEN
     RAISE_APPLICATION_ERROR(-20023, 'Cannot delete record');
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FT_PRV_TRANS_HEADER (
 OLD_TH_COMP_CODE          IN      VARCHAR2,
 OLD_TH_ACNT_YEAR          IN      NUMBER,
 OLD_TH_TRAN_CODE          IN      VARCHAR2,
 OLD_TH_DOC_NO             IN      NUMBER,
 OLD_TH_DOC_DT             IN      DATE,
 OLD_TH_DOC_CAL_YEAR       IN      NUMBER,
 OLD_TH_DOC_CAL_MONTH      IN      NUMBER,
 OLD_TH_DOC_REF            IN      VARCHAR2,
 OLD_TH_DOC_REF_DT         IN      DATE,
 OLD_TH_DOC_DUE_DT         IN      DATE,
 OLD_TH_DIVN_CODE          IN      VARCHAR2,
 OLD_TH_DEPT_CODE          IN      VARCHAR2,
 OLD_TH_CTL_TOTAL          IN      NUMBER,
 OLD_TH_DESC               IN      VARCHAR2,
 OLD_TH_ANNOTATION         IN      VARCHAR2,
 OLD_TH_CR_UID             IN      VARCHAR2,
 OLD_TH_CR_DT              IN      DATE,
 NEW_TH_COMP_CODE          IN OUT  VARCHAR2,
 NEW_TH_ACNT_YEAR          IN OUT  NUMBER,
 NEW_TH_TRAN_CODE          IN OUT  VARCHAR2,
 NEW_TH_DOC_NO             IN OUT  NUMBER,
 NEW_TH_DOC_DT             IN OUT  DATE,
 NEW_TH_DOC_CAL_YEAR       IN OUT  NUMBER,
 NEW_TH_DOC_CAL_MONTH      IN OUT  NUMBER,
 NEW_TH_DOC_REF            IN OUT  VARCHAR2,
 NEW_TH_DOC_REF_DT         IN OUT  DATE,
 NEW_TH_DOC_DUE_DT         IN OUT  DATE,
 NEW_TH_DIVN_CODE          IN OUT  VARCHAR2,
 NEW_TH_DEPT_CODE          IN OUT  VARCHAR2,
 NEW_TH_CTL_TOTAL          IN OUT  NUMBER,
 NEW_TH_DESC               IN OUT  VARCHAR2,
 NEW_TH_ANNOTATION         IN OUT  VARCHAR2,
 NEW_TH_CR_UID             IN OUT  VARCHAR2,
 NEW_TH_CR_DT              IN OUT  DATE,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2) AS
P_ERR_NO            NUMBER(6);
P_CAL_MONTH         NUMBER(2);
P_CAL_YEAR          NUMBER(4);
P_ACNT_YEAR         NUMBER(2);
P_CUR_ACNT_YEAR     NUMBER(2);
P_DBTI_KEY_FIELD    VARCHAR2(30);
PROCEDURE SETUP_DBTRG_INTERFACE IS
BEGIN
          IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
              P_DBTI_KEY_FIELD := OLD_TH_COMP_CODE ||
                                  TO_CHAR(OLD_TH_ACNT_YEAR) ||
                                  OLD_TH_TRAN_CODE ||
                                  TO_CHAR(OLD_TH_DOC_NO) ;
          ELSE
              P_DBTI_KEY_FIELD := NEW_TH_COMP_CODE ||
                                  TO_CHAR(NEW_TH_ACNT_YEAR) ||
                                  NEW_TH_TRAN_CODE ||
                                  TO_CHAR(NEW_TH_DOC_NO) ;
          END IF;
          DELETE FROM FP_DBTRG_INTERFACE
          WHERE  DBTI_KEY_FIELD = P_DBTI_KEY_FIELD;
          IF TRG_MODE = 'D' THEN
              INSERT INTO FP_DBTRG_INTERFACE
                     (DBTI_KEY_FIELD, DBTI_VALUE_1, DBTI_VALUE_2,
                      DBTI_VALUE_3, DBTI_VALUE_4, DBTI_VALUE_5)
              VALUES (P_DBTI_KEY_FIELD, TO_CHAR(OLD_TH_DOC_DT,'DD-MON-YYYY'),
                      TO_CHAR(OLD_TH_DOC_CAL_MONTH),
                      TO_CHAR(OLD_TH_DOC_CAL_YEAR),
                      TO_CHAR(OLD_TH_DOC_DUE_DT,'DD-MON-YYYY'),
                      TO_CHAR(OLD_TH_DOC_REF_DT,'DD-MON-YYYY'));
          ELSE
              INSERT INTO FP_DBTRG_INTERFACE
                     (DBTI_KEY_FIELD, DBTI_VALUE_1, DBTI_VALUE_2,
                      DBTI_VALUE_3, DBTI_VALUE_4, DBTI_VALUE_5,
                      DBTI_VALUE_10, DBTI_VALUE_11, DBTI_VALUE_12)
              VALUES (P_DBTI_KEY_FIELD, TO_CHAR(NEW_TH_DOC_DT,'DD-MON-YYYY'),
                      TO_CHAR(NEW_TH_DOC_CAL_MONTH),
                      TO_CHAR(NEW_TH_DOC_CAL_YEAR),
                      TO_CHAR(NEW_TH_DOC_DUE_DT,'DD-MON-YYYY'),
                      TO_CHAR(NEW_TH_DOC_REF_DT,'DD-MON-YYYY'),
                      TO_CHAR(NEW_TH_CTL_TOTAL),
                      NEW_TH_CR_UID,
                      TO_CHAR(NEW_TH_CR_DT,'DD-MON-YYYY'));
          END IF;
END;
PROCEDURE VALIDATE_NARRATION IS
BEGIN
    /* Validate the data type of various components of the Narration, if
        Structuring of the narration is used. */
    IF NVL(OLD_TH_DESC,' ') != NVL(NEW_TH_DESC,' ') THEN
        F_VAL_NARRATION(NEW_TH_TRAN_CODE, NEW_TH_DESC, P_ERR_NO);
        IF P_ERR_NO != 0 THEN
            RAISE_APPLICATION_ERROR(-20012, 'Invalid Narration');
        END IF;
    END IF;
END;
BEGIN
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
    P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(NEW_TH_COMP_CODE);
ELSE
    P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(OLD_TH_COMP_CODE);
END IF;
P_ERR_NO := 0;
IF TRG_MODE = 'I' THEN
    /* Initialise User id. and Date */
    IF NEW_TH_CR_UID IS NULL THEN
         NEW_TH_CR_UID := NVL(NEW_TH_CR_UID,'UNDEF');
    END IF;
    NEW_TH_CR_DT := SYSDATE;
    /* Validate if the document period corresponding to the document date
        is open. */
    F_VAL_OPCL(NEW_TH_COMP_CODE, NEW_TH_DOC_DT, P_ERR_NO,
               P_CAL_YEAR, P_CAL_MONTH, P_ACNT_YEAR);
    IF P_ERR_NO != 0 THEN
         RAISE_APPLICATION_ERROR(-20500 - P_ERR_NO, 'Period not open');
    END IF;
    NEW_TH_ACNT_YEAR := P_ACNT_YEAR;
    NEW_TH_DOC_CAL_MONTH := P_CAL_MONTH;
    NEW_TH_DOC_CAL_YEAR  := P_CAL_YEAR;
     VALIDATE_NARRATION;
     /* Transfer records from UNPOSTED tables to Permanent tables */
     SETUP_DBTRG_INTERFACE;
     IF P_ACNT_YEAR = P_CUR_ACNT_YEAR THEN
        INSERT INTO FT_CUR_TRANS_DETAIL
        SELECT *
        FROM   FT_UNPOSTED_TRANS_DETAIL
        WHERE  (TD_COMP_CODE = NEW_TH_COMP_CODE)
        AND    (TD_ACNT_YEAR = NEW_TH_ACNT_YEAR)
        AND    (TD_TRAN_CODE = NEW_TH_TRAN_CODE)
        AND    (TD_DOC_NO    = NEW_TH_DOC_NO);
    ELSE
        INSERT INTO FT_PRV_TRANS_DETAIL
        SELECT *
        FROM   FT_UNPOSTED_TRANS_DETAIL
        WHERE  (TD_COMP_CODE = NEW_TH_COMP_CODE)
        AND    (TD_ACNT_YEAR = NEW_TH_ACNT_YEAR)
        AND    (TD_TRAN_CODE    = NEW_TH_TRAN_CODE)
        AND    (TD_DOC_NO    = NEW_TH_DOC_NO);
    END IF;
END IF;
IF TRG_MODE = 'U' THEN
    /* Initialise User id. and Date */
    IF NEW_TH_CR_UID IS NULL THEN
         NEW_TH_CR_UID := NVL(OLD_TH_CR_UID,'UNDEF');
    END IF;
    NEW_TH_CR_DT := SYSDATE;
    IF OLD_TH_COMP_CODE != NEW_TH_COMP_CODE OR
       OLD_TH_TRAN_CODE != NEW_TH_TRAN_CODE OR
       OLD_TH_DOC_NO != NEW_TH_DOC_NO OR
       OLD_TH_ACNT_YEAR != NEW_TH_ACNT_YEAR THEN
       RAISE_APPLICATION_ERROR(-20013, 'Primary key change');
    END IF;
    IF OLD_TH_DOC_NO != NEW_TH_DOC_NO OR
       OLD_TH_DOC_DT != NEW_TH_DOC_DT  OR
       NVL(OLD_TH_DOC_DUE_DT,TO_DATE('01-JAN-1900','DD-MON-YYYY')) !=
       NVL(NEW_TH_DOC_DUE_DT,TO_DATE('01-JAN-1900','DD-MON-YYYY')) THEN
            RAISE_APPLICATION_ERROR
                  (-20014, 'Cannot update Document number or date');
    END IF;
    VALIDATE_NARRATION;
END IF;
IF TRG_MODE = 'D' THEN
RAISE_APPLICATION_ERROR(-20015, 'Cannot Delete record');
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FT_REVERSAL_JV (
 OLD_RJV_COMP_CODE         IN      VARCHAR2,
 OLD_RJV_ORGL_ACNT_YEAR    IN      NUMBER,
 OLD_RJV_ORGL_TRAN_CODE    IN      VARCHAR2,
 OLD_RJV_ORGL_DOC_NO       IN      NUMBER,
 OLD_RJV_REV_TRAN_CODE     IN      VARCHAR2,
 OLD_RJV_REV_DOC_NO        IN      NUMBER,
 OLD_RJV_REV_DOC_DT        IN      DATE,
 OLD_RJV_CR_UID            IN      VARCHAR2,
 OLD_RJV_CR_DT             IN      DATE,
 OLD_RJV_ORGL_DOC_DT       IN      DATE,
 OLD_RJV_REV_DESC          IN      VARCHAR2,
 NEW_RJV_COMP_CODE         IN OUT  VARCHAR2,
 NEW_RJV_ORGL_ACNT_YEAR    IN OUT  NUMBER,
 NEW_RJV_ORGL_TRAN_CODE    IN OUT  VARCHAR2,
 NEW_RJV_ORGL_DOC_NO       IN OUT  NUMBER,
 NEW_RJV_REV_TRAN_CODE     IN OUT  VARCHAR2,
 NEW_RJV_REV_DOC_NO        IN OUT  NUMBER,
 NEW_RJV_REV_DOC_DT        IN OUT  DATE,
 NEW_RJV_CR_UID            IN OUT  VARCHAR2,
 NEW_RJV_CR_DT             IN OUT  DATE,
 NEW_RJV_ORGL_DOC_DT       IN OUT  DATE,
 NEW_RJV_REV_DESC          IN OUT  VARCHAR2,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2) AS
P_ERR_NO            NUMBER(6);
P_CAL_MONTH         NUMBER(2);
P_CAL_YEAR          NUMBER(4);
P_ACNT_YEAR         NUMBER(2);
P_CUR_ACNT_YEAR     NUMBER(4);
P_PHS_KEY_NO        NUMBER(8) ;
BEGIN
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
    P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(NEW_RJV_COMP_CODE);
ELSE
    P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(OLD_RJV_COMP_CODE);
END IF;
P_ERR_NO := 0;
/* Validate if the document period corresponding to the document date
    is open. */
F_VAL_OPCL(NEW_RJV_COMP_CODE, NEW_RJV_REV_DOC_DT, P_ERR_NO,
           P_CAL_YEAR, P_CAL_MONTH, P_ACNT_YEAR);
IF P_ERR_NO != 0 THEN
     RAISE_APPLICATION_ERROR(-20500 - P_ERR_NO, 'Period not open');
END IF;
IF P_ACNT_YEAR = P_CUR_ACNT_YEAR THEN
   IF NEW_RJV_ORGL_ACNT_YEAR = P_CUR_ACNT_YEAR THEN
      /* Insert into audit trail header */
      SELECT SEQ_PHS_KEY_NO.NEXTVAL
      INTO   P_PHS_KEY_NO
      FROM   DUAL ;
      INSERT INTO FS_PROC_HEADER
             (PHS_KEY_NO, PHS_USER_ID, PHS_PROC_DT, PHS_PROC_STATUS,
              PHS_COMP_CODE, PHS_TRAN_FRM, PHS_TRAN_TO, PHS_TRAN_DT_FRM,
              PHS_TRAN_DT_TO, PHS_DOC_NO_FRM, PHS_DOC_NO_TO,
              PHS_USER_PATTERN, PHS_HEAD_REC_TOT, PHS_DETAIL_REC_TOT,
              PHS_AMT_TOT, PHS_ERROR_NAME, PHS_CR_UID, PHS_CR_DT)
      VALUES (P_PHS_KEY_NO, NEW_RJV_CR_UID, SYSDATE, '', NEW_RJV_COMP_CODE,
              NEW_RJV_REV_TRAN_CODE, NEW_RJV_REV_TRAN_CODE,
              NEW_RJV_REV_DOC_DT, NEW_RJV_REV_DOC_DT, NEW_RJV_REV_DOC_NO,
              NEW_RJV_REV_DOC_NO, NEW_RJV_CR_UID, '1', '', '', '',
              NEW_RJV_CR_UID, NEW_RJV_CR_DT) ;
/* If original and reversed JVs are from the current accounting year */
   INSERT INTO FT_CUR_TRANS_HEADER (TH_COMP_CODE, TH_ACNT_YEAR, TH_TRAN_CODE,
          TH_DOC_NO, TH_DOC_DT, TH_DOC_CAL_YEAR, TH_DOC_CAL_MONTH,
          TH_DOC_REF, TH_DOC_REF_DT, TH_DOC_DUE_DT, TH_DIVN_CODE,
          TH_DEPT_CODE, TH_CTL_TOTAL, TH_DESC, TH_ANNOTATION,
          TH_CR_UID, TH_CR_DT)
   SELECT TH_COMP_CODE, P_ACNT_YEAR, NEW_RJV_REV_TRAN_CODE,
          NEW_RJV_REV_DOC_NO, NEW_RJV_REV_DOC_DT, P_CAL_YEAR, P_CAL_MONTH,
          TH_DOC_REF, TH_DOC_REF_DT, NEW_RJV_REV_DOC_DT, TH_DIVN_CODE,
          TH_DEPT_CODE, P_PHS_KEY_NO,
          'REVERSAL OF ' || NEW_RJV_ORGL_TRAN_CODE || ' ' ||
          TO_CHAR(NEW_RJV_ORGL_DOC_NO) || ' DATED ' ||
          TO_CHAR(NEW_RJV_ORGL_DOC_DT,'DD/MM/YYYY') || ' ' || NEW_RJV_REV_DESC,
          TH_ANNOTATION,
          NEW_RJV_CR_UID, NEW_RJV_CR_DT
   FROM   FT_CUR_TRANS_HEADER
   WHERE  TH_COMP_CODE = NEW_RJV_COMP_CODE
   AND    TH_ACNT_YEAR = NEW_RJV_ORGL_ACNT_YEAR
   AND    TH_TRAN_CODE = NEW_RJV_ORGL_TRAN_CODE
   AND    TH_DOC_NO    = NEW_RJV_ORGL_DOC_NO;
   INSERT INTO FT_CUR_TRANS_DETAIL (TD_COMP_CODE, TD_ACNT_YEAR, TD_TRAN_CODE,
          TD_DOC_NO, TD_SEQ_NO, TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE,
          TD_DIVN_CODE, TD_DEPT_CODE, TD_HEAD_NO_1, TD_ANLY_CODE_1,
          TD_HEAD_NO_2, TD_ANLY_CODE_2, TD_CURR_CODE, TD_DOC_AMT,
          TD_DOC_DRCR_FLAG, TD_FC_AMT, TD_DOC_REF, TD_DOC_DUE_DT, TD_OTH_REF,
          TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2, TD_DESC,
          TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG, TD_MONTH_PRC_FLAG,
          TD_BILL_FC_AMT, TD_BILL_LC_AMT, TD_BILL_STATUS, TD_PYMT_APPR_FLAG,
          TD_CR_UID, TD_CR_DT)
   SELECT TD_COMP_CODE, P_ACNT_YEAR, NEW_RJV_REV_TRAN_CODE,
          NEW_RJV_REV_DOC_NO, TD_SEQ_NO, TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE,
          TD_DIVN_CODE, TD_DEPT_CODE, TD_HEAD_NO_1, TD_ANLY_CODE_1,
          TD_HEAD_NO_2, TD_ANLY_CODE_2, TD_CURR_CODE, TD_DOC_AMT,
          DECODE(TD_DOC_DRCR_FLAG,'D','C','D'), TD_FC_AMT, TD_DOC_REF,
          NEW_RJV_REV_DOC_DT, TD_OTH_REF,
          TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2, TD_DESC,
          TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG, TD_MONTH_PRC_FLAG,
          TD_BILL_FC_AMT, TD_BILL_LC_AMT, TD_BILL_STATUS, TD_PYMT_APPR_FLAG,
          NEW_RJV_CR_UID, NEW_RJV_CR_DT
   FROM   FT_CUR_TRANS_DETAIL
   WHERE  TD_COMP_CODE = NEW_RJV_COMP_CODE
   AND    TD_ACNT_YEAR = NEW_RJV_ORGL_ACNT_YEAR
   AND    TD_TRAN_CODE = NEW_RJV_ORGL_TRAN_CODE
   AND    TD_DOC_NO    = NEW_RJV_ORGL_DOC_NO;
   F_CHK_DRCR_SUM(NEW_RJV_COMP_CODE, P_ACNT_YEAR,
                  NEW_RJV_REV_TRAN_CODE, NEW_RJV_REV_DOC_NO);
   ELSE
/* If original is from prev and the reversed is from current accounting year */
   INSERT INTO FT_CUR_TRANS_HEADER (TH_COMP_CODE, TH_ACNT_YEAR, TH_TRAN_CODE,
          TH_DOC_NO, TH_DOC_DT, TH_DOC_CAL_YEAR, TH_DOC_CAL_MONTH,
          TH_DOC_REF, TH_DOC_REF_DT, TH_DOC_DUE_DT, TH_DIVN_CODE,
          TH_DEPT_CODE, TH_CTL_TOTAL, TH_DESC, TH_ANNOTATION,
          TH_CR_UID, TH_CR_DT)
   SELECT TH_COMP_CODE, P_ACNT_YEAR, NEW_RJV_REV_TRAN_CODE,
          NEW_RJV_REV_DOC_NO, NEW_RJV_REV_DOC_DT, P_CAL_YEAR, P_CAL_MONTH,
          TH_DOC_REF, TH_DOC_REF_DT, NEW_RJV_REV_DOC_DT, TH_DIVN_CODE,
          TH_DEPT_CODE, P_PHS_KEY_NO,
          'REVERSAL OF ' || NEW_RJV_ORGL_TRAN_CODE || ' ' ||
          TO_CHAR(NEW_RJV_ORGL_DOC_NO) || ' DATED ' ||
          TO_CHAR(NEW_RJV_ORGL_DOC_DT,'DD/MM/YYYY') || ' ' || NEW_RJV_REV_DESC,
          TH_ANNOTATION,
          NEW_RJV_CR_UID, NEW_RJV_CR_DT
   FROM   FT_PRV_TRANS_HEADER
   WHERE  TH_COMP_CODE = NEW_RJV_COMP_CODE
   AND    TH_ACNT_YEAR = NEW_RJV_ORGL_ACNT_YEAR
   AND    TH_TRAN_CODE = NEW_RJV_ORGL_TRAN_CODE
   AND    TH_DOC_NO    = NEW_RJV_ORGL_DOC_NO;
   INSERT INTO FT_CUR_TRANS_DETAIL (TD_COMP_CODE, TD_ACNT_YEAR, TD_TRAN_CODE,
          TD_DOC_NO, TD_SEQ_NO, TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE,
          TD_DIVN_CODE, TD_DEPT_CODE, TD_HEAD_NO_1, TD_ANLY_CODE_1,
          TD_HEAD_NO_2, TD_ANLY_CODE_2, TD_CURR_CODE, TD_DOC_AMT,
          TD_DOC_DRCR_FLAG, TD_FC_AMT, TD_DOC_REF, TD_DOC_DUE_DT, TD_OTH_REF,
          TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2, TD_DESC,
          TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG, TD_MONTH_PRC_FLAG,
          TD_BILL_FC_AMT, TD_BILL_LC_AMT, TD_BILL_STATUS, TD_PYMT_APPR_FLAG,
          TD_CR_UID, TD_CR_DT)
   SELECT TD_COMP_CODE, P_ACNT_YEAR, NEW_RJV_REV_TRAN_CODE,
          NEW_RJV_REV_DOC_NO, TD_SEQ_NO, TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE,
          TD_DIVN_CODE, TD_DEPT_CODE, TD_HEAD_NO_1, TD_ANLY_CODE_1,
          TD_HEAD_NO_2, TD_ANLY_CODE_2, TD_CURR_CODE, TD_DOC_AMT,
          DECODE(TD_DOC_DRCR_FLAG,'D','C','D'), TD_FC_AMT, TD_DOC_REF,
          NEW_RJV_REV_DOC_DT, TD_OTH_REF,
          TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2, TD_DESC,
          TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG, TD_MONTH_PRC_FLAG,
          TD_BILL_FC_AMT, TD_BILL_LC_AMT, TD_BILL_STATUS, TD_PYMT_APPR_FLAG,
          NEW_RJV_CR_UID, NEW_RJV_CR_DT
   FROM   FT_PRV_TRANS_DETAIL
   WHERE  TD_COMP_CODE = NEW_RJV_COMP_CODE
   AND    TD_ACNT_YEAR = NEW_RJV_ORGL_ACNT_YEAR
   AND    TD_TRAN_CODE = NEW_RJV_ORGL_TRAN_CODE
   AND    TD_DOC_NO    = NEW_RJV_ORGL_DOC_NO;
   F_CHK_DRCR_SUM(NEW_RJV_COMP_CODE, P_ACNT_YEAR,
                  NEW_RJV_REV_TRAN_CODE, NEW_RJV_REV_DOC_NO);
   END IF;
ELSE
   IF NEW_RJV_ORGL_ACNT_YEAR = P_CUR_ACNT_YEAR THEN
/* If original is from curr and the reversed is from prev accounting year */
   INSERT INTO FT_PRV_TRANS_HEADER (TH_COMP_CODE, TH_ACNT_YEAR, TH_TRAN_CODE,
          TH_DOC_NO, TH_DOC_DT, TH_DOC_CAL_YEAR, TH_DOC_CAL_MONTH,
          TH_DOC_REF, TH_DOC_REF_DT, TH_DOC_DUE_DT, TH_DIVN_CODE,
          TH_DEPT_CODE, TH_CTL_TOTAL, TH_DESC, TH_ANNOTATION,
          TH_CR_UID, TH_CR_DT)
   SELECT TH_COMP_CODE, P_ACNT_YEAR, NEW_RJV_REV_TRAN_CODE,
          NEW_RJV_REV_DOC_NO, NEW_RJV_REV_DOC_DT, P_CAL_YEAR, P_CAL_MONTH,
          TH_DOC_REF, TH_DOC_REF_DT, NEW_RJV_REV_DOC_DT, TH_DIVN_CODE,
          TH_DEPT_CODE, TH_CTL_TOTAL,
          'REVERSAL OF ' || NEW_RJV_ORGL_TRAN_CODE || ' ' ||
          TO_CHAR(NEW_RJV_ORGL_DOC_NO) || ' DATED ' ||
          TO_CHAR(NEW_RJV_ORGL_DOC_DT,'DD/MM/YYYY') || ' ' || NEW_RJV_REV_DESC,
          TH_ANNOTATION,
          NEW_RJV_CR_UID, NEW_RJV_CR_DT
   FROM   FT_CUR_TRANS_HEADER
   WHERE  TH_COMP_CODE = NEW_RJV_COMP_CODE
   AND    TH_ACNT_YEAR = NEW_RJV_ORGL_ACNT_YEAR
   AND    TH_TRAN_CODE = NEW_RJV_ORGL_TRAN_CODE
   AND    TH_DOC_NO    = NEW_RJV_ORGL_DOC_NO;
   INSERT INTO FT_PRV_TRANS_DETAIL (TD_COMP_CODE, TD_ACNT_YEAR, TD_TRAN_CODE,
          TD_DOC_NO, TD_SEQ_NO, TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE,
          TD_DIVN_CODE, TD_DEPT_CODE, TD_HEAD_NO_1, TD_ANLY_CODE_1,
          TD_HEAD_NO_2, TD_ANLY_CODE_2, TD_CURR_CODE, TD_DOC_AMT,
          TD_DOC_DRCR_FLAG, TD_FC_AMT, TD_DOC_REF, TD_DOC_DUE_DT, TD_OTH_REF,
          TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2, TD_DESC,
          TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG, TD_MONTH_PRC_FLAG,
          TD_BILL_FC_AMT, TD_BILL_LC_AMT, TD_BILL_STATUS, TD_PYMT_APPR_FLAG,
          TD_CR_UID, TD_CR_DT)
   SELECT TD_COMP_CODE, P_ACNT_YEAR, NEW_RJV_REV_TRAN_CODE,
          NEW_RJV_REV_DOC_NO, TD_SEQ_NO, TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE,
          TD_DIVN_CODE, TD_DEPT_CODE, TD_HEAD_NO_1, TD_ANLY_CODE_1,
          TD_HEAD_NO_2, TD_ANLY_CODE_2, TD_CURR_CODE, TD_DOC_AMT,
          DECODE(TD_DOC_DRCR_FLAG,'D','C','D'), TD_FC_AMT, TD_DOC_REF,
          NEW_RJV_REV_DOC_DT, TD_OTH_REF,
          TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2, TD_DESC,
          TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG, TD_MONTH_PRC_FLAG,
          TD_BILL_FC_AMT, TD_BILL_LC_AMT, TD_BILL_STATUS, TD_PYMT_APPR_FLAG,
          NEW_RJV_CR_UID, NEW_RJV_CR_DT
   FROM   FT_CUR_TRANS_DETAIL
   WHERE  TD_COMP_CODE = NEW_RJV_COMP_CODE
   AND    TD_ACNT_YEAR = NEW_RJV_ORGL_ACNT_YEAR
   AND    TD_TRAN_CODE = NEW_RJV_ORGL_TRAN_CODE
   AND    TD_DOC_NO    = NEW_RJV_ORGL_DOC_NO;
   F_CHK_DRCR_SUM(NEW_RJV_COMP_CODE, P_ACNT_YEAR,
                  NEW_RJV_REV_TRAN_CODE, NEW_RJV_REV_DOC_NO);
   ELSE
/* If original is from prev and the reversed is from prev accounting year */
   INSERT INTO FT_PRV_TRANS_HEADER (TH_COMP_CODE, TH_ACNT_YEAR, TH_TRAN_CODE,
          TH_DOC_NO, TH_DOC_DT, TH_DOC_CAL_YEAR, TH_DOC_CAL_MONTH,
          TH_DOC_REF, TH_DOC_REF_DT, TH_DOC_DUE_DT, TH_DIVN_CODE,
          TH_DEPT_CODE, TH_CTL_TOTAL, TH_DESC, TH_ANNOTATION,
          TH_CR_UID, TH_CR_DT)
   SELECT TH_COMP_CODE, P_ACNT_YEAR, NEW_RJV_REV_TRAN_CODE,
          NEW_RJV_REV_DOC_NO, NEW_RJV_REV_DOC_DT, P_CAL_YEAR, P_CAL_MONTH,
          TH_DOC_REF, TH_DOC_REF_DT, NEW_RJV_REV_DOC_DT, TH_DIVN_CODE,
          TH_DEPT_CODE, TH_CTL_TOTAL,
          'REVERSAL OF ' || NEW_RJV_ORGL_TRAN_CODE || ' ' ||
          TO_CHAR(NEW_RJV_ORGL_DOC_NO) || ' DATED ' ||
          TO_CHAR(NEW_RJV_ORGL_DOC_DT,'DD/MM/YYYY') || ' ' || NEW_RJV_REV_DESC,
          TH_ANNOTATION,
          NEW_RJV_CR_UID, NEW_RJV_CR_DT
   FROM   FT_PRV_TRANS_HEADER
   WHERE  TH_COMP_CODE = NEW_RJV_COMP_CODE
   AND    TH_ACNT_YEAR = NEW_RJV_ORGL_ACNT_YEAR
   AND    TH_TRAN_CODE = NEW_RJV_ORGL_TRAN_CODE
   AND    TH_DOC_NO    = NEW_RJV_ORGL_DOC_NO;
   INSERT INTO FT_PRV_TRANS_DETAIL (TD_COMP_CODE, TD_ACNT_YEAR, TD_TRAN_CODE,
          TD_DOC_NO, TD_SEQ_NO, TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE,
          TD_DIVN_CODE, TD_DEPT_CODE, TD_HEAD_NO_1, TD_ANLY_CODE_1,
          TD_HEAD_NO_2, TD_ANLY_CODE_2, TD_CURR_CODE, TD_DOC_AMT,
          TD_DOC_DRCR_FLAG, TD_FC_AMT, TD_DOC_REF, TD_DOC_DUE_DT, TD_OTH_REF,
          TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2, TD_DESC,
          TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG, TD_MONTH_PRC_FLAG,
          TD_BILL_FC_AMT, TD_BILL_LC_AMT, TD_BILL_STATUS, TD_PYMT_APPR_FLAG,
          TD_CR_UID, TD_CR_DT)
   SELECT TD_COMP_CODE, P_ACNT_YEAR, NEW_RJV_REV_TRAN_CODE,
          NEW_RJV_REV_DOC_NO, TD_SEQ_NO, TD_MAIN_ACNT_CODE, TD_SUB_ACNT_CODE,
          TD_DIVN_CODE, TD_DEPT_CODE, TD_HEAD_NO_1, TD_ANLY_CODE_1,
          TD_HEAD_NO_2, TD_ANLY_CODE_2, TD_CURR_CODE, TD_DOC_AMT,
          DECODE(TD_DOC_DRCR_FLAG,'D','C','D'), TD_FC_AMT, TD_DOC_REF,
          NEW_RJV_REV_DOC_DT, TD_OTH_REF,
          TD_ACTY_VALUE_CODE_1, TD_ACTY_VALUE_CODE_2, TD_DESC,
          TD_DBK_PRINT_FLAG, TD_LED_PRINT_FLAG, TD_MONTH_PRC_FLAG,
          TD_BILL_FC_AMT, TD_BILL_LC_AMT, TD_BILL_STATUS, TD_PYMT_APPR_FLAG,
          NEW_RJV_CR_UID, NEW_RJV_CR_DT
   FROM   FT_PRV_TRANS_DETAIL
   WHERE  TD_COMP_CODE = NEW_RJV_COMP_CODE
   AND    TD_ACNT_YEAR = NEW_RJV_ORGL_ACNT_YEAR
   AND    TD_TRAN_CODE = NEW_RJV_ORGL_TRAN_CODE
   AND    TD_DOC_NO    = NEW_RJV_ORGL_DOC_NO;
   F_CHK_DRCR_SUM(NEW_RJV_COMP_CODE, P_ACNT_YEAR,
                  NEW_RJV_REV_TRAN_CODE, NEW_RJV_REV_DOC_NO);
   END IF;
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FT_UNPOSTED_OS (
 OLD_OST_KEY_NO            IN      NUMBER,
 OLD_OST_COMP_CODE         IN      VARCHAR2,
 OLD_OST_TRAN_CODE         IN      VARCHAR2,
 OLD_OST_DOC_NO            IN      NUMBER,
 OLD_OST_SEQ_NO            IN      NUMBER,
 OLD_OST_ACNT_YEAR         IN      NUMBER,
 OLD_OST_DOC_DT            IN      DATE,
 OLD_OST_DOC_CAL_YEAR      IN      NUMBER,
 OLD_OST_DOC_CAL_MONTH     IN      NUMBER,
 OLD_OST_DUE_DT            IN      DATE,
 OLD_OST_MAIN_ACNT_CODE    IN      VARCHAR2,
 OLD_OST_SUB_ACNT_CODE     IN      VARCHAR2,
 OLD_OST_DIVN_CODE         IN      VARCHAR2,
 OLD_OST_DEPT_CODE         IN      VARCHAR2,
 OLD_OST_HEAD_NO_1         IN      NUMBER,
 OLD_OST_ANLY_CODE_1       IN      VARCHAR2,
 OLD_OST_HEAD_NO_2         IN      NUMBER,
 OLD_OST_ANLY_CODE_2       IN      VARCHAR2,
 OLD_OST_ACTY_CODE_1       IN      VARCHAR2,
 OLD_OST_ACTY_CODE_2       IN      VARCHAR2,
 OLD_OST_CURR_CODE         IN      VARCHAR2,
 OLD_OST_LC_AMT            IN      NUMBER,
 OLD_OST_FC_AMT            IN      NUMBER,
 OLD_OST_DRCR_FLAG         IN      VARCHAR2,
 OLD_OST_DOC_REF           IN      VARCHAR2,
 OLD_OST_DOC_REF_DT        IN      DATE,
 OLD_OST_OTH_REF           IN      VARCHAR2,
 OLD_OST_LC_ADJ_AMT        IN      NUMBER,
 OLD_OST_FC_ADJ_AMT        IN      NUMBER,
 OLD_OST_LC_PDC_AMT        IN      NUMBER,
 OLD_OST_FC_PDC_AMT        IN      NUMBER,
 OLD_OST_LC_UNP_AMT        IN      NUMBER,
 OLD_OST_FC_UNP_AMT        IN      NUMBER,
 OLD_OST_LC_UNDEP_AMT      IN      NUMBER,
 OLD_OST_FC_UNDEP_AMT      IN      NUMBER,
 OLD_OST_LC_ORG_AMT        IN      NUMBER,
 OLD_OST_FC_ORG_AMT        IN      NUMBER,
 OLD_OST_REF_KEY_NO        IN      NUMBER,
 OLD_OST_REF_COMP_CODE     IN      VARCHAR2,
 OLD_OST_REF_ACNT_YEAR     IN      NUMBER,
 OLD_OST_REF_TRAN_CODE     IN      VARCHAR2,
 OLD_OST_REF_SEQ_NO        IN      NUMBER,
 OLD_OST_REF_DOC_NO        IN      NUMBER,
 OLD_OST_REF_DOC_DT        IN      DATE,
 OLD_OST_REF_DOC_CAL_YEAR  IN      NUMBER,
 OLD_OST_REF_DOC_CAL_MONTH IN      NUMBER,
 OLD_OST_REF_DUE_DT        IN      DATE,
 OLD_OST_LAST_MATCH_DT     IN      DATE,
 OLD_OST_TYPE              IN      VARCHAR2,
 OLD_OST_CR_UID            IN      VARCHAR2,
 OLD_OST_CR_DT             IN      DATE,
 NEW_OST_KEY_NO            IN OUT  NUMBER,
 NEW_OST_COMP_CODE         IN OUT  VARCHAR2,
 NEW_OST_TRAN_CODE         IN OUT  VARCHAR2,
 NEW_OST_DOC_NO            IN OUT  NUMBER,
 NEW_OST_SEQ_NO            IN OUT  NUMBER,
 NEW_OST_ACNT_YEAR         IN OUT  NUMBER,
 NEW_OST_DOC_DT            IN OUT  DATE,
 NEW_OST_DOC_CAL_YEAR      IN OUT  NUMBER,
 NEW_OST_DOC_CAL_MONTH     IN OUT  NUMBER,
 NEW_OST_DUE_DT            IN OUT  DATE,
 NEW_OST_MAIN_ACNT_CODE    IN OUT  VARCHAR2,
 NEW_OST_SUB_ACNT_CODE     IN OUT  VARCHAR2,
 NEW_OST_DIVN_CODE         IN OUT  VARCHAR2,
 NEW_OST_DEPT_CODE         IN OUT  VARCHAR2,
 NEW_OST_HEAD_NO_1         IN OUT  NUMBER,
 NEW_OST_ANLY_CODE_1       IN OUT  VARCHAR2,
 NEW_OST_HEAD_NO_2         IN OUT  NUMBER,
 NEW_OST_ANLY_CODE_2       IN OUT  VARCHAR2,
 NEW_OST_ACTY_CODE_1       IN OUT  VARCHAR2,
 NEW_OST_ACTY_CODE_2       IN OUT  VARCHAR2,
 NEW_OST_CURR_CODE         IN OUT  VARCHAR2,
 NEW_OST_LC_AMT            IN OUT  NUMBER,
 NEW_OST_FC_AMT            IN OUT  NUMBER,
 NEW_OST_DRCR_FLAG         IN OUT  VARCHAR2,
 NEW_OST_DOC_REF           IN OUT  VARCHAR2,
 NEW_OST_DOC_REF_DT        IN OUT  DATE,
 NEW_OST_OTH_REF           IN OUT  VARCHAR2,
 NEW_OST_LC_ADJ_AMT        IN OUT  NUMBER,
 NEW_OST_FC_ADJ_AMT        IN OUT  NUMBER,
 NEW_OST_LC_PDC_AMT        IN OUT  NUMBER,
 NEW_OST_FC_PDC_AMT        IN OUT  NUMBER,
 NEW_OST_LC_UNP_AMT        IN OUT  NUMBER,
 NEW_OST_FC_UNP_AMT        IN OUT  NUMBER,
 NEW_OST_LC_UNDEP_AMT      IN OUT  NUMBER,
 NEW_OST_FC_UNDEP_AMT      IN OUT  NUMBER,
 NEW_OST_LC_ORG_AMT        IN OUT  NUMBER,
 NEW_OST_FC_ORG_AMT        IN OUT  NUMBER,
 NEW_OST_REF_KEY_NO        IN OUT  NUMBER,
 NEW_OST_REF_COMP_CODE     IN OUT  VARCHAR2,
 NEW_OST_REF_ACNT_YEAR     IN OUT  NUMBER,
 NEW_OST_REF_TRAN_CODE     IN OUT  VARCHAR2,
 NEW_OST_REF_SEQ_NO        IN OUT  NUMBER,
 NEW_OST_REF_DOC_NO        IN OUT  NUMBER,
 NEW_OST_REF_DOC_DT        IN OUT  DATE,
 NEW_OST_REF_DOC_CAL_YEAR  IN OUT  NUMBER,
 NEW_OST_REF_DOC_CAL_MONTH IN OUT  NUMBER,
 NEW_OST_REF_DUE_DT        IN OUT  DATE,
 NEW_OST_LAST_MATCH_DT     IN OUT  DATE,
 NEW_OST_TYPE              IN OUT  VARCHAR2,
 NEW_OST_CR_UID            IN OUT  VARCHAR2,
 NEW_OST_CR_DT             IN OUT  DATE,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2) AS
P_COMP_CODE         VARCHAR2(3);
P_ACNT_YEAR         NUMBER(2);
P_TRAN_CODE         VARCHAR2(3);
P_DOC_NO            NUMBER(6);
P_SEQ_NO            NUMBER(3);
P_MAIN_ACNT_CODE    VARCHAR2(6);
P_SUB_ACNT_CODE     VARCHAR2(6);
P_CUR_ACNT_YEAR     NUMBER(2);
P_COPY_DIVN_REF     VARCHAR2(1);
P_COPY_DEPT_REF     VARCHAR2(1);
P_COPY_ANLY_REF_1   VARCHAR2(1);
P_COPY_ANLY_REF_2   VARCHAR2(1);
P_OST_DIVN_CODE     VARCHAR2(6);
P_OST_DEPT_CODE     VARCHAR2(6);
P_OST_ANLY_CODE_1   VARCHAR2(6);
P_OST_ANLY_CODE_2   VARCHAR2(6);
P_OST_CURR_CODE     VARCHAR2(3);
P_PREV_OST_LC_AMT   NUMBER(14,3);
P_PREV_OST_FC_AMT   NUMBER(14,3);
P_DBTI_KEY_FIELD    VARCHAR2(30);
P_DUMMY             VARCHAR2(1);
P_OST_REF_COMP_CODE       VARCHAR2(3);
P_OST_REF_ACNT_YEAR       NUMBER(2);
P_OST_REF_TRAN_CODE       VARCHAR2(3);
P_OST_REF_SEQ_NO          NUMBER(3);
P_OST_REF_DOC_NO          NUMBER(6);
P_OST_REF_DOC_DT          DATE;
P_OST_REF_DOC_CAL_YEAR    NUMBER(4);
P_OST_REF_DOC_CAL_MONTH   NUMBER(2);
P_OST_REF_DUE_DT          DATE;
P_OST_LC_AMT              NUMBER(14,3);
P_OST_FC_AMT              NUMBER(14,3);
P_OST_LC_ORG_AMT          NUMBER(14,3);
P_OST_FC_ORG_AMT          NUMBER(14,3);
CURSOR SEL_CPREF IS
SELECT NVL(SUBSTR(PARA_VALUE,1,1),'N'), NVL(SUBSTR(PARA_VALUE,2,1),'N'),
       NVL(SUBSTR(PARA_VALUE,3,1),'N'), NVL(SUBSTR(PARA_VALUE,4,1),'N')
FROM   FP_PARAMETER
WHERE  PARA_ID = 'COPY.OS.REF';
CURSOR SEL_TD_INFO IS
SELECT 'X'
FROM   FP_DBTRG_INTERFACE
WHERE  DBTI_KEY_FIELD = P_DBTI_KEY_FIELD;
CURSOR SEL_TD IS
SELECT 'X'
FROM   FT_UNPOSTED_TRANS_DETAIL
WHERE  (TD_COMP_CODE = P_COMP_CODE)
AND    (TD_TRAN_CODE = P_TRAN_CODE)
AND    (TD_DOC_NO    = P_DOC_NO)
AND    (TD_ACNT_YEAR = P_ACNT_YEAR)
AND    (TD_SEQ_NO = P_SEQ_NO)
AND    (TD_MAIN_ACNT_CODE = P_MAIN_ACNT_CODE)
AND    (TD_SUB_ACNT_CODE = P_SUB_ACNT_CODE);
CURSOR SEL_OS IS
  SELECT OST_DIVN_CODE, OST_DEPT_CODE,
         OST_ANLY_CODE_1, OST_ANLY_CODE_2,
         OST_COMP_CODE, OST_ACNT_YEAR,
         OST_TRAN_CODE, OST_SEQ_NO,
         OST_DOC_NO, OST_DOC_DT,
         OST_DOC_CAL_YEAR, OST_DOC_CAL_MONTH,
         OST_DUE_DT, OST_CURR_CODE,
         OST_LC_AMT, OST_FC_AMT,
         OST_LC_ORG_AMT, OST_FC_ORG_AMT
  FROM   FT_OS
  WHERE  OST_KEY_NO = NEW_OST_REF_KEY_NO
  AND    NVL(OST_TYPE,'P') = 'P'
  FOR UPDATE OF OST_FC_UNP_AMT, OST_LC_UNP_AMT,
                OST_LAST_MATCH_DT;
BEGIN
DBMS_OUTPUT.PUT_LINE('5' || TRG_MODE) ;
IF SEL_CPREF%ISOPEN THEN
    CLOSE SEL_CPREF;
END IF;
OPEN SEL_CPREF;
FETCH SEL_CPREF INTO P_COPY_DIVN_REF, P_COPY_DEPT_REF,
                       P_COPY_ANLY_REF_1, P_COPY_ANLY_REF_2;
IF SEL_CPREF%NOTFOUND THEN
     P_COPY_DIVN_REF   := 'N';
     P_COPY_DEPT_REF   := 'N';
     P_COPY_ANLY_REF_1 := 'N';
     P_COPY_ANLY_REF_2 := 'N';
END IF;
CLOSE SEL_CPREF;
IF TRG_MODE = 'U' THEN
    IF OLD_OST_COMP_CODE != NEW_OST_COMP_CODE OR
       OLD_OST_TRAN_CODE != NEW_OST_TRAN_CODE OR
       OLD_OST_DOC_NO != NEW_OST_DOC_NO OR
       OLD_OST_SEQ_NO != NEW_OST_SEQ_NO OR
       OLD_OST_MAIN_ACNT_CODE != NEW_OST_MAIN_ACNT_CODE OR
       OLD_OST_SUB_ACNT_CODE != NEW_OST_SUB_ACNT_CODE  OR
       NVL(OLD_OST_REF_KEY_NO,0) != NVL(NEW_OST_REF_KEY_NO,0) OR
       NVL(OLD_OST_TYPE,'X') != NVL(NEW_OST_TYPE,'X') THEN
       RAISE_APPLICATION_ERROR(-20024,'Significant OS fields changed');
    END IF;
END IF;
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
     IF NVL(NEW_OST_TYPE,'R') != 'R' THEN
            RAISE_APPLICATION_ERROR(-20025,'Invalid Document Type');
     END IF;
     P_COMP_CODE      := NEW_OST_COMP_CODE;
     P_TRAN_CODE      := NEW_OST_TRAN_CODE;
     P_DOC_NO         := NEW_OST_DOC_NO;
     P_SEQ_NO         := NEW_OST_SEQ_NO;
     P_ACNT_YEAR      := NEW_OST_ACNT_YEAR;
     P_MAIN_ACNT_CODE := NEW_OST_MAIN_ACNT_CODE;
     P_SUB_ACNT_CODE  := NEW_OST_SUB_ACNT_CODE;
     P_DBTI_KEY_FIELD := P_COMP_CODE ||
                         TO_CHAR(P_ACNT_YEAR) ||
                         P_TRAN_CODE ||
                         TO_CHAR(P_DOC_NO);
     IF SEL_TD_INFO%ISOPEN THEN
         CLOSE SEL_TD_INFO;
     END IF;
     OPEN SEL_TD_INFO;
     FETCH SEL_TD_INFO INTO P_DUMMY;
     IF SEL_TD_INFO%NOTFOUND THEN
          IF SEL_TD%ISOPEN THEN
              CLOSE SEL_TD;
          END IF;
          OPEN SEL_TD;
          FETCH SEL_TD INTO P_DUMMY;
          IF SEL_TD%NOTFOUND THEN
               RAISE_APPLICATION_ERROR(-20026,'Transaction detail not found');
          END IF;
          CLOSE SEL_TD;
     END IF;
     CLOSE SEL_TD_INFO;
     IF NEW_OST_REF_KEY_NO IS NOT NULL THEN
          IF NEW_OST_TYPE IS NULL THEN
               RAISE_APPLICATION_ERROR
                         (-20027,'Doc Type and Ref Key no. inconsistent');
          END IF;
          IF NEW_OST_TYPE = 'P' THEN
               RAISE_APPLICATION_ERROR(-20028,'Cannot insert Parent entry');
          END IF;
          IF TRG_MODE = 'I' THEN
               P_PREV_OST_LC_AMT := 0;
               P_PREV_OST_FC_AMT := 0;
          ELSE
               P_PREV_OST_LC_AMT := OLD_OST_LC_AMT;
               P_PREV_OST_FC_AMT := OLD_OST_FC_AMT;
          END IF;
          IF SEL_OS%ISOPEN THEN
               CLOSE SEL_OS;
          END IF;
          OPEN SEL_OS;
          FETCH SEL_OS INTO P_OST_DIVN_CODE, P_OST_DEPT_CODE,
                       P_OST_ANLY_CODE_1, P_OST_ANLY_CODE_2,
                       P_OST_REF_COMP_CODE, P_OST_REF_ACNT_YEAR,
                       P_OST_REF_TRAN_CODE, P_OST_REF_SEQ_NO,
                       P_OST_REF_DOC_NO, P_OST_REF_DOC_DT,
                       P_OST_REF_DOC_CAL_YEAR, P_OST_REF_DOC_CAL_MONTH,
                       P_OST_REF_DUE_DT, P_OST_CURR_CODE,
                       P_OST_LC_AMT, P_OST_FC_AMT,
                       P_OST_LC_ORG_AMT, P_OST_FC_ORG_AMT;
          IF SEL_OS%NOTFOUND THEN
               RAISE_APPLICATION_ERROR(-20029,'Invalid OS Reference');
          END IF;
          IF NVL(P_OST_CURR_CODE,'XXXX') !=
             NVL(NEW_OST_CURR_CODE,'XXXX') THEN
               CLOSE SEL_OS;
               RAISE_APPLICATION_ERROR(-20030,'Currrency mismatch ');
          END IF;
          IF NVL(P_OST_LC_AMT,0) != NVL(P_OST_LC_ORG_AMT,0) OR
             NVL(P_OST_FC_AMT,0) != NVL(P_OST_FC_ORG_AMT,0) THEN
               CLOSE SEL_OS;
               RAISE_APPLICATION_ERROR
                    (-20031,'Doesnot qualify as parent entry ');
          END IF;
          UPDATE FT_OS
          SET    OST_LC_UNP_AMT     = NVL(OST_LC_UNP_AMT,0) +
                                      NVL(NEW_OST_LC_AMT,0) -
                                      NVL(P_PREV_OST_LC_AMT,0),
                 OST_FC_UNP_AMT     = NVL(OST_FC_UNP_AMT,0) +
                                      NVL(NEW_OST_FC_AMT,0) -
                                      NVL(P_PREV_OST_FC_AMT,0),
                 OST_LAST_MATCH_DT  =
                    GREATEST(NVL(OST_LAST_MATCH_DT,TO_DATE('01-JAN-1900','DD-MON-YYYY')),
                             NEW_OST_DOC_DT)
          WHERE  CURRENT OF SEL_OS;
          CLOSE SEL_OS;
          /* Make sure all reference information is consistent with key */
          NEW_OST_REF_COMP_CODE     := P_OST_REF_COMP_CODE;
          NEW_OST_REF_ACNT_YEAR     := P_OST_REF_ACNT_YEAR;
          NEW_OST_REF_TRAN_CODE     := P_OST_REF_TRAN_CODE;
          NEW_OST_REF_SEQ_NO        := P_OST_REF_SEQ_NO;
          NEW_OST_REF_DOC_NO        := P_OST_REF_DOC_NO;
          NEW_OST_REF_DOC_DT        := P_OST_REF_DOC_DT;
          NEW_OST_REF_DOC_CAL_YEAR  := P_OST_REF_DOC_CAL_YEAR;
          NEW_OST_REF_DOC_CAL_MONTH := P_OST_REF_DOC_CAL_MONTH;
          NEW_OST_REF_DUE_DT        := P_OST_REF_DUE_DT;
          /* Set Allocations of the current entry in line with the
             referenced entry, if so parameterised by the user */
          IF P_COPY_DIVN_REF = 'Y' THEN
               NEW_OST_DIVN_CODE := P_OST_DIVN_CODE;
          END IF;
          IF P_COPY_DEPT_REF = 'Y' THEN
               NEW_OST_DEPT_CODE := P_OST_DEPT_CODE;
          END IF;
          IF P_COPY_ANLY_REF_1 = 'Y' THEN
               NEW_OST_ANLY_CODE_1 := P_OST_ANLY_CODE_1;
          END IF;
          IF P_COPY_ANLY_REF_2 = 'Y' THEN
               NEW_OST_ANLY_CODE_2 := P_OST_ANLY_CODE_2;
          END IF;
     ELSE
          IF NEW_OST_TYPE IS NOT NULL THEN
               RAISE_APPLICATION_ERROR
                         (-20032,'Doc Type and Ref Key no. inconsistent');
          END IF;
          /* Make sure all reference information is null */
          NEW_OST_REF_COMP_CODE       := NULL;
          NEW_OST_REF_ACNT_YEAR       := NULL;
          NEW_OST_REF_TRAN_CODE       := NULL;
          NEW_OST_REF_SEQ_NO          := NULL;
          NEW_OST_REF_DOC_NO          := NULL;
          NEW_OST_REF_DOC_DT          := NULL;
          NEW_OST_REF_DOC_CAL_YEAR    := NULL;
          NEW_OST_REF_DOC_CAL_MONTH   := NULL;
          NEW_OST_REF_DUE_DT          := NULL;
     END IF;
END IF;
IF TRG_MODE = 'D' THEN
     IF OLD_OST_REF_KEY_NO IS NOT NULL THEN
          UPDATE FT_OS
          SET    OST_LC_UNP_AMT     = NVL(OST_LC_UNP_AMT,0) -
                                      NVL(OLD_OST_LC_AMT,0),
                 OST_FC_UNP_AMT     = NVL(OST_FC_UNP_AMT,0) -
                                      NVL(OLD_OST_FC_AMT,0)
          WHERE  OST_KEY_NO = OLD_OST_REF_KEY_NO;
     END IF;
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FT_UNPOSTED_TRANS_DETAIL (
 OLD_TD_COMP_CODE               IN      VARCHAR2,
 OLD_TD_ACNT_YEAR               IN      NUMBER,
 OLD_TD_TRAN_CODE               IN      VARCHAR2,
 OLD_TD_DOC_NO                  IN      NUMBER,
 OLD_TD_SEQ_NO                  IN      NUMBER,
 OLD_TD_MAIN_ACNT_CODE          IN      VARCHAR2,
 OLD_TD_SUB_ACNT_CODE           IN      VARCHAR2,
 OLD_TD_DIVN_CODE               IN      VARCHAR2,
 OLD_TD_DEPT_CODE               IN      VARCHAR2,
 OLD_TD_HEAD_NO_1               IN      NUMBER,
 OLD_TD_ANLY_CODE_1             IN      VARCHAR2,
 OLD_TD_HEAD_NO_2               IN      NUMBER,
 OLD_TD_ANLY_CODE_2             IN      VARCHAR2,
 OLD_TD_CURR_CODE               IN      VARCHAR2,
 OLD_TD_DOC_AMT                 IN      NUMBER,
 OLD_TD_DOC_DRCR_FLAG           IN      VARCHAR2,
 OLD_TD_FC_AMT                  IN      NUMBER,
 OLD_TD_DOC_REF                 IN      VARCHAR2,
 OLD_TD_DOC_DUE_DT              IN      DATE,
 OLD_TD_OTH_REF                 IN      VARCHAR2,
 OLD_TD_ACTY_VALUE_CODE_1       IN      VARCHAR2,
 OLD_TD_ACTY_VALUE_CODE_2       IN      VARCHAR2,
 OLD_TD_DESC                    IN      VARCHAR2,
 OLD_TD_DBK_PRINT_FLAG          IN      VARCHAR2,
 OLD_TD_LED_PRINT_FLAG          IN      VARCHAR2,
 OLD_TD_MONTH_PRC_FLAG          IN      VARCHAR2,
 OLD_TD_BILL_FC_AMT             IN      NUMBER,
 OLD_TD_BILL_LC_AMT             IN      NUMBER,
 OLD_TD_BILL_STATUS             IN      VARCHAR2,
 OLD_TD_PYMT_APPR_FLAG          IN      VARCHAR2,
 OLD_TD_CR_UID                  IN      VARCHAR2,
 OLD_TD_CR_DT                   IN      DATE,
 OLD_TD_PYMT_LAST_APPR_FC_AMT   IN      NUMBER,
 OLD_TD_PYMT_LAST_APPR_LC_AMT   IN      NUMBER,
 OLD_TD_PYMT_LAST_APPR_BANK     IN      VARCHAR2,
 NEW_TD_COMP_CODE               IN OUT  VARCHAR2,
 NEW_TD_ACNT_YEAR               IN OUT  NUMBER,
 NEW_TD_TRAN_CODE               IN OUT  VARCHAR2,
 NEW_TD_DOC_NO                  IN OUT  NUMBER,
 NEW_TD_SEQ_NO                  IN OUT  NUMBER,
 NEW_TD_MAIN_ACNT_CODE          IN OUT  VARCHAR2,
 NEW_TD_SUB_ACNT_CODE           IN OUT  VARCHAR2,
 NEW_TD_DIVN_CODE               IN OUT  VARCHAR2,
 NEW_TD_DEPT_CODE               IN OUT  VARCHAR2,
 NEW_TD_HEAD_NO_1               IN OUT  NUMBER,
 NEW_TD_ANLY_CODE_1             IN OUT  VARCHAR2,
 NEW_TD_HEAD_NO_2               IN OUT  NUMBER,
 NEW_TD_ANLY_CODE_2             IN OUT  VARCHAR2,
 NEW_TD_CURR_CODE               IN OUT  VARCHAR2,
 NEW_TD_DOC_AMT                 IN OUT  NUMBER,
 NEW_TD_DOC_DRCR_FLAG           IN OUT  VARCHAR2,
 NEW_TD_FC_AMT                  IN OUT  NUMBER,
 NEW_TD_DOC_REF                 IN OUT  VARCHAR2,
 NEW_TD_DOC_DUE_DT              IN OUT  DATE,
 NEW_TD_OTH_REF                 IN OUT  VARCHAR2,
 NEW_TD_ACTY_VALUE_CODE_1       IN OUT  VARCHAR2,
 NEW_TD_ACTY_VALUE_CODE_2       IN OUT  VARCHAR2,
 NEW_TD_DESC                    IN OUT  VARCHAR2,
 NEW_TD_DBK_PRINT_FLAG          IN OUT  VARCHAR2,
 NEW_TD_LED_PRINT_FLAG          IN OUT  VARCHAR2,
 NEW_TD_MONTH_PRC_FLAG          IN OUT  VARCHAR2,
 NEW_TD_BILL_FC_AMT             IN OUT  NUMBER,
 NEW_TD_BILL_LC_AMT             IN OUT  NUMBER,
 NEW_TD_BILL_STATUS             IN OUT  VARCHAR2,
 NEW_TD_PYMT_APPR_FLAG          IN OUT  VARCHAR2,
 NEW_TD_CR_UID                  IN OUT  VARCHAR2,
 NEW_TD_CR_DT                   IN OUT  DATE,
 NEW_TD_PYMT_LAST_APPR_FC_AMT   IN OUT  NUMBER,
 NEW_TD_PYMT_LAST_APPR_LC_AMT   IN OUT  NUMBER,
 NEW_TD_PYMT_LAST_APPR_BANK     IN OUT  VARCHAR2,
 TRG_MODE                       IN OUT  VARCHAR2,
 TRG_ERR_NO                     OUT  NUMBER,
 TRG_ERR_MSG                    OUT  VARCHAR2) AS
P_COMP_CODE         VARCHAR2(3);
P_ACNT_YEAR         NUMBER(2);
P_TRAN_CODE         VARCHAR2(3);
P_DOC_NO            NUMBER(6);
P_CUR_ACNT_YEAR     NUMBER(2);
P_CAL_MONTH         NUMBER(2);
P_CAL_YEAR          NUMBER(4);
P_DOC_DT            DATE;
P_DOC_DUE_DT        DATE;
P_DOC_REF_DT        DATE;
P_TD_MAIN_ACNT_CODE VARCHAR2(6);
P_OPEN_ENTRY_FLAG   VARCHAR2(1);
P_DBTI_KEY_FIELD    VARCHAR2(30);
P_ERR_NO            NUMBER(6);
CURSOR SEL_HEAD IS
       SELECT TH_DOC_DT, TH_DOC_CAL_MONTH, TH_DOC_CAL_YEAR, TH_DOC_DUE_DT,
              TH_DOC_REF_DT
       FROM   FT_UNPOSTED_TRANS_HEADER
       WHERE  TH_COMP_CODE = P_COMP_CODE
       AND    TH_ACNT_YEAR = P_ACNT_YEAR
       AND    TH_TRAN_CODE = P_TRAN_CODE
       AND    TH_DOC_NO    = P_DOC_NO;
CURSOR SEL_HEAD_INFO IS
       SELECT TO_DATE(DBTI_VALUE_1,'DD-MON-YYYY'), TO_NUMBER(DBTI_VALUE_2),
              TO_NUMBER(DBTI_VALUE_3), TO_DATE(DBTI_VALUE_4,'DD-MON-YYYY'),
              TO_DATE(DBTI_VALUE_5,'DD-MON-YYYY')
       FROM   FP_DBTRG_INTERFACE
       WHERE  DBTI_KEY_FIELD = P_DBTI_KEY_FIELD;
CURSOR SEL_MAIN IS
       SELECT MAIN_OPEN_ENTRY_FLAG
       FROM   FM_MAIN_ACCOUNT
       WHERE  MAIN_ACNT_CODE = P_TD_MAIN_ACNT_CODE;
/* Declare Local procedures for repetitive use within the trigger */
PROCEDURE VALIDATE_CODE_COMBN IS
P_KEY    NUMBER(8);
BEGIN
F_VAL_COMB (NEW_TD_COMP_CODE, NEW_TD_DIVN_CODE, NEW_TD_DEPT_CODE,
            NEW_TD_MAIN_ACNT_CODE, NEW_TD_SUB_ACNT_CODE,
            NEW_TD_ANLY_CODE_1, NEW_TD_ANLY_CODE_2, P_ERR_NO, P_KEY);
IF P_ERR_NO != 0 THEN
     RAISE_APPLICATION_ERROR(-20009, 'Invalid Code combination');
END IF;
END;
PROCEDURE INSERT_UNPOSTED_OS IS
P_OST_KEY_NO     NUMBER(8);
BEGIN
   P_TD_MAIN_ACNT_CODE := NEW_TD_MAIN_ACNT_CODE;
   IF SEL_MAIN%ISOPEN THEN
        CLOSE SEL_MAIN;
   END IF;
   OPEN SEL_MAIN;
   FETCH SEL_MAIN INTO P_OPEN_ENTRY_FLAG;
   IF SEL_MAIN%FOUND THEN
        IF P_OPEN_ENTRY_FLAG = 'Y' THEN
           F_OS(P_OST_KEY_NO);
           INSERT INTO FT_UNPOSTED_OS
               (OST_KEY_NO, OST_COMP_CODE, OST_TRAN_CODE, OST_DOC_NO,
                OST_SEQ_NO, OST_ACNT_YEAR, OST_DOC_DT, OST_DOC_CAL_YEAR,
                OST_DOC_CAL_MONTH, OST_DUE_DT, OST_MAIN_ACNT_CODE,
                OST_SUB_ACNT_CODE, OST_DIVN_CODE, OST_DEPT_CODE,
                OST_HEAD_NO_1, OST_ANLY_CODE_1, OST_HEAD_NO_2,
                OST_ANLY_CODE_2, OST_ACTY_CODE_1, OST_ACTY_CODE_2,
                OST_CURR_CODE, OST_LC_AMT, OST_FC_AMT, OST_DRCR_FLAG,
                OST_DOC_REF, OST_DOC_REF_DT, OST_OTH_REF,
                OST_LC_ORG_AMT, OST_FC_ORG_AMT, OST_TYPE,
                OST_CR_UID, OST_CR_DT)
           VALUES
               (P_OST_KEY_NO, NEW_TD_COMP_CODE, NEW_TD_TRAN_CODE,
                NEW_TD_DOC_NO, NEW_TD_SEQ_NO, NEW_TD_ACNT_YEAR,
                P_DOC_DT, P_CAL_YEAR, P_CAL_MONTH, NEW_TD_DOC_DUE_DT,
                NEW_TD_MAIN_ACNT_CODE, NEW_TD_SUB_ACNT_CODE,
                NEW_TD_DIVN_CODE, NEW_TD_DEPT_CODE, NEW_TD_HEAD_NO_1,
                NEW_TD_ANLY_CODE_1, NEW_TD_HEAD_NO_2, NEW_TD_ANLY_CODE_2,
                NEW_TD_ACTY_VALUE_CODE_1, NEW_TD_ACTY_VALUE_CODE_2,
                NEW_TD_CURR_CODE, NEW_TD_DOC_AMT, NEW_TD_FC_AMT,
                NEW_TD_DOC_DRCR_FLAG, NEW_TD_DOC_REF, P_DOC_REF_DT,
                NEW_TD_OTH_REF, NEW_TD_DOC_AMT, NEW_TD_FC_AMT, NULL,
                NEW_TD_CR_UID, NEW_TD_CR_DT);
        END IF;
   END IF;
   CLOSE SEL_MAIN;
END;
PROCEDURE DELETE_UNPOSTED_OS IS
BEGIN
   P_TD_MAIN_ACNT_CODE := OLD_TD_MAIN_ACNT_CODE;
   IF SEL_MAIN%ISOPEN THEN
        CLOSE SEL_MAIN;
   END IF;
   OPEN SEL_MAIN;
   FETCH SEL_MAIN INTO P_OPEN_ENTRY_FLAG;
   IF SEL_MAIN%FOUND THEN
        IF P_OPEN_ENTRY_FLAG = 'Y' THEN
             DELETE FROM FT_UNPOSTED_OS
             WHERE  OST_COMP_CODE = OLD_TD_COMP_CODE
             AND    OST_ACNT_YEAR = OLD_TD_ACNT_YEAR
             AND    OST_TRAN_CODE = OLD_TD_TRAN_CODE
             AND    OST_DOC_NO    = OLD_TD_DOC_NO
             AND    OST_SEQ_NO    = OLD_TD_SEQ_NO;
        END IF;
   END IF;
   CLOSE SEL_MAIN;
END;
PROCEDURE UPDATE_UNPOSTED_OS_CODES IS
BEGIN
     UPDATE FT_UNPOSTED_OS
     SET    OST_DIVN_CODE   = NEW_TD_DIVN_CODE,
            OST_DEPT_CODE   = NEW_TD_DEPT_CODE,
            OST_ANLY_CODE_1 = NEW_TD_ANLY_CODE_1,
            OST_ANLY_CODE_2 = NEW_TD_ANLY_CODE_2,
            OST_ACTY_CODE_1 = NEW_TD_ACTY_VALUE_CODE_1,
            OST_ACTY_CODE_2 = NEW_TD_ACTY_VALUE_CODE_2,
            OST_DOC_REF     = NEW_TD_DOC_REF,
            OST_OTH_REF     = NEW_TD_OTH_REF,
            OST_DUE_DT      = NEW_TD_DOC_DUE_DT
     WHERE  (OST_COMP_CODE = OLD_TD_COMP_CODE)
     AND    (OST_ACNT_YEAR = OLD_TD_ACNT_YEAR)
     AND    (OST_TRAN_CODE = OLD_TD_TRAN_CODE)
     AND    (OST_DOC_NO    = OLD_TD_DOC_NO)
     AND    (OST_SEQ_NO    = OLD_TD_SEQ_NO);
END;
PROCEDURE UPDATE_UNPOSTED_OS_AMT IS
P_UNMAT_OST_KEY_NO     NUMBER(8);
P_UNMAT_OST_LC_AMT     NUMBER(14,3);
P_UNMAT_OST_FC_AMT     NUMBER(14,3);
P_DIFF_LC_AMT          NUMBER(14,3);
P_DIFF_FC_AMT          NUMBER(14,3);
CURSOR SEL_OS IS
       SELECT OST_KEY_NO, OST_LC_AMT, OST_FC_AMT
       FROM   FT_UNPOSTED_OS
       WHERE  (OST_COMP_CODE = OLD_TD_COMP_CODE)
       AND    (OST_ACNT_YEAR = OLD_TD_ACNT_YEAR)
       AND    (OST_TRAN_CODE = OLD_TD_TRAN_CODE)
       AND    (OST_DOC_NO    = OLD_TD_DOC_NO)
       AND    (OST_SEQ_NO    = OLD_TD_SEQ_NO)
       AND    (OST_TYPE IS NULL);
BEGIN
     P_DIFF_LC_AMT := NVL(NEW_TD_DOC_AMT,0) - NVL(OLD_TD_DOC_AMT,0);
     P_DIFF_FC_AMT := NVL(NEW_TD_FC_AMT,0) - NVL(OLD_TD_FC_AMT,0);
     IF SEL_OS%ISOPEN THEN
        CLOSE SEL_OS;
     END IF;
     OPEN SEL_OS;
     FETCH SEL_OS INTO P_UNMAT_OST_KEY_NO,
                       P_UNMAT_OST_LC_AMT, P_UNMAT_OST_FC_AMT;
     IF SEL_OS%NOTFOUND THEN
          DELETE_UNPOSTED_OS;
          INSERT_UNPOSTED_OS;
     ELSE
          IF (NVL(P_UNMAT_OST_LC_AMT,0) + NVL(P_DIFF_LC_AMT,0) >= 0) AND
             (NVL(P_UNMAT_OST_FC_AMT,0) + NVL(P_DIFF_FC_AMT,0) >= 0) THEN
             IF (NVL(P_UNMAT_OST_LC_AMT,0) + NVL(P_DIFF_LC_AMT,0) = 0) AND
                (NVL(P_UNMAT_OST_FC_AMT,0) + NVL(P_DIFF_FC_AMT,0) = 0) THEN
                 DELETE FROM FT_UNPOSTED_OS
                 WHERE  OST_KEY_NO = P_UNMAT_OST_KEY_NO
                 AND    NVL(OST_LC_AMT,0) + NVL(P_DIFF_LC_AMT,0) = 0
                 AND    NVL(OST_FC_AMT,0) + NVL(P_DIFF_FC_AMT,0) = 0;
             ELSE
                 UPDATE FT_UNPOSTED_OS
                 SET    OST_LC_AMT = NVL(OST_LC_AMT,0) + NVL(P_DIFF_LC_AMT,0),
                        OST_FC_AMT = NVL(OST_FC_AMT,0) + NVL(P_DIFF_FC_AMT,0)
                 WHERE  OST_KEY_NO = P_UNMAT_OST_KEY_NO;
             END IF;
             UPDATE FT_UNPOSTED_OS
             SET    OST_LC_ORG_AMT = NEW_TD_DOC_AMT,
                    OST_FC_ORG_AMT = NEW_TD_FC_AMT
             WHERE  (OST_COMP_CODE = OLD_TD_COMP_CODE)
             AND    (OST_ACNT_YEAR = OLD_TD_ACNT_YEAR)
             AND    (OST_TRAN_CODE = OLD_TD_TRAN_CODE)
             AND    (OST_DOC_NO    = OLD_TD_DOC_NO)
             AND    (OST_SEQ_NO    = OLD_TD_SEQ_NO);
          ELSE
             DELETE_UNPOSTED_OS;
             INSERT_UNPOSTED_OS;
          END IF;
     END IF;
     CLOSE SEL_OS;
END;
PROCEDURE REDUCE_ACNT_BAL IS
BEGIN
   F_UPD_ACNT_BAL (OLD_TD_COMP_CODE, P_ACNT_YEAR,
                   OLD_TD_MAIN_ACNT_CODE, OLD_TD_SUB_ACNT_CODE,
                   OLD_TD_DIVN_CODE, OLD_TD_DEPT_CODE,
                   OLD_TD_ANLY_CODE_1, OLD_TD_ANLY_CODE_2,
                   P_CAL_YEAR, P_CAL_MONTH, OLD_TD_CURR_CODE,
                   OLD_TD_DOC_AMT, OLD_TD_FC_AMT, OLD_TD_DOC_DRCR_FLAG,
                   'U', 'S', OLD_TD_CR_UID, P_ERR_NO);
   IF P_ERR_NO != 0 THEN
      RAISE_APPLICATION_ERROR(-20500 - P_ERR_NO, 'Error at balance updation');
   END IF;
END;
PROCEDURE INCREASE_ACNT_BAL IS
BEGIN
   F_UPD_ACNT_BAL (NEW_TD_COMP_CODE, P_ACNT_YEAR,
                   NEW_TD_MAIN_ACNT_CODE, NEW_TD_SUB_ACNT_CODE,
                   NEW_TD_DIVN_CODE, NEW_TD_DEPT_CODE,
                   NEW_TD_ANLY_CODE_1, NEW_TD_ANLY_CODE_2,
                   P_CAL_YEAR, P_CAL_MONTH, NEW_TD_CURR_CODE,
                   NEW_TD_DOC_AMT, NEW_TD_FC_AMT, NEW_TD_DOC_DRCR_FLAG,
                   'U', 'A', NEW_TD_CR_UID, P_ERR_NO);
   IF P_ERR_NO != 0 THEN
      RAISE_APPLICATION_ERROR(-20500 - P_ERR_NO, 'Error at balance updation');
   END IF;
END;
PROCEDURE UPDATE_ACNT_BAL IS
P_DIFF_LC_AMT        NUMBER(14,3);
P_DIFF_FC_AMT        NUMBER(14,3);
BEGIN
     P_DIFF_LC_AMT := NVL(OLD_TD_DOC_AMT,0) - NVL(NEW_TD_DOC_AMT,0);
     P_DIFF_FC_AMT := NVL(OLD_TD_FC_AMT,0) - NVL(NEW_TD_FC_AMT,0);
     F_UPD_ACNT_BAL (NEW_TD_COMP_CODE, P_ACNT_YEAR,
                     NEW_TD_MAIN_ACNT_CODE, NEW_TD_SUB_ACNT_CODE,
                     NEW_TD_DIVN_CODE, NEW_TD_DEPT_CODE,
                     NEW_TD_ANLY_CODE_1, NEW_TD_ANLY_CODE_2,
                     P_CAL_YEAR, P_CAL_MONTH, NEW_TD_CURR_CODE,
                     P_DIFF_LC_AMT, P_DIFF_FC_AMT, NEW_TD_DOC_DRCR_FLAG,
                     'U', 'S', NEW_TD_CR_UID, P_ERR_NO);
     IF P_ERR_NO != 0 THEN
        RAISE_APPLICATION_ERROR(-20500 - P_ERR_NO,
                  'Error at balance updation');
     END IF;
END;
BEGIN
DBMS_OUTPUT.PUT_LINE('6' || TRG_MODE) ;
/* Main procedure */
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
    P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(NEW_TD_COMP_CODE);
ELSE
    P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(OLD_TD_COMP_CODE);
END IF;
P_ERR_NO := 0;
IF TRG_MODE = 'U' THEN
   NEW_TD_ACNT_YEAR := OLD_TD_ACNT_YEAR;
END IF;
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
    P_COMP_CODE := NEW_TD_COMP_CODE;
    P_TRAN_CODE := NEW_TD_TRAN_CODE;
    P_ACNT_YEAR := NEW_TD_ACNT_YEAR;
    P_DOC_NO := NEW_TD_DOC_NO;
ELSE
    P_COMP_CODE := OLD_TD_COMP_CODE;
    P_TRAN_CODE := OLD_TD_TRAN_CODE;
    P_ACNT_YEAR := OLD_TD_ACNT_YEAR;
    P_DOC_NO := OLD_TD_DOC_NO;
END IF;
P_DBTI_KEY_FIELD := P_COMP_CODE ||
                    TO_CHAR(P_ACNT_YEAR) ||
                    P_TRAN_CODE ||
                    TO_CHAR(P_DOC_NO);
IF SEL_HEAD_INFO%ISOPEN THEN
    CLOSE SEL_HEAD_INFO;
END IF;
OPEN SEL_HEAD_INFO;
FETCH SEL_HEAD_INFO INTO P_DOC_DT, P_CAL_MONTH, P_CAL_YEAR,
                    P_DOC_DUE_DT, P_DOC_REF_DT;
IF SEL_HEAD_INFO%NOTFOUND THEN
     IF SEL_HEAD%ISOPEN THEN
         CLOSE SEL_HEAD;
     END IF;
     OPEN SEL_HEAD;
     FETCH SEL_HEAD INTO P_DOC_DT, P_CAL_MONTH, P_CAL_YEAR,
                         P_DOC_DUE_DT, P_DOC_REF_DT;
     IF SEL_HEAD%NOTFOUND THEN
          RAISE_APPLICATION_ERROR(-20010,'Header not found');
     END IF;
     CLOSE SEL_HEAD;
ELSE
     /* Used for verification in DB triggers corresponding to
        FT_UNPOSTED_OS and FT_OS tables */
     IF TRG_MODE = 'I' OR TRG_MODE = 'U'  THEN
          UPDATE FP_DBTRG_INTERFACE
          SET    DBTI_VALUE_6 = TO_CHAR(NEW_TD_SEQ_NO),
                 DBTI_VALUE_7 = NEW_TD_MAIN_ACNT_CODE,
                 DBTI_VALUE_8 = NEW_TD_SUB_ACNT_CODE
          WHERE  DBTI_KEY_FIELD = P_DBTI_KEY_FIELD;
     ELSE
          UPDATE FP_DBTRG_INTERFACE
          SET    DBTI_VALUE_6 = TO_CHAR(OLD_TD_SEQ_NO),
                 DBTI_VALUE_7 = OLD_TD_MAIN_ACNT_CODE,
                 DBTI_VALUE_8 = OLD_TD_SUB_ACNT_CODE
          WHERE  DBTI_KEY_FIELD = P_DBTI_KEY_FIELD;
     END IF;
END IF;
CLOSE SEL_HEAD_INFO;
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
    IF NEW_TD_DOC_DUE_DT IS NULL THEN
       NEW_TD_DOC_DUE_DT := P_DOC_DUE_DT;
    END IF;
END IF;
IF TRG_MODE = 'I' THEN
   VALIDATE_CODE_COMBN;
   INCREASE_ACNT_BAL;
   INSERT_UNPOSTED_OS;
END IF;
IF TRG_MODE = 'U' THEN
   IF (OLD_TD_COMP_CODE != NEW_TD_COMP_CODE) OR
      (OLD_TD_TRAN_CODE != NEW_TD_TRAN_CODE) OR
      (OLD_TD_DOC_NO != NEW_TD_DOC_NO) OR
      (OLD_TD_SEQ_NO != NEW_TD_SEQ_NO) THEN
      RAISE_APPLICATION_ERROR(-20011, 'Primary key change');
   END IF;
   IF     (OLD_TD_MAIN_ACNT_CODE != NEW_TD_MAIN_ACNT_CODE) OR
          (NVL(OLD_TD_SUB_ACNT_CODE,'ZZZZZZZ') !=
           NVL(NEW_TD_SUB_ACNT_CODE,'ZZZZZZZ')) OR
          (NVL(OLD_TD_DOC_DRCR_FLAG,'0') !=
           NVL(NEW_TD_DOC_DRCR_FLAG,'0')) OR
          (NVL(OLD_TD_CURR_CODE,'ZZZZ') !=
           NVL(NEW_TD_CURR_CODE,'ZZZZ')) THEN
            VALIDATE_CODE_COMBN;
            REDUCE_ACNT_BAL;
            INCREASE_ACNT_BAL;
            DELETE_UNPOSTED_OS;
            INSERT_UNPOSTED_OS;
    ELSE
            IF  (NVL(OLD_TD_DIVN_CODE,'ZZZZZZZ') !=
                 NVL(NEW_TD_DIVN_CODE,'ZZZZZZZ')) OR
                (NVL(OLD_TD_DEPT_CODE,'ZZZZZZZ') !=
                 NVL(NEW_TD_DEPT_CODE,'ZZZZZZZ')) OR
                (NVL(OLD_TD_ANLY_CODE_1,'ZZZZZZZ') !=
                 NVL(NEW_TD_ANLY_CODE_1,'ZZZZZZZ')) OR
                (NVL(OLD_TD_ANLY_CODE_2,'ZZZZZZZ') !=
                 NVL(NEW_TD_ANLY_CODE_2,'ZZZZZZZ')) THEN
                    VALIDATE_CODE_COMBN;
                    REDUCE_ACNT_BAL;
                    INCREASE_ACNT_BAL;
                    UPDATE_UNPOSTED_OS_CODES;
                    IF (NVL(OLD_TD_DOC_AMT,0) != NVL(NEW_TD_DOC_AMT,0)) OR
                       (NVL(OLD_TD_FC_AMT,0) != NVL(NEW_TD_FC_AMT,0)) THEN
                       UPDATE_UNPOSTED_OS_AMT;
                    END IF;
            ELSE
                    IF (NVL(OLD_TD_DOC_DUE_DT,TO_DATE('01-JAN-1900','DD-MON-YYYY')) !=
                        NVL(NEW_TD_DOC_DUE_DT,TO_DATE('01-JAN-1900','DD-MON-YYYY'))) OR
                       (NVL(OLD_TD_DOC_REF,' ') !=
                        NVL(NEW_TD_DOC_REF,' ')) OR
                       (NVL(OLD_TD_OTH_REF,' ') !=
                        NVL(NEW_TD_OTH_REF,' ')) OR
                       (NVL(OLD_TD_ACTY_VALUE_CODE_1,'ZZZZZZZ') !=
                        NVL(NEW_TD_ACTY_VALUE_CODE_1,'ZZZZZZZ')) OR
                       (NVL(OLD_TD_ACTY_VALUE_CODE_2,'ZZZZZZZ') !=
                        NVL(NEW_TD_ACTY_VALUE_CODE_2,'ZZZZZZZ')) THEN
                           VALIDATE_CODE_COMBN;
                           UPDATE_UNPOSTED_OS_CODES;
                    END IF;
                    IF (NVL(OLD_TD_DOC_AMT,0) != NVL(NEW_TD_DOC_AMT,0)) OR
                       (NVL(OLD_TD_FC_AMT,0) != NVL(NEW_TD_FC_AMT,0)) THEN
                       UPDATE_ACNT_BAL;
                       UPDATE_UNPOSTED_OS_AMT;
                    END IF;
            END IF;
    END IF;
END IF;
IF TRG_MODE = 'D' THEN
   REDUCE_ACNT_BAL;
   DELETE_UNPOSTED_OS;
END IF;
END;
/
CREATE OR REPLACE PROCEDURE STP_FT_UNPOSTED_TRANS_HEADER (
 OLD_TH_COMP_CODE          IN      VARCHAR2,
 OLD_TH_ACNT_YEAR          IN      NUMBER,
 OLD_TH_TRAN_CODE          IN      VARCHAR2,
 OLD_TH_DOC_NO             IN      NUMBER,
 OLD_TH_DOC_DT             IN      DATE,
 OLD_TH_DOC_CAL_YEAR       IN      NUMBER,
 OLD_TH_DOC_CAL_MONTH      IN      NUMBER,
 OLD_TH_DOC_REF            IN      VARCHAR2,
 OLD_TH_DOC_REF_DT         IN      DATE,
 OLD_TH_DOC_DUE_DT         IN      DATE,
 OLD_TH_DIVN_CODE          IN      VARCHAR2,
 OLD_TH_DEPT_CODE          IN      VARCHAR2,
 OLD_TH_CTL_TOTAL          IN      NUMBER,
 OLD_TH_DESC               IN      VARCHAR2,
 OLD_TH_ANNOTATION         IN      VARCHAR2,
 OLD_TH_CR_UID             IN      VARCHAR2,
 OLD_TH_CR_DT              IN      DATE,
 NEW_TH_COMP_CODE          IN OUT  VARCHAR2,
 NEW_TH_ACNT_YEAR          IN OUT  NUMBER,
 NEW_TH_TRAN_CODE          IN OUT  VARCHAR2,
 NEW_TH_DOC_NO             IN OUT  NUMBER,
 NEW_TH_DOC_DT             IN OUT  DATE,
 NEW_TH_DOC_CAL_YEAR       IN OUT  NUMBER,
 NEW_TH_DOC_CAL_MONTH      IN OUT  NUMBER,
 NEW_TH_DOC_REF            IN OUT  VARCHAR2,
 NEW_TH_DOC_REF_DT         IN OUT  DATE,
 NEW_TH_DOC_DUE_DT         IN OUT  DATE,
 NEW_TH_DIVN_CODE          IN OUT  VARCHAR2,
 NEW_TH_DEPT_CODE          IN OUT  VARCHAR2,
 NEW_TH_CTL_TOTAL          IN OUT  NUMBER,
 NEW_TH_DESC               IN OUT  VARCHAR2,
 NEW_TH_ANNOTATION         IN OUT  VARCHAR2,
 NEW_TH_CR_UID             IN OUT  VARCHAR2,
 NEW_TH_CR_DT              IN OUT  DATE,
 TRG_MODE                  IN OUT  VARCHAR2,
 TRG_ERR_NO                   OUT  NUMBER,
 TRG_ERR_MSG                  OUT  VARCHAR2) AS
P_ERR_NO            NUMBER(6);
P_CAL_MONTH         NUMBER(2);
P_CAL_YEAR          NUMBER(4);
P_ACNT_YEAR         NUMBER(2);
P_CUR_ACNT_YEAR     NUMBER(2);
P_DBTI_KEY_FIELD    VARCHAR2(30);
PROCEDURE SETUP_DBTRG_INTERFACE IS
BEGIN
          IF TRG_MODE = 'U' OR TRG_MODE = 'D' THEN
              P_DBTI_KEY_FIELD := OLD_TH_COMP_CODE ||
                                  TO_CHAR(OLD_TH_ACNT_YEAR) ||
                                  OLD_TH_TRAN_CODE ||
                                  TO_CHAR(OLD_TH_DOC_NO) ;
          ELSE
              P_DBTI_KEY_FIELD := NEW_TH_COMP_CODE ||
                                  TO_CHAR(NEW_TH_ACNT_YEAR) ||
                                  NEW_TH_TRAN_CODE ||
                                  TO_CHAR(NEW_TH_DOC_NO) ;
          END IF;
          DELETE FROM FP_DBTRG_INTERFACE
          WHERE  DBTI_KEY_FIELD = P_DBTI_KEY_FIELD;
          IF TRG_MODE = 'D' THEN
              INSERT INTO FP_DBTRG_INTERFACE
                     (DBTI_KEY_FIELD, DBTI_VALUE_1, DBTI_VALUE_2,
                      DBTI_VALUE_3, DBTI_VALUE_4, DBTI_VALUE_5)
              VALUES (P_DBTI_KEY_FIELD, TO_CHAR(OLD_TH_DOC_DT,'DD-MON-YYYY'),
                      TO_CHAR(OLD_TH_DOC_CAL_MONTH),
                      TO_CHAR(OLD_TH_DOC_CAL_YEAR),
                      TO_CHAR(OLD_TH_DOC_DUE_DT,'DD-MON-YYYY'),
                      TO_CHAR(OLD_TH_DOC_REF_DT,'DD-MON-YYYY'));
          ELSE
              INSERT INTO FP_DBTRG_INTERFACE
                     (DBTI_KEY_FIELD, DBTI_VALUE_1, DBTI_VALUE_2,
                      DBTI_VALUE_3, DBTI_VALUE_4, DBTI_VALUE_5)
              VALUES (P_DBTI_KEY_FIELD, TO_CHAR(NEW_TH_DOC_DT,'DD-MON-YYYY'),
                      TO_CHAR(NEW_TH_DOC_CAL_MONTH),
                      TO_CHAR(NEW_TH_DOC_CAL_YEAR),
                      TO_CHAR(NEW_TH_DOC_DUE_DT,'DD-MON-YYYY'),
                      TO_CHAR(NEW_TH_DOC_REF_DT,'DD-MON-YYYY'));
          END IF;
END;
BEGIN
DBMS_OUTPUT.PUT_LINE('7' || TRG_MODE) ;
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
    P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(NEW_TH_COMP_CODE);
ELSE
    P_CUR_ACNT_YEAR := F_GET_CUR_ACNT_YEAR(OLD_TH_COMP_CODE);
END IF;
P_ERR_NO := 0;
IF TRG_MODE = 'I' OR TRG_MODE = 'U' THEN
    /* Initialise User id. and Date */
    IF TRG_MODE = 'I' THEN
         IF NEW_TH_CR_UID IS NULL THEN
              NEW_TH_CR_UID := 'UNDEF';
         END IF;
    ELSE
         IF NEW_TH_CR_UID IS NULL THEN
              NEW_TH_CR_UID := NVL(OLD_TH_CR_UID,'UNDEF');
         END IF;
    END IF;
    NEW_TH_CR_DT := SYSDATE;
    /* Validate if the document period corresponding to the document date
        is open. */
    IF (OLD_TH_DOC_DT IS NULL) OR
       (NVL(OLD_TH_DOC_DT,TO_DATE('01-JAN-1900','DD-MON-YYYY')) !=
            NEW_TH_DOC_DT) THEN
         F_VAL_OPCL(NEW_TH_COMP_CODE, NEW_TH_DOC_DT, P_ERR_NO,
                    P_CAL_YEAR, P_CAL_MONTH, P_ACNT_YEAR);
         IF P_ERR_NO != 0 THEN
            RAISE_APPLICATION_ERROR(-20500 - P_ERR_NO, 'Period not open');
         END IF;
         NEW_TH_ACNT_YEAR := P_ACNT_YEAR;
         NEW_TH_DOC_CAL_MONTH := P_CAL_MONTH;
         NEW_TH_DOC_CAL_YEAR  := P_CAL_YEAR;
         SETUP_DBTRG_INTERFACE;
         IF TRG_MODE = 'U' THEN
              IF OLD_TH_DOC_DT != NEW_TH_DOC_DT  OR
                 NVL(OLD_TH_DOC_DUE_DT,
                  TO_DATE('01-JAN-1900','DD-MON-YYYY')) !=
                 NVL(NEW_TH_DOC_DUE_DT,
                  TO_DATE('01-JAN-1900','DD-MON-YYYY')) THEN
                 F_UPD_DOC_DT_CHANGE(OLD_TH_COMP_CODE, OLD_TH_TRAN_CODE,
                     OLD_TH_DOC_NO, OLD_TH_ACNT_YEAR, OLD_TH_DOC_DT,
                     OLD_TH_DOC_DUE_DT, NEW_TH_DOC_DT, NEW_TH_DOC_DUE_DT,
                     NEW_TH_CR_UID, P_ERR_NO);
              END IF;
         END IF;
    END IF;
    /* Validate the data type of various components of the Narration, if
        Structuring of the narration is used. */
    IF NVL(OLD_TH_DESC,' ') != NVL(NEW_TH_DESC,' ') THEN
        F_VAL_NARRATION(NEW_TH_TRAN_CODE, NEW_TH_DESC, P_ERR_NO);
        IF P_ERR_NO != 0 THEN
            RAISE_APPLICATION_ERROR(-20008, 'Invalid Narration');
        END IF;
    END IF;
END IF;
IF TRG_MODE = 'D' THEN
     SETUP_DBTRG_INTERFACE;
     DELETE FROM FT_UNPOSTED_TRANS_DETAIL
     WHERE  TD_COMP_CODE = OLD_TH_COMP_CODE
     AND    TD_TRAN_CODE = OLD_TH_TRAN_CODE
     AND    TD_ACNT_YEAR = OLD_TH_ACNT_YEAR
     AND    TD_DOC_NO    = OLD_TH_DOC_NO;
END IF;
END;
/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FM_ACNT_ANLY
BEFORE INSERT OR UPDATE OR DELETE ON FM_ACNT_ANLY
FOR EACH ROW
DECLARE
 NEW_AANLY_ANLY_HEAD_NO    NUMBER(1) := NULL;
 NEW_AANLY_ANLY_CODE       VARCHAR2(1) := NULL;
 NEW_AANLY_MAIN_ACNT_CODE  VARCHAR2(1) := NULL;
 NEW_AANLY_SUB_ACNT_CODE   VARCHAR2(1) := NULL;
 NEW_AANLY_ANLY_NAME       VARCHAR2(1) := NULL;
 NEW_AANLY_ANLY_SHORT_NAME VARCHAR2(1) := NULL;
 NEW_AANLY_CR_UID          VARCHAR2(1) := NULL;
 NEW_AANLY_BL_ANLY_NAME    VARCHAR2(1) := NULL;
 NEW_AANLY_BL_ANLY_SHORT_NAME VARCHAR2(1) := NULL;
 NEW_AANLY_CR_DT           DATE        := NULL;
 NEW_AANLY_FRZ_FLAG        VARCHAR2(1) := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_ACNT_ANLY (
         :OLD.AANLY_ANLY_HEAD_NO,
         :OLD.AANLY_ANLY_CODE,
         :OLD.AANLY_MAIN_ACNT_CODE,
         :OLD.AANLY_SUB_ACNT_CODE,
         :OLD.AANLY_ANLY_NAME,
         :OLD.AANLY_ANLY_SHORT_NAME,
         :OLD.AANLY_CR_UID,
         :OLD.AANLY_CR_DT,
         :OLD.AANLY_FRZ_FLAG,
         :NEW.AANLY_ANLY_HEAD_NO,
         :NEW.AANLY_ANLY_CODE,
         :NEW.AANLY_MAIN_ACNT_CODE,
         :NEW.AANLY_SUB_ACNT_CODE,
         :NEW.AANLY_ANLY_NAME,
         :NEW.AANLY_ANLY_SHORT_NAME,
         :NEW.AANLY_CR_UID,
         :NEW.AANLY_CR_DT,
         :NEW.AANLY_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG ,
         :OLD.AANLY_BL_ANLY_NAME,
         :NEW.AANLY_BL_ANLY_NAME,
         :OLD.AANLY_BL_ANLY_SHORT_NAME,
         :NEW.AANLY_BL_ANLY_SHORT_NAME) ;
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_ACNT_ANLY (
         :OLD.AANLY_ANLY_HEAD_NO,
         :OLD.AANLY_ANLY_CODE,
         :OLD.AANLY_MAIN_ACNT_CODE,
         :OLD.AANLY_SUB_ACNT_CODE,
         :OLD.AANLY_ANLY_NAME,
         :OLD.AANLY_ANLY_SHORT_NAME,
         :OLD.AANLY_CR_UID,
         :OLD.AANLY_CR_DT,
         :OLD.AANLY_FRZ_FLAG,
         NEW_AANLY_ANLY_HEAD_NO,
         NEW_AANLY_ANLY_CODE,
         NEW_AANLY_MAIN_ACNT_CODE,
         NEW_AANLY_SUB_ACNT_CODE,
         NEW_AANLY_ANLY_NAME,
         NEW_AANLY_ANLY_SHORT_NAME,
         NEW_AANLY_CR_UID,
         NEW_AANLY_CR_DT,
         NEW_AANLY_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.AANLY_BL_ANLY_NAME,
         NEW_AANLY_BL_ANLY_NAME,
         :OLD.AANLY_BL_ANLY_SHORT_NAME,
         NEW_AANLY_BL_ANLY_SHORT_NAME) ;
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7"."TRG_FM_ACNT_COMP" BEFORE INSERT OR DELETE OR UPDATE ON FINAL7.FM_ACNT_COMP REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW  
DECLARE
 NEW_ACOMP_COMP_CODE       VARCHAR2(1) := NULL;
 NEW_ACOMP_MAIN_ACNT_CODE  VARCHAR2(1) := NULL;
 NEW_ACOMP_SUB_ACNT_CODE   VARCHAR2(1) := NULL;
 NEW_ACOMP_CR_UID          VARCHAR2(1) := NULL;
 NEW_ACOMP_CR_DT           DATE        := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_ACNT_COMP (
         :OLD.ACOMP_COMP_CODE,
         :OLD.ACOMP_MAIN_ACNT_CODE,
         :OLD.ACOMP_SUB_ACNT_CODE,
         :OLD.ACOMP_CR_UID,
         :OLD.ACOMP_CR_DT,
         :NEW.ACOMP_COMP_CODE,
         :NEW.ACOMP_MAIN_ACNT_CODE,
         :NEW.ACOMP_SUB_ACNT_CODE,
         :NEW.ACOMP_CR_UID,
         :NEW.ACOMP_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_ACNT_COMP (
         :OLD.ACOMP_COMP_CODE,
         :OLD.ACOMP_MAIN_ACNT_CODE,
         :OLD.ACOMP_SUB_ACNT_CODE,
         :OLD.ACOMP_CR_UID,
         :OLD.ACOMP_CR_DT,
         NEW_ACOMP_COMP_CODE,
         NEW_ACOMP_MAIN_ACNT_CODE,
         NEW_ACOMP_SUB_ACNT_CODE,
         NEW_ACOMP_CR_UID,
         NEW_ACOMP_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;



/
CREATE OR REPLACE TRIGGER "FINAL7"."TRG_FM_ACNT_CURR" BEFORE INSERT OR DELETE OR UPDATE ON FINAL7.FM_ACNT_CURR REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW  
DECLARE
 NEW_ACURR_CURR_CODE       VARCHAR2(1) := NULL;
 NEW_ACURR_MAIN_ACNT_CODE  VARCHAR2(1) := NULL;
 NEW_ACURR_SUB_ACNT_CODE   VARCHAR2(1) := NULL;
 NEW_ACURR_CR_UID          VARCHAR2(1) := NULL;
 NEW_ACURR_CR_DT           DATE        := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_ACNT_CURR (
         :OLD.ACURR_CURR_CODE,
         :OLD.ACURR_MAIN_ACNT_CODE,
         :OLD.ACURR_SUB_ACNT_CODE,
         :OLD.ACURR_CR_UID,
         :OLD.ACURR_CR_DT,
         :NEW.ACURR_CURR_CODE,
         :NEW.ACURR_MAIN_ACNT_CODE,
         :NEW.ACURR_SUB_ACNT_CODE,
         :NEW.ACURR_CR_UID,
         :NEW.ACURR_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_ACNT_CURR (
         :OLD.ACURR_CURR_CODE,
         :OLD.ACURR_MAIN_ACNT_CODE,
         :OLD.ACURR_SUB_ACNT_CODE,
         :OLD.ACURR_CR_UID,
         :OLD.ACURR_CR_DT,
         NEW_ACURR_CURR_CODE,
         NEW_ACURR_MAIN_ACNT_CODE,
         NEW_ACURR_SUB_ACNT_CODE,
         NEW_ACURR_CR_UID,
         NEW_ACURR_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;


/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FM_ACTIVITY
BEFORE INSERT OR UPDATE OR DELETE ON FM_ACTIVITY
FOR EACH ROW
DECLARE
 NEW_ACTY_CODE             VARCHAR2(1) := NULL;
 NEW_ACTY_NAME             VARCHAR2(1) := NULL;
 NEW_ACTY_BL_NAME          VARCHAR2(1) := NULL;
 NEW_ACTY_CR_UID           VARCHAR2(1) := NULL;
 NEW_ACTY_CR_DT            DATE        := NULL;
 NEW_ACTY_FRZ_FLAG         VARCHAR2(1) := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_ACTIVITY (
         :OLD.ACTY_CODE,
         :OLD.ACTY_NAME,
         :OLD.ACTY_CR_UID,
         :OLD.ACTY_CR_DT,
         :OLD.ACTY_FRZ_FLAG,
         :NEW.ACTY_CODE,
         :NEW.ACTY_NAME,
         :NEW.ACTY_CR_UID,
         :NEW.ACTY_CR_DT,
         :NEW.ACTY_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.ACTY_BL_NAME,
         :NEW.ACTY_BL_NAME) ;
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_ACTIVITY (
         :OLD.ACTY_CODE,
         :OLD.ACTY_NAME,
         :OLD.ACTY_CR_UID,
         :OLD.ACTY_CR_DT,
         :OLD.ACTY_FRZ_FLAG,
         NEW_ACTY_CODE,
         NEW_ACTY_NAME,
         NEW_ACTY_CR_UID,
         NEW_ACTY_CR_DT,
         NEW_ACTY_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.ACTY_BL_NAME,
         NEW_ACTY_BL_NAME) ;
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FM_ACTY_VALUE
BEFORE INSERT OR UPDATE OR DELETE ON FM_ACTY_VALUE
FOR EACH ROW
DECLARE
 NEW_AVAL_ACTY_CODE        VARCHAR2(1) := NULL;
 NEW_AVAL_CODE             VARCHAR2(1) := NULL;
 NEW_AVAL_VALUE_NAME       VARCHAR2(1) := NULL;
 NEW_AVAL_SHORT_NAME       VARCHAR2(1) := NULL;
 NEW_AVAL_BL_VALUE_NAME    VARCHAR2(1) := NULL;
 NEW_AVAL_BL_SHORT_NAME    VARCHAR2(1) := NULL;
 NEW_AVAL_CR_UID           VARCHAR2(1) := NULL;
 NEW_AVAL_CR_DT            DATE        := NULL;
 NEW_AVAL_FRZ_FLAG         VARCHAR2(1) := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_ACTY_VALUE (
         :OLD.AVAL_ACTY_CODE,
         :OLD.AVAL_CODE,
         :OLD.AVAL_VALUE_NAME,
         :OLD.AVAL_SHORT_NAME,
         :OLD.AVAL_CR_UID,
         :OLD.AVAL_CR_DT,
         :OLD.AVAL_FRZ_FLAG,
         :NEW.AVAL_ACTY_CODE,
         :NEW.AVAL_CODE,
         :NEW.AVAL_VALUE_NAME,
         :NEW.AVAL_SHORT_NAME,
         :NEW.AVAL_CR_UID,
         :NEW.AVAL_CR_DT,
         :NEW.AVAL_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.AVAL_BL_VALUE_NAME,
         :NEW.AVAL_BL_VALUE_NAME,
         :OLD.AVAL_BL_SHORT_NAME,
         :NEW.AVAL_BL_SHORT_NAME) ;
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_ACTY_VALUE (
         :OLD.AVAL_ACTY_CODE,
         :OLD.AVAL_CODE,
         :OLD.AVAL_VALUE_NAME,
         :OLD.AVAL_SHORT_NAME,
         :OLD.AVAL_CR_UID,
         :OLD.AVAL_CR_DT,
         :OLD.AVAL_FRZ_FLAG,
         NEW_AVAL_ACTY_CODE,
         NEW_AVAL_CODE,
         NEW_AVAL_VALUE_NAME,
         NEW_AVAL_SHORT_NAME,
         NEW_AVAL_CR_UID,
         NEW_AVAL_CR_DT,
         NEW_AVAL_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.AVAL_BL_VALUE_NAME,
         NEW_AVAL_BL_VALUE_NAME,
         :OLD.AVAL_BL_SHORT_NAME,
         NEW_AVAL_BL_SHORT_NAME) ;
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FM_ANALYSIS
BEFORE INSERT OR UPDATE OR DELETE ON FM_ANALYSIS
FOR EACH ROW
DECLARE
 NEW_ANLY_HEAD_NO          NUMBER(1) := NULL;
 NEW_ANLY_CODE             VARCHAR2(1) := NULL;
 NEW_ANLY_NAME             VARCHAR2(1) := NULL;
 NEW_ANLY_SHORT_NAME       VARCHAR2(1) := NULL;
 NEW_ANLY_BL_NAME          VARCHAR2(1) := NULL;
 NEW_ANLY_BL_SHORT_NAME    VARCHAR2(1) := NULL;
 NEW_ANLY_DESC             VARCHAR2(1) := NULL;
 NEW_ANLY_CR_UID           VARCHAR2(1) := NULL;
 NEW_ANLY_CR_DT            DATE        := NULL;
 NEW_ANLY_FRZ_FLAG         VARCHAR2(1) := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_ANALYSIS (
         :OLD.ANLY_HEAD_NO,
         :OLD.ANLY_CODE,
         :OLD.ANLY_NAME,
         :OLD.ANLY_SHORT_NAME,
         :OLD.ANLY_DESC,
         :OLD.ANLY_CR_UID,
         :OLD.ANLY_CR_DT,
         :OLD.ANLY_FRZ_FLAG,
         :NEW.ANLY_HEAD_NO,
         :NEW.ANLY_CODE,
         :NEW.ANLY_NAME,
         :NEW.ANLY_SHORT_NAME,
         :NEW.ANLY_DESC,
         :NEW.ANLY_CR_UID,
         :NEW.ANLY_CR_DT,
         :NEW.ANLY_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.ANLY_BL_NAME,
         :NEW.ANLY_BL_NAME,
         :OLD.ANLY_BL_SHORT_NAME,
         :NEW.ANLY_BL_SHORT_NAME) ;
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_ANALYSIS (
         :OLD.ANLY_HEAD_NO,
         :OLD.ANLY_CODE,
         :OLD.ANLY_NAME,
         :OLD.ANLY_SHORT_NAME,
         :OLD.ANLY_DESC,
         :OLD.ANLY_CR_UID,
         :OLD.ANLY_CR_DT,
         :OLD.ANLY_FRZ_FLAG,
         NEW_ANLY_HEAD_NO,
         NEW_ANLY_CODE,
         NEW_ANLY_NAME,
         NEW_ANLY_SHORT_NAME,
         NEW_ANLY_DESC,
         NEW_ANLY_CR_UID,
         NEW_ANLY_CR_DT,
         NEW_ANLY_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.ANLY_BL_NAME,
         NEW_ANLY_BL_NAME,
         :OLD.ANLY_BL_SHORT_NAME,
         NEW_ANLY_BL_SHORT_NAME) ;
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FM_ANLY_FORMAT
BEFORE INSERT OR UPDATE OR DELETE ON FM_ANLY_FORMAT
FOR EACH ROW
DECLARE
 NEW_AFM_HEAD_NO           NUMBER(1) := NULL;
 NEW_AFM_FORMAT_ID         NUMBER(1) := NULL;
 NEW_AFM_FORMAT_NAME       VARCHAR2(1) := NULL;
 NEW_AFM_BL_FORMAT_NAME    VARCHAR2(1) := NULL;
 NEW_AFM_CR_UID            VARCHAR2(1) := NULL;
 NEW_AFM_CR_DT             DATE        := NULL;
 NEW_AFM_FRZ_FLAG          VARCHAR2(1) := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_ANLY_FORMAT (
         :OLD.AFM_HEAD_NO,
         :OLD.AFM_FORMAT_ID,
         :OLD.AFM_FORMAT_NAME,
         :OLD.AFM_CR_UID,
         :OLD.AFM_CR_DT,
         :OLD.AFM_FRZ_FLAG,
         :NEW.AFM_HEAD_NO,
         :NEW.AFM_FORMAT_ID,
         :NEW.AFM_FORMAT_NAME,
         :NEW.AFM_CR_UID,
         :NEW.AFM_CR_DT,
         :NEW.AFM_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.AFM_BL_FORMAT_NAME,
         :NEW.AFM_BL_FORMAT_NAME) ;
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_ANLY_FORMAT (
         :OLD.AFM_HEAD_NO,
         :OLD.AFM_FORMAT_ID,
         :OLD.AFM_FORMAT_NAME,
         :OLD.AFM_CR_UID,
         :OLD.AFM_CR_DT,
         :OLD.AFM_FRZ_FLAG,
         NEW_AFM_HEAD_NO,
         NEW_AFM_FORMAT_ID,
         NEW_AFM_FORMAT_NAME,
         NEW_AFM_CR_UID,
         NEW_AFM_CR_DT,
         NEW_AFM_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.AFM_BL_FORMAT_NAME,
         NEW_AFM_BL_FORMAT_NAME) ;
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FM_ANLY_LEVEL
BEFORE INSERT OR UPDATE OR DELETE ON FM_ANLY_LEVEL
FOR EACH ROW
DECLARE
 NEW_ALM_HEAD_NO           NUMBER(1) := NULL;
 NEW_ALM_FORMAT_ID         NUMBER(1) := NULL;
 NEW_ALM_LVL_CODE          NUMBER(1) := NULL;
 NEW_ALM_LVL_NAME          VARCHAR2(1) := NULL;
 NEW_ALM_BL_LVL_NAME       VARCHAR2(1) := NULL;
 NEW_ALM_PARENT_CODE       NUMBER(1) := NULL;
 NEW_ALM_CR_UID            VARCHAR2(1) := NULL;
 NEW_ALM_CR_DT             DATE        := NULL;
 NEW_ALM_FRZ_FLAG          VARCHAR2(1) := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_ANLY_LEVEL (
         :OLD.ALM_HEAD_NO,
         :OLD.ALM_FORMAT_ID,
         :OLD.ALM_LVL_CODE,
         :OLD.ALM_LVL_NAME,
         :OLD.ALM_PARENT_CODE,
         :OLD.ALM_CR_UID,
         :OLD.ALM_CR_DT,
         :OLD.ALM_FRZ_FLAG,
         :NEW.ALM_HEAD_NO,
         :NEW.ALM_FORMAT_ID,
         :NEW.ALM_LVL_CODE,
         :NEW.ALM_LVL_NAME,
         :NEW.ALM_PARENT_CODE,
         :NEW.ALM_CR_UID,
         :NEW.ALM_CR_DT,
         :NEW.ALM_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.ALM_BL_LVL_NAME ,
         :NEW.ALM_BL_LVL_NAME ) ;
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_ANLY_LEVEL (
         :OLD.ALM_HEAD_NO,
         :OLD.ALM_FORMAT_ID,
         :OLD.ALM_LVL_CODE,
         :OLD.ALM_LVL_NAME,
         :OLD.ALM_PARENT_CODE,
         :OLD.ALM_CR_UID,
         :OLD.ALM_CR_DT,
         :OLD.ALM_FRZ_FLAG,
         NEW_ALM_HEAD_NO,
         NEW_ALM_FORMAT_ID,
         NEW_ALM_LVL_CODE,
         NEW_ALM_LVL_NAME,
         NEW_ALM_PARENT_CODE,
         NEW_ALM_CR_UID,
         NEW_ALM_CR_DT,
         NEW_ALM_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.ALM_BL_LVL_NAME ,
         NEW_ALM_BL_LVL_NAME ) ;
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FM_COA_ACNT_FORMAT
BEFORE INSERT OR UPDATE OR DELETE ON FM_COA_ACNT_FORMAT
FOR EACH ROW
DECLARE
 NEW_CAF_FORMAT_ID         NUMBER(1) := NULL;
 NEW_CAF_LVL_CODE          NUMBER(1) := NULL;
 NEW_CAF_MAIN_ACNT_CODE    VARCHAR2(1) := NULL;
 NEW_CAF_CR_UID            VARCHAR2(1) := NULL;
 NEW_CAF_CR_DT             DATE        := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_COA_ACNT_FORMAT (
         :OLD.CAF_FORMAT_ID,
         :OLD.CAF_LVL_CODE,
         :OLD.CAF_MAIN_ACNT_CODE,
         :OLD.CAF_CR_UID,
         :OLD.CAF_CR_DT,
         :NEW.CAF_FORMAT_ID,
         :NEW.CAF_LVL_CODE,
         :NEW.CAF_MAIN_ACNT_CODE,
         :NEW.CAF_CR_UID,
         :NEW.CAF_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_COA_ACNT_FORMAT (
         :OLD.CAF_FORMAT_ID,
         :OLD.CAF_LVL_CODE,
         :OLD.CAF_MAIN_ACNT_CODE,
         :OLD.CAF_CR_UID,
         :OLD.CAF_CR_DT,
         NEW_CAF_FORMAT_ID,
         NEW_CAF_LVL_CODE,
         NEW_CAF_MAIN_ACNT_CODE,
         NEW_CAF_CR_UID,
         NEW_CAF_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FM_COA_FORMAT
BEFORE INSERT OR UPDATE OR DELETE ON FM_COA_FORMAT
FOR EACH ROW
DECLARE
 NEW_COA_FORMAT_ID         NUMBER(1) := NULL;
 NEW_COA_FORMAT_NAME       VARCHAR2(1) := NULL;
 NEW_COA_BL_FORMAT_NAME    VARCHAR2(1) := NULL;
 NEW_COA_CR_UID            VARCHAR2(1) := NULL;
 NEW_COA_CR_DT             DATE        := NULL;
 NEW_COA_FRZ_FLAG          VARCHAR2(1) := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_COA_FORMAT (
         :OLD.COA_FORMAT_ID,
         :OLD.COA_FORMAT_NAME,
         :OLD.COA_CR_UID,
         :OLD.COA_CR_DT,
         :OLD.COA_FRZ_FLAG,
         :NEW.COA_FORMAT_ID,
         :NEW.COA_FORMAT_NAME,
         :NEW.COA_CR_UID,
         :NEW.COA_CR_DT,
         :NEW.COA_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.COA_BL_FORMAT_NAME,
         :NEW.COA_BL_FORMAT_NAME) ;
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_COA_FORMAT (
         :OLD.COA_FORMAT_ID,
         :OLD.COA_FORMAT_NAME,
         :OLD.COA_CR_UID,
         :OLD.COA_CR_DT,
         :OLD.COA_FRZ_FLAG,
         NEW_COA_FORMAT_ID,
         NEW_COA_FORMAT_NAME,
         NEW_COA_CR_UID,
         NEW_COA_CR_DT,
         NEW_COA_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.COA_BL_FORMAT_NAME,
         NEW_COA_BL_FORMAT_NAME) ;
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7"."TRG_FM_COA_LEVEL" BEFORE INSERT OR DELETE OR UPDATE ON FINAL7.FM_COA_LEVEL REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW  
DECLARE
 NEW_LVL_FORMAT_ID         NUMBER(1) := NULL;
 NEW_LVL_CODE              NUMBER(1) := NULL;
 NEW_LVL_NAME              VARCHAR2(1) := NULL;
 NEW_LVL_BL_NAME           VARCHAR2(1) := NULL;
 NEW_LVL_PARENT_CODE       NUMBER(1) := NULL;
 NEW_LVL_ACNT_TYPE         VARCHAR2(1) := NULL;
 NEW_LVL_TOTAL_FLAG        VARCHAR2(1) := NULL;
 NEW_LVL_NOTE_NO           VARCHAR2(1) := NULL;
 NEW_LVL_SEQ_NO            NUMBER(1) := NULL;
 NEW_LVL_CR_UID            VARCHAR2(1) := NULL;
 NEW_LVL_CR_DT             DATE        := NULL;
 NEW_LVL_FRZ_FLAG          VARCHAR2(1) := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_COA_LEVEL (
         :OLD.LVL_FORMAT_ID,
         :OLD.LVL_CODE,
         :OLD.LVL_NAME,
         :OLD.LVL_PARENT_CODE,
         :OLD.LVL_ACNT_TYPE,
         :OLD.LVL_TOTAL_FLAG,
         :OLD.LVL_NOTE_NO,
         :OLD.LVL_SEQ_NO,
         :OLD.LVL_CR_UID,
         :OLD.LVL_CR_DT,
         :OLD.LVL_FRZ_FLAG,
         :NEW.LVL_FORMAT_ID,
         :NEW.LVL_CODE,
         :NEW.LVL_NAME,
         :NEW.LVL_PARENT_CODE,
         :NEW.LVL_ACNT_TYPE,
         :NEW.LVL_TOTAL_FLAG,
         :NEW.LVL_NOTE_NO,
         :NEW.LVL_SEQ_NO,
         :NEW.LVL_CR_UID,
         :NEW.LVL_CR_DT,
         :NEW.LVL_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.LVL_BL_NAME,
         :NEW.LVL_BL_NAME) ;
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_COA_LEVEL (
         :OLD.LVL_FORMAT_ID,
         :OLD.LVL_CODE,
         :OLD.LVL_NAME,
         :OLD.LVL_PARENT_CODE,
         :OLD.LVL_ACNT_TYPE,
         :OLD.LVL_TOTAL_FLAG,
         :OLD.LVL_NOTE_NO,
         :OLD.LVL_SEQ_NO,
         :OLD.LVL_CR_UID,
         :OLD.LVL_CR_DT,
         :OLD.LVL_FRZ_FLAG,
         NEW_LVL_FORMAT_ID,
         NEW_LVL_CODE,
         NEW_LVL_NAME,
         NEW_LVL_PARENT_CODE,
         NEW_LVL_ACNT_TYPE,
         NEW_LVL_TOTAL_FLAG,
         NEW_LVL_NOTE_NO,
         NEW_LVL_SEQ_NO,
         NEW_LVL_CR_UID,
         NEW_LVL_CR_DT,
         NEW_LVL_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.LVL_BL_NAME,
         NEW_LVL_BL_NAME) ;
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;


/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FM_COMPANY
BEFORE INSERT OR UPDATE OR DELETE ON FM_COMPANY
FOR EACH ROW
DECLARE
 NEW_COMP_CODE             VARCHAR2(1) := NULL;
 NEW_COMP_NAME             VARCHAR2(1) := NULL;
 NEW_COMP_SHORT_NAME       VARCHAR2(1) := NULL;
 NEW_COMP_BL_NAME          VARCHAR2(1) := NULL;
 NEW_COMP_BL_SHORT_NAME    VARCHAR2(1) := NULL;
 NEW_COMP_CTL_ACNT_CODE    VARCHAR2(1) := NULL;
 NEW_COMP_HEADER           VARCHAR2(1) := NULL;
 NEW_COMP_ADD_1            VARCHAR2(1) := NULL;
 NEW_COMP_ADD_2            VARCHAR2(1) := NULL;
 NEW_COMP_ADD_3            VARCHAR2(1) := NULL;
 NEW_COMP_BL_ADD_1         VARCHAR2(1) := NULL;
 NEW_COMP_BL_ADD_2         VARCHAR2(1) := NULL;
 NEW_COMP_BL_ADD_3         VARCHAR2(1) := NULL;
 NEW_COMP_DFLT_DIVN_CODE   VARCHAR2(1) := NULL;
 NEW_COMP_DFLT_DEPT_CODE   VARCHAR2(1) := NULL;
 NEW_COMP_CR_UID           VARCHAR2(1) := NULL;
 NEW_COMP_CR_DT            DATE        := NULL;
 NEW_COMP_FRZ_FLAG         VARCHAR2(1) := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_COMPANY (
         :OLD.COMP_CODE,
         :OLD.COMP_NAME,
         :OLD.COMP_SHORT_NAME,
         :OLD.COMP_CTL_ACNT_CODE,
         :OLD.COMP_HEADER,
         :OLD.COMP_ADD_1,
         :OLD.COMP_ADD_2,
         :OLD.COMP_ADD_3,
         :OLD.COMP_DFLT_DIVN_CODE,
         :OLD.COMP_DFLT_DEPT_CODE,
         :OLD.COMP_CR_UID,
         :OLD.COMP_CR_DT,
         :NEW.COMP_FRZ_FLAG,
         :NEW.COMP_CODE,
         :NEW.COMP_NAME,
         :NEW.COMP_SHORT_NAME,
         :NEW.COMP_CTL_ACNT_CODE,
         :NEW.COMP_HEADER,
         :NEW.COMP_ADD_1,
         :NEW.COMP_ADD_2,
         :NEW.COMP_ADD_3,
         :NEW.COMP_DFLT_DIVN_CODE,
         :NEW.COMP_DFLT_DEPT_CODE,
         :NEW.COMP_CR_UID,
         :NEW.COMP_CR_DT,
         :NEW.COMP_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.COMP_BL_NAME,
         :NEW.COMP_BL_NAME,
         :OLD.COMP_BL_SHORT_NAME,
         :NEW.COMP_BL_SHORT_NAME,
         :OLD.COMP_BL_ADD_1,
         :NEW.COMP_BL_ADD_1,
         :OLD.COMP_BL_ADD_2,
         :NEW.COMP_BL_ADD_2,
         :OLD.COMP_BL_ADD_3,
         :NEW.COMP_BL_ADD_3 ) ;
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_COMPANY (
         :OLD.COMP_CODE,
         :OLD.COMP_NAME,
         :OLD.COMP_SHORT_NAME,
         :OLD.COMP_CTL_ACNT_CODE,
         :OLD.COMP_HEADER,
         :OLD.COMP_ADD_1,
         :OLD.COMP_ADD_2,
         :OLD.COMP_ADD_3,
         :OLD.COMP_DFLT_DIVN_CODE,
         :OLD.COMP_DFLT_DEPT_CODE,
         :OLD.COMP_CR_UID,
         :OLD.COMP_CR_DT,
         :OLD.COMP_FRZ_FLAG,
         NEW_COMP_CODE,
         NEW_COMP_NAME,
         NEW_COMP_SHORT_NAME,
         NEW_COMP_CTL_ACNT_CODE,
         NEW_COMP_HEADER,
         NEW_COMP_ADD_1,
         NEW_COMP_ADD_2,
         NEW_COMP_ADD_3,
         NEW_COMP_DFLT_DIVN_CODE,
         NEW_COMP_DFLT_DEPT_CODE,
         NEW_COMP_CR_UID,
         NEW_COMP_CR_DT,
         NEW_COMP_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.COMP_BL_NAME,
         NEW_COMP_BL_NAME,
         :OLD.COMP_BL_SHORT_NAME,
         NEW_COMP_BL_SHORT_NAME,
         :OLD.COMP_BL_ADD_1,
         NEW_COMP_BL_ADD_1,
         :OLD.COMP_BL_ADD_2,
         NEW_COMP_BL_ADD_2,
         :OLD.COMP_BL_ADD_3,
         NEW_COMP_BL_ADD_3 ) ;
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FM_COMPANY_AFTER
AFTER INSERT ON FM_COMPANY
FOR EACH ROW
BEGIN
     F_UPD_COMP_ACNT_PERIOD(:NEW.COMP_CODE, :NEW.COMP_CR_UID);
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FM_CURRENCY
BEFORE INSERT OR UPDATE OR DELETE ON FM_CURRENCY
FOR EACH ROW
DECLARE
 NEW_CURR_CODE             VARCHAR2(1) := NULL;
 NEW_CURR_NAME             VARCHAR2(1) := NULL;
 NEW_CURR_BL_NAME          VARCHAR2(1) := NULL;
 NEW_CURR_DECIMAL          NUMBER(1)   := NULL;
 NEW_CURR_UNIT_NAME        VARCHAR2(1) := NULL;
 NEW_CURR_BL_UNIT_NAME     VARCHAR2(1) := NULL;
 NEW_CURR_CR_UID           VARCHAR2(1) := NULL;
 NEW_CURR_CR_DT            DATE        := NULL;
 NEW_CURR_FRZ_FLAG         VARCHAR2(1) := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_CURRENCY (
         :OLD.CURR_CODE,
         :OLD.CURR_NAME,
         :OLD.CURR_DECIMAL,
         :OLD.CURR_UNIT_NAME,
         :OLD.CURR_CR_UID,
         :OLD.CURR_CR_DT,
         :OLD.CURR_FRZ_FLAG,
         :NEW.CURR_CODE,
         :NEW.CURR_NAME,
         :NEW.CURR_DECIMAL,
         :NEW.CURR_UNIT_NAME,
         :NEW.CURR_CR_UID,
         :NEW.CURR_CR_DT,
         :NEW.CURR_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.CURR_BL_NAME,
         :NEW.CURR_BL_NAME,
         :OLD.CURR_BL_UNIT_NAME,
         :NEW.CURR_BL_UNIT_NAME) ;
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_CURRENCY (
         :OLD.CURR_CODE,
         :OLD.CURR_NAME,
         :OLD.CURR_DECIMAL,
         :OLD.CURR_UNIT_NAME,
         :OLD.CURR_CR_UID,
         :OLD.CURR_CR_DT,
         :OLD.CURR_FRZ_FLAG,
         NEW_CURR_CODE,
         NEW_CURR_NAME,
         NEW_CURR_DECIMAL,
         NEW_CURR_UNIT_NAME,
         NEW_CURR_CR_UID,
         NEW_CURR_CR_DT,
         NEW_CURR_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.CURR_BL_NAME,
         NEW_CURR_BL_NAME,
         :OLD.CURR_BL_UNIT_NAME,
         NEW_CURR_BL_UNIT_NAME) ;
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FM_CUSTOMER
BEFORE INSERT OR UPDATE OR DELETE ON FM_CUSTOMER
FOR EACH ROW
DECLARE
 NEW_CUST_CODE             VARCHAR2(1) := NULL;
 NEW_CUST_NAME             VARCHAR2(1) := NULL;
 NEW_CUST_SHORT_NAME       VARCHAR2(1) := NULL;
 NEW_CUST_ADD_1            VARCHAR2(1) := NULL;
 NEW_CUST_ADD_2            VARCHAR2(1) := NULL;
 NEW_CUST_ADD_3            VARCHAR2(1) := NULL;
 NEW_CUST_BL_NAME          VARCHAR2(1) := NULL;
 NEW_CUST_BL_SHORT_NAME    VARCHAR2(1) := NULL;
 NEW_CUST_BL_ADD_1         VARCHAR2(1) := NULL;
 NEW_CUST_BL_ADD_2         VARCHAR2(1) := NULL;
 NEW_CUST_BL_ADD_3         VARCHAR2(1) := NULL;
 NEW_CUST_COUNTRY          VARCHAR2(1) := NULL;
 NEW_CUST_PHONE            VARCHAR2(1) := NULL;
 NEW_CUST_TELEX_FAX        VARCHAR2(1) := NULL;
 NEW_CUST_MAIN_ACNT_CODE   VARCHAR2(1) := NULL;
 NEW_CUST_CR_LMT_AMT       NUMBER(1) := NULL;
 NEW_CUST_CR_LMT_DAYS      NUMBER(1) := NULL;
 NEW_CUST_CONTACT          VARCHAR2(1) := NULL;
 NEW_CUST_AREA             VARCHAR2(1) := NULL;
 NEW_CUST_SM               VARCHAR2(1) := NULL;
 NEW_CUST_DESC             VARCHAR2(1) := NULL;
 NEW_CUST_CR_UID           VARCHAR2(1) := NULL;
 NEW_CUST_CR_DT            DATE        := NULL;
 NEW_CUST_FRZ_FLAG         VARCHAR2(1) := NULL;
 NEW_CUST_FAX              VARCHAR2(1) := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_CUSTOMER (
         :OLD.CUST_CODE,
         :OLD.CUST_NAME,
         :OLD.CUST_SHORT_NAME,
         :OLD.CUST_ADD_1,
         :OLD.CUST_ADD_2,
         :OLD.CUST_ADD_3,
         :OLD.CUST_COUNTRY,
         :OLD.CUST_PHONE,
         :OLD.CUST_TELEX_FAX,
         :OLD.CUST_MAIN_ACNT_CODE,
         :OLD.CUST_CR_LMT_AMT,
         :OLD.CUST_CR_LMT_DAYS,
         :OLD.CUST_CONTACT,
         :OLD.CUST_AREA,
         :OLD.CUST_SM,
         :OLD.CUST_DESC,
         :OLD.CUST_CR_UID,
         :OLD.CUST_CR_DT,
         :OLD.CUST_FRZ_FLAG,
         :OLD.CUST_FAX,
         :NEW.CUST_CODE,
         :NEW.CUST_NAME,
         :NEW.CUST_SHORT_NAME,
         :NEW.CUST_ADD_1,
         :NEW.CUST_ADD_2,
         :NEW.CUST_ADD_3,
         :NEW.CUST_COUNTRY,
         :NEW.CUST_PHONE,
         :NEW.CUST_TELEX_FAX,
         :NEW.CUST_MAIN_ACNT_CODE,
         :NEW.CUST_CR_LMT_AMT,
         :NEW.CUST_CR_LMT_DAYS,
         :NEW.CUST_CONTACT,
         :NEW.CUST_AREA,
         :NEW.CUST_SM,
         :NEW.CUST_DESC,
         :NEW.CUST_CR_UID,
         :NEW.CUST_CR_DT,
         :NEW.CUST_FRZ_FLAG,
         :NEW.CUST_FAX,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.CUST_BL_NAME,
         :NEW.CUST_BL_NAME,
         :OLD.CUST_BL_SHORT_NAME,
         :NEW.CUST_BL_SHORT_NAME,
         :OLD.CUST_BL_ADD_1,
         :NEW.CUST_BL_ADD_1,
         :OLD.CUST_BL_ADD_2,
         :NEW.CUST_BL_ADD_2,
         :OLD.CUST_BL_ADD_3,
         :NEW.CUST_BL_ADD_3) ;
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_CUSTOMER (
         :OLD.CUST_CODE,
         :OLD.CUST_NAME,
         :OLD.CUST_SHORT_NAME,
         :OLD.CUST_ADD_1,
         :OLD.CUST_ADD_2,
         :OLD.CUST_ADD_3,
         :OLD.CUST_COUNTRY,
         :OLD.CUST_PHONE,
         :OLD.CUST_TELEX_FAX,
         :OLD.CUST_MAIN_ACNT_CODE,
         :OLD.CUST_CR_LMT_AMT,
         :OLD.CUST_CR_LMT_DAYS,
         :OLD.CUST_CONTACT,
         :OLD.CUST_AREA,
         :OLD.CUST_SM,
         :OLD.CUST_DESC,
         :OLD.CUST_CR_UID,
         :OLD.CUST_CR_DT,
         :OLD.CUST_FRZ_FLAG,
         :OLD.CUST_FAX,
         NEW_CUST_CODE,
         NEW_CUST_NAME,
         NEW_CUST_SHORT_NAME,
         NEW_CUST_ADD_1,
         NEW_CUST_ADD_2,
         NEW_CUST_ADD_3,
         NEW_CUST_COUNTRY,
         NEW_CUST_PHONE,
         NEW_CUST_TELEX_FAX,
         NEW_CUST_MAIN_ACNT_CODE,
         NEW_CUST_CR_LMT_AMT,
         NEW_CUST_CR_LMT_DAYS,
         NEW_CUST_CONTACT,
         NEW_CUST_AREA,
         NEW_CUST_SM,
         NEW_CUST_DESC,
         NEW_CUST_CR_UID,
         NEW_CUST_CR_DT,
         NEW_CUST_FRZ_FLAG,
         NEW_CUST_FAX,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.CUST_BL_NAME,
         NEW_CUST_BL_NAME,
         :OLD.CUST_BL_SHORT_NAME,
         NEW_CUST_BL_SHORT_NAME,
         :OLD.CUST_BL_ADD_1,
         NEW_CUST_BL_ADD_1,
         :OLD.CUST_BL_ADD_2,
         NEW_CUST_BL_ADD_2,
         :OLD.CUST_BL_ADD_3,
         NEW_CUST_BL_ADD_3) ;
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FM_DEPARTMENT
BEFORE INSERT OR UPDATE OR DELETE ON FM_DEPARTMENT
FOR EACH ROW
DECLARE
 NEW_DEPT_COMP_CODE        VARCHAR2(1) := NULL;
 NEW_DEPT_DIVN_CODE        VARCHAR2(1) := NULL;
 NEW_DEPT_CODE             VARCHAR2(1) := NULL;
 NEW_DEPT_NAME             VARCHAR2(1) := NULL;
 NEW_DEPT_SHORT_NAME       VARCHAR2(1) := NULL;
 NEW_DEPT_BL_NAME          VARCHAR2(1) := NULL;
 NEW_DEPT_BL_SHORT_NAME    VARCHAR2(1) := NULL;
 NEW_DEPT_HEADER           VARCHAR2(1) := NULL;
 NEW_DEPT_INCHARGE         VARCHAR2(1) := NULL;
 NEW_DEPT_CR_UID           VARCHAR2(1) := NULL;
 NEW_DEPT_CR_DT            DATE        := NULL;
 NEW_DEPT_FRZ_FLAG         VARCHAR2(1) := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_DEPARTMENT (
         :OLD.DEPT_COMP_CODE,
         :OLD.DEPT_DIVN_CODE,
         :OLD.DEPT_CODE,
         :OLD.DEPT_NAME,
         :OLD.DEPT_SHORT_NAME,
         :OLD.DEPT_HEADER,
         :OLD.DEPT_INCHARGE,
         :OLD.DEPT_CR_UID,
         :OLD.DEPT_CR_DT,
         :OLD.DEPT_FRZ_FLAG,
         :NEW.DEPT_COMP_CODE,
         :NEW.DEPT_DIVN_CODE,
         :NEW.DEPT_CODE,
         :NEW.DEPT_NAME,
         :NEW.DEPT_SHORT_NAME,
         :NEW.DEPT_HEADER,
         :NEW.DEPT_INCHARGE,
         :NEW.DEPT_CR_UID,
         :NEW.DEPT_CR_DT,
         :NEW.DEPT_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.DEPT_BL_NAME,
         :NEW.DEPT_BL_NAME,
         :OLD.DEPT_BL_SHORT_NAME,
         :NEW.DEPT_BL_SHORT_NAME);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_DEPARTMENT (
         :OLD.DEPT_COMP_CODE,
         :OLD.DEPT_DIVN_CODE,
         :OLD.DEPT_CODE,
         :OLD.DEPT_NAME,
         :OLD.DEPT_SHORT_NAME,
         :OLD.DEPT_HEADER,
         :OLD.DEPT_INCHARGE,
         :OLD.DEPT_CR_UID,
         :OLD.DEPT_CR_DT,
         :OLD.DEPT_FRZ_FLAG,
         NEW_DEPT_COMP_CODE,
         NEW_DEPT_DIVN_CODE,
         NEW_DEPT_CODE,
         NEW_DEPT_NAME,
         NEW_DEPT_SHORT_NAME,
         NEW_DEPT_HEADER,
         NEW_DEPT_INCHARGE,
         NEW_DEPT_CR_UID,
         NEW_DEPT_CR_DT,
         NEW_DEPT_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.DEPT_BL_NAME,
         NEW_DEPT_BL_NAME,
         :OLD.DEPT_BL_SHORT_NAME,
         NEW_DEPT_BL_SHORT_NAME);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FM_DIVISION
BEFORE INSERT OR UPDATE OR DELETE ON FM_DIVISION
FOR EACH ROW
DECLARE
 NEW_DIVN_COMP_CODE        VARCHAR2(1) := NULL;
 NEW_DIVN_CODE             VARCHAR2(1) := NULL;
 NEW_DIVN_NAME             VARCHAR2(1) := NULL;
 NEW_DIVN_SHORT_NAME       VARCHAR2(1) := NULL;
 NEW_DIVN_BL_NAME          VARCHAR2(1) := NULL;
 NEW_DIVN_BL_SHORT_NAME    VARCHAR2(1) := NULL;
 NEW_DIVN_HEADER           VARCHAR2(1) := NULL;
 NEW_DIVN_INCHARGE         VARCHAR2(1) := NULL;
 NEW_DIVN_CR_UID           VARCHAR2(1) := NULL;
 NEW_DIVN_CR_DT            DATE        := NULL;
 NEW_DIVN_FRZ_FLAG         VARCHAR2(1) := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_DIVISION (
         :OLD.DIVN_COMP_CODE,
         :OLD.DIVN_CODE,
         :OLD.DIVN_NAME,
         :OLD.DIVN_SHORT_NAME,
         :OLD.DIVN_HEADER,
         :OLD.DIVN_INCHARGE,
         :OLD.DIVN_CR_UID,
         :OLD.DIVN_CR_DT,
         :OLD.DIVN_FRZ_FLAG,
         :NEW.DIVN_COMP_CODE,
         :NEW.DIVN_CODE,
         :NEW.DIVN_NAME,
         :NEW.DIVN_SHORT_NAME,
         :NEW.DIVN_HEADER,
         :NEW.DIVN_INCHARGE,
         :NEW.DIVN_CR_UID,
         :NEW.DIVN_CR_DT,
         :NEW.DIVN_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.DIVN_BL_NAME,
         :NEW.DIVN_BL_NAME,
         :OLD.DIVN_BL_SHORT_NAME,
         :NEW.DIVN_BL_SHORT_NAME) ;
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_DIVISION (
         :OLD.DIVN_COMP_CODE,
         :OLD.DIVN_CODE,
         :OLD.DIVN_NAME,
         :OLD.DIVN_SHORT_NAME,
         :OLD.DIVN_HEADER,
         :OLD.DIVN_INCHARGE,
         :OLD.DIVN_CR_UID,
         :OLD.DIVN_CR_DT,
         :OLD.DIVN_FRZ_FLAG,
         NEW_DIVN_COMP_CODE,
         NEW_DIVN_CODE,
         NEW_DIVN_NAME,
         NEW_DIVN_SHORT_NAME,
         NEW_DIVN_HEADER,
         NEW_DIVN_INCHARGE,
         NEW_DIVN_CR_UID,
         NEW_DIVN_CR_DT,
         NEW_DIVN_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.DIVN_BL_NAME,
         NEW_DIVN_BL_NAME,
         :OLD.DIVN_BL_SHORT_NAME,
         NEW_DIVN_BL_SHORT_NAME) ;
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FM_EXCHANGE_RATE_ROW
BEFORE INSERT OR DELETE OR UPDATE ON FM_EXCHANGE_RATE
FOR EACH ROW
DECLARE
          P_PARA_VALUE VARCHAR2(50);
          CURSOR FET_BASE_CUR IS
                  SELECT PARA_VALUE FROM
                  FP_PARAMETER
                  WHERE PARA_ID = 'BASE.CURR';
BEGIN
            IF INSERTING OR UPDATING THEN
                 :NEW.CER_CR_DT := SYSDATE;
                 :NEW.CER_CR_UID := NVL(:NEW.CER_CR_UID,
                                      NVL(:OLD.CER_CR_UID, 'UNDEF'));
            END IF;
            IF FET_BASE_CUR%ISOPEN THEN
                 CLOSE FET_BASE_CUR;
            END IF;
             OPEN FET_BASE_CUR;
             FETCH FET_BASE_CUR INTO P_PARA_VALUE;
             CLOSE FET_BASE_CUR;
               IF UPDATING OR DELETING THEN
                  IF P_PARA_VALUE = :OLD.CER_CURR_CODE THEN
                     RAISE_APPLICATION_ERROR
                           (-20005, 'Cannot Delete/Update Base Currency');
                  END IF;
               END IF;
               IF INSERTING THEN
                 IF P_PARA_VALUE = :NEW.CER_CURR_CODE THEN
                    RAISE_APPLICATION_ERROR
                          (-20006, 'Cannot Insert Base Currency');
                  ELSE
                    IF :NEW.CER_EFF_TO_DT IS NULL THEN
                       :NEW.CER_EFF_TO_DT := TO_DATE('31-DEC-2099','DD-MON-YYYY');
                    END IF;
               END IF;
            END IF;
             IF UPDATING OR DELETING THEN
               INSERT INTO FH_EXCHANGE_RATE_HIST
                                       VALUES ( :OLD.CER_CURR_CODE,
                                                :OLD.CER_EFF_FRM_DT,
                                                :OLD.CER_EFF_TO_DT,
                                                :OLD.CER_BUY_EXGE_RATE,
                                                :OLD.CER_SELL_EXGE_RATE,
                                                :OLD.CER_CR_UID,
                                                :OLD.CER_CR_DT);
             END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FM_EXCHANGE_RATE_TABLE
AFTER INSERT ON FM_EXCHANGE_RATE
DECLARE
     CURSOR CUR_CER_CURR_CODE IS
            SELECT  CER_CURR_CODE,
                    CER_EFF_FRM_DT
            FROM    FM_EXCHANGE_RATE
            WHERE   CER_EFF_TO_DT = TO_DATE('31-DEC-2099','DD-MON-YYYY')
            ORDER BY CER_CURR_CODE, CER_EFF_FRM_DT;
     P_CURR1 VARCHAR2(3);
     P_CURR2 VARCHAR2(3);
     P_FRMDT1 DATE;
     P_FRMDT2 DATE;
BEGIN
     IF CUR_CER_CURR_CODE%ISOPEN THEN
          CLOSE CUR_CER_CURR_CODE;
     END IF;
     OPEN CUR_CER_CURR_CODE;
     FETCH CUR_CER_CURR_CODE INTO P_CURR1, P_FRMDT1;
     FETCH CUR_CER_CURR_CODE INTO P_CURR2, P_FRMDT2;
     WHILE NOT CUR_CER_CURR_CODE%NOTFOUND
     LOOP
           IF P_CURR1  = P_CURR2  THEN
              UPDATE FM_EXCHANGE_RATE
              SET CER_EFF_TO_DT = P_FRMDT2 - 1
              WHERE CER_EFF_FRM_DT = P_FRMDT1
              AND CER_CURR_CODE = P_CURR1;
              FETCH CUR_CER_CURR_CODE INTO P_CURR1, P_FRMDT1;
              FETCH CUR_CER_CURR_CODE INTO P_CURR2, P_FRMDT2;
           ELSE
               P_FRMDT1 := P_FRMDT2;
               P_CURR1  := P_CURR2;
               FETCH CUR_CER_CURR_CODE INTO P_CURR2, P_FRMDT2;
          END IF;
     END LOOP;
     CLOSE CUR_CER_CURR_CODE;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7"."TRG_FM_MAIN_ACCOUNT" BEFORE INSERT OR DELETE OR UPDATE ON FINAL7.FM_MAIN_ACCOUNT REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW  
DECLARE
 NEW_MAIN_ACNT_CODE        VARCHAR2(1) := NULL;
 NEW_MAIN_ACNT_NAME        VARCHAR2(1) := NULL;
 NEW_MAIN_ACNT_SHORT_NAME  VARCHAR2(1) := NULL;
 NEW_MAIN_BL_ACNT_NAME        VARCHAR2(1) := NULL;
 NEW_MAIN_BL_ACNT_SHORT_NAME  VARCHAR2(1) := NULL;
 NEW_MAIN_ACNT_CATG        VARCHAR2(1) := NULL;
 NEW_MAIN_CTL_ACNT_FLAG    VARCHAR2(1) := NULL;
 NEW_MAIN_ACTY_CODE_1      VARCHAR2(1) := NULL;
 NEW_MAIN_ACTY_CODE_2      VARCHAR2(1) := NULL;
 NEW_MAIN_ACNT_TYPE        VARCHAR2(1) := NULL;
 NEW_MAIN_OPEN_ENTRY_FLAG  VARCHAR2(1) := NULL;
 NEW_MAIN_DESC             VARCHAR2(1) := NULL;
 NEW_MAIN_CR_UID           VARCHAR2(1) := NULL;
 NEW_MAIN_CR_DT            DATE        := NULL;
 NEW_MAIN_FRZ_FLAG         VARCHAR2(1) := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_MAIN_ACCOUNT (
         :OLD.MAIN_ACNT_CODE,
         :OLD.MAIN_ACNT_NAME,
         :OLD.MAIN_ACNT_SHORT_NAME,
         :OLD.MAIN_ACNT_CATG,
         :OLD.MAIN_CTL_ACNT_FLAG,
         :OLD.MAIN_ACTY_CODE_1,
         :OLD.MAIN_ACTY_CODE_2,
         :OLD.MAIN_ACNT_TYPE,
         :OLD.MAIN_OPEN_ENTRY_FLAG,
         :OLD.MAIN_DESC,
         :OLD.MAIN_CR_UID,
         :OLD.MAIN_CR_DT,
         :OLD.MAIN_FRZ_FLAG,
         :NEW.MAIN_ACNT_CODE,
         :NEW.MAIN_ACNT_NAME,
         :NEW.MAIN_ACNT_SHORT_NAME,
         :NEW.MAIN_ACNT_CATG,
         :NEW.MAIN_CTL_ACNT_FLAG,
         :NEW.MAIN_ACTY_CODE_1,
         :NEW.MAIN_ACTY_CODE_2,
         :NEW.MAIN_ACNT_TYPE,
         :NEW.MAIN_OPEN_ENTRY_FLAG,
         :NEW.MAIN_DESC,
         :NEW.MAIN_CR_UID,
         :NEW.MAIN_CR_DT,
         :NEW.MAIN_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.MAIN_BL_ACNT_NAME,
         :NEW.MAIN_BL_ACNT_NAME,
         :OLD.MAIN_BL_ACNT_SHORT_NAME,
         :NEW.MAIN_BL_ACNT_SHORT_NAME) ;
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_MAIN_ACCOUNT (
         :OLD.MAIN_ACNT_CODE,
         :OLD.MAIN_ACNT_NAME,
         :OLD.MAIN_ACNT_SHORT_NAME,
         :OLD.MAIN_ACNT_CATG,
         :OLD.MAIN_CTL_ACNT_FLAG,
         :OLD.MAIN_ACTY_CODE_1,
         :OLD.MAIN_ACTY_CODE_2,
         :OLD.MAIN_ACNT_TYPE,
         :OLD.MAIN_OPEN_ENTRY_FLAG,
         :OLD.MAIN_DESC,
         :OLD.MAIN_CR_UID,
         :OLD.MAIN_CR_DT,
         :OLD.MAIN_FRZ_FLAG,
         NEW_MAIN_ACNT_CODE,
         NEW_MAIN_ACNT_NAME,
         NEW_MAIN_ACNT_SHORT_NAME,
         NEW_MAIN_ACNT_CATG,
         NEW_MAIN_CTL_ACNT_FLAG,
         NEW_MAIN_ACTY_CODE_1,
         NEW_MAIN_ACTY_CODE_2,
         NEW_MAIN_ACNT_TYPE,
         NEW_MAIN_OPEN_ENTRY_FLAG,
         NEW_MAIN_DESC,
         NEW_MAIN_CR_UID,
         NEW_MAIN_CR_DT,
         NEW_MAIN_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.MAIN_BL_ACNT_NAME,
         NEW_MAIN_BL_ACNT_NAME,
         :OLD.MAIN_BL_ACNT_SHORT_NAME,
         NEW_MAIN_BL_ACNT_SHORT_NAME) ;
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;


/
CREATE OR REPLACE TRIGGER "FINAL7"."TRG_FM_MAIN_SUB" BEFORE INSERT OR DELETE OR UPDATE ON FINAL7.FM_MAIN_SUB REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW  
DECLARE
 NEW_MS_MAIN_ACNT_CODE     VARCHAR2(1) := NULL;
 NEW_MS_SUB_ACNT_CODE      VARCHAR2(1) := NULL;
 NEW_MS_SUB_ACNT_NAME      VARCHAR2(1) := NULL;
 NEW_MS_SUB_ACNT_SHORT_NAME VARCHAR2(1) := NULL;
 NEW_MS_BL_SUB_ACNT_NAME      VARCHAR2(1) := NULL;
 NEW_MS_BL_SUB_ACNT_SHORT_NAME VARCHAR2(1) := NULL;
 NEW_MS_CR_UID             VARCHAR2(1) := NULL;
 NEW_MS_CR_DT              DATE        := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_MAIN_SUB (
         :OLD.MS_MAIN_ACNT_CODE,
         :OLD.MS_SUB_ACNT_CODE,
         :OLD.MS_SUB_ACNT_NAME,
         :OLD.MS_SUB_ACNT_SHORT_NAME,
         :OLD.MS_CR_UID,
         :OLD.MS_CR_DT,
         :NEW.MS_MAIN_ACNT_CODE,
         :NEW.MS_SUB_ACNT_CODE,
         :NEW.MS_SUB_ACNT_NAME,
         :NEW.MS_SUB_ACNT_SHORT_NAME,
         :NEW.MS_CR_UID,
         :NEW.MS_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.MS_BL_SUB_ACNT_NAME,
         :NEW.MS_BL_SUB_ACNT_NAME,
         :OLD.MS_BL_SUB_ACNT_SHORT_NAME,
         :NEW.MS_BL_SUB_ACNT_SHORT_NAME ) ;
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_MAIN_SUB (
         :OLD.MS_MAIN_ACNT_CODE,
         :OLD.MS_SUB_ACNT_CODE,
         :OLD.MS_SUB_ACNT_NAME,
         :OLD.MS_SUB_ACNT_SHORT_NAME,
         :OLD.MS_CR_UID,
         :OLD.MS_CR_DT,
         NEW_MS_MAIN_ACNT_CODE,
         NEW_MS_SUB_ACNT_CODE,
         NEW_MS_SUB_ACNT_NAME,
         NEW_MS_SUB_ACNT_SHORT_NAME,
         NEW_MS_CR_UID,
         NEW_MS_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.MS_BL_SUB_ACNT_NAME,
         NEW_MS_BL_SUB_ACNT_NAME,
         :OLD.MS_BL_SUB_ACNT_SHORT_NAME,
         NEW_MS_BL_SUB_ACNT_SHORT_NAME ) ;
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;


/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FM_SUB_ACCOUNT
BEFORE INSERT OR UPDATE OR DELETE ON FM_SUB_ACCOUNT
FOR EACH ROW
DECLARE
 NEW_SUB_ACNT_CODE         VARCHAR2(1) := NULL;
 NEW_SUB_ACNT_NAME         VARCHAR2(1) := NULL;
 NEW_SUB_ACNT_SHORT_NAME   VARCHAR2(1) := NULL;
 NEW_SUB_BL_ACNT_NAME      VARCHAR2(1) := NULL;
 NEW_SUB_BL_ACNT_SHORT_NAME VARCHAR2(1) := NULL;
 NEW_SUB_DESC              VARCHAR2(1) := NULL;
 NEW_SUB_CR_UID            VARCHAR2(1) := NULL;
 NEW_SUB_CR_DT             DATE        := NULL;
 NEW_SUB_FRZ_FLAG          VARCHAR2(1) := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_SUB_ACCOUNT (
         :OLD.SUB_ACNT_CODE,
         :OLD.SUB_ACNT_NAME,
         :OLD.SUB_ACNT_SHORT_NAME,
         :OLD.SUB_DESC,
         :OLD.SUB_CR_UID,
         :OLD.SUB_CR_DT,
         :OLD.SUB_FRZ_FLAG,
         :NEW.SUB_ACNT_CODE,
         :NEW.SUB_ACNT_NAME,
         :NEW.SUB_ACNT_SHORT_NAME,
         :NEW.SUB_DESC,
         :NEW.SUB_CR_UID,
         :NEW.SUB_CR_DT,
         :NEW.SUB_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.SUB_BL_ACNT_NAME,
         :NEW.SUB_BL_ACNT_NAME,
         :OLD.SUB_BL_ACNT_SHORT_NAME,
         :NEW.SUB_BL_ACNT_SHORT_NAME) ;
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_SUB_ACCOUNT (
         :OLD.SUB_ACNT_CODE,
         :OLD.SUB_ACNT_NAME,
         :OLD.SUB_ACNT_SHORT_NAME,
         :OLD.SUB_DESC,
         :OLD.SUB_CR_UID,
         :OLD.SUB_CR_DT,
         :OLD.SUB_FRZ_FLAG,
         NEW_SUB_ACNT_CODE,
         NEW_SUB_ACNT_NAME,
         NEW_SUB_ACNT_SHORT_NAME,
         NEW_SUB_DESC,
         NEW_SUB_CR_UID,
         NEW_SUB_CR_DT,
         NEW_SUB_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.SUB_BL_ACNT_NAME,
         NEW_SUB_BL_ACNT_NAME,
         :OLD.SUB_BL_ACNT_SHORT_NAME,
         NEW_SUB_BL_ACNT_SHORT_NAME) ;
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FM_SUB_COMP
BEFORE INSERT OR UPDATE OR DELETE ON FM_SUB_COMP
FOR EACH ROW
DECLARE
 NEW_SCOMP_COMP_CODE       VARCHAR2(1) := NULL;
 NEW_SCOMP_SUB_ACNT_CODE   VARCHAR2(1) := NULL;
 NEW_SCOMP_CR_UID          VARCHAR2(1) := NULL;
 NEW_SCOMP_CR_DT           DATE        := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_SUB_COMP (
         :OLD.SCOMP_COMP_CODE,
         :OLD.SCOMP_SUB_ACNT_CODE,
         :OLD.SCOMP_CR_UID,
         :OLD.SCOMP_CR_DT,
         :NEW.SCOMP_COMP_CODE,
         :NEW.SCOMP_SUB_ACNT_CODE,
         :NEW.SCOMP_CR_UID,
         :NEW.SCOMP_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_SUB_COMP (
         :OLD.SCOMP_COMP_CODE,
         :OLD.SCOMP_SUB_ACNT_CODE,
         :OLD.SCOMP_CR_UID,
         :OLD.SCOMP_CR_DT,
         NEW_SCOMP_COMP_CODE,
         NEW_SCOMP_SUB_ACNT_CODE,
         NEW_SCOMP_CR_UID,
         NEW_SCOMP_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FM_SUB_CURR
BEFORE INSERT OR UPDATE OR DELETE ON FM_SUB_CURR
FOR EACH ROW
DECLARE
 NEW_SCURR_CURR_CODE       VARCHAR2(1) := NULL;
 NEW_SCURR_SUB_ACNT_CODE   VARCHAR2(1) := NULL;
 NEW_SCURR_CR_UID          VARCHAR2(1) := NULL;
 NEW_SCURR_CR_DT           DATE        := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_SUB_CURR (
         :OLD.SCURR_CURR_CODE,
         :OLD.SCURR_SUB_ACNT_CODE,
         :OLD.SCURR_CR_UID,
         :OLD.SCURR_CR_DT,
         :NEW.SCURR_CURR_CODE,
         :NEW.SCURR_SUB_ACNT_CODE,
         :NEW.SCURR_CR_UID,
         :NEW.SCURR_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_SUB_CURR (
         :OLD.SCURR_CURR_CODE,
         :OLD.SCURR_SUB_ACNT_CODE,
         :OLD.SCURR_CR_UID,
         :OLD.SCURR_CR_DT,
         NEW_SCURR_CURR_CODE,
         NEW_SCURR_SUB_ACNT_CODE,
         NEW_SCURR_CR_UID,
         NEW_SCURR_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FM_SUPPLIER
BEFORE INSERT OR UPDATE OR DELETE ON FM_SUPPLIER
FOR EACH ROW
DECLARE
 NEW_SUPP_CODE             VARCHAR2(1) := NULL;
 NEW_SUPP_NAME             VARCHAR2(1) := NULL;
 NEW_SUPP_SHORT_NAME       VARCHAR2(1) := NULL;
 NEW_SUPP_ADD_1            VARCHAR2(1) := NULL;
 NEW_SUPP_ADD_2            VARCHAR2(1) := NULL;
 NEW_SUPP_ADD_3            VARCHAR2(1) := NULL;
 NEW_SUPP_BL_NAME          VARCHAR2(1) := NULL;
 NEW_SUPP_BL_SHORT_NAME    VARCHAR2(1) := NULL;
 NEW_SUPP_BL_ADD_1         VARCHAR2(1) := NULL;
 NEW_SUPP_BL_ADD_2         VARCHAR2(1) := NULL;
 NEW_SUPP_BL_ADD_3         VARCHAR2(1) := NULL;
 NEW_SUPP_COUNTRY          VARCHAR2(1) := NULL;
 NEW_SUPP_PHONE            VARCHAR2(1) := NULL;
 NEW_SUPP_TELEX_FAX        VARCHAR2(1) := NULL;
 NEW_SUPP_MAIN_ACNT_CODE   VARCHAR2(1) := NULL;
 NEW_SUPP_CR_LMT_AMT       NUMBER(1) := NULL;
 NEW_SUPP_CR_LMT_DAYS      NUMBER(1) := NULL;
 NEW_SUPP_CONTACT          VARCHAR2(1) := NULL;
 NEW_SUPP_AREA             VARCHAR2(1) := NULL;
 NEW_SUPP_SM               VARCHAR2(1) := NULL;
 NEW_SUPP_CATG             VARCHAR2(1) := NULL;
 NEW_SUPP_MODE_PYMT        VARCHAR2(1) := NULL;
 NEW_SUPP_BANK_ACNT        VARCHAR2(1) := NULL;
 NEW_SUPP_BANK_NAME        VARCHAR2(1) := NULL;
 NEW_SUPP_BANK_BRANCH      VARCHAR2(1) := NULL;
 NEW_SUPP_DESC             VARCHAR2(1) := NULL;
 NEW_SUPP_CR_UID           VARCHAR2(1) := NULL;
 NEW_SUPP_CR_DT            DATE        := NULL;
 NEW_SUPP_FRZ_FLAG         VARCHAR2(1) := NULL;
 NEW_SUPP_FAX              VARCHAR2(1) := NULL;
 NEW_SUPP_BANK_ADD1        VARCHAR2(1) := NULL;
 NEW_SUPP_BANK_ADD2        VARCHAR2(1) := NULL;
 NEW_SUPP_BANK_ADD3        VARCHAR2(1) := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_SUPPLIER (
         :OLD.SUPP_CODE,
         :OLD.SUPP_NAME,
         :OLD.SUPP_SHORT_NAME,
         :OLD.SUPP_ADD_1,
         :OLD.SUPP_ADD_2,
         :OLD.SUPP_ADD_3,
         :OLD.SUPP_COUNTRY,
         :OLD.SUPP_PHONE,
         :OLD.SUPP_TELEX_FAX,
         :OLD.SUPP_MAIN_ACNT_CODE,
         :OLD.SUPP_CR_LMT_AMT,
         :OLD.SUPP_CR_LMT_DAYS,
         :OLD.SUPP_CONTACT,
         :OLD.SUPP_AREA,
         :OLD.SUPP_SM,
         :OLD.SUPP_CATG,
         :OLD.SUPP_MODE_PYMT,
         :OLD.SUPP_BANK_ACNT,
         :OLD.SUPP_BANK_NAME,
         :OLD.SUPP_BANK_BRANCH,
         :OLD.SUPP_DESC,
         :OLD.SUPP_CR_UID,
         :OLD.SUPP_CR_DT,
         :OLD.SUPP_FRZ_FLAG,
         :OLD.SUPP_FAX,
         :OLD.SUPP_BANK_ADD1,
         :OLD.SUPP_BANK_ADD2,
         :OLD.SUPP_BANK_ADD3,
         :NEW.SUPP_CODE,
         :NEW.SUPP_NAME,
         :NEW.SUPP_SHORT_NAME,
         :NEW.SUPP_ADD_1,
         :NEW.SUPP_ADD_2,
         :NEW.SUPP_ADD_3,
         :NEW.SUPP_COUNTRY,
         :NEW.SUPP_PHONE,
         :NEW.SUPP_TELEX_FAX,
         :NEW.SUPP_MAIN_ACNT_CODE,
         :NEW.SUPP_CR_LMT_AMT,
         :NEW.SUPP_CR_LMT_DAYS,
         :NEW.SUPP_CONTACT,
         :NEW.SUPP_AREA,
         :NEW.SUPP_SM,
         :NEW.SUPP_CATG,
         :NEW.SUPP_MODE_PYMT,
         :NEW.SUPP_BANK_ACNT,
         :NEW.SUPP_BANK_NAME,
         :NEW.SUPP_BANK_BRANCH,
         :NEW.SUPP_DESC,
         :NEW.SUPP_CR_UID,
         :NEW.SUPP_CR_DT,
         :NEW.SUPP_FRZ_FLAG,
         :NEW.SUPP_FAX,
         :NEW.SUPP_BANK_ADD1,
         :NEW.SUPP_BANK_ADD2,
         :NEW.SUPP_BANK_ADD3,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.SUPP_BL_NAME,
         :NEW.SUPP_BL_NAME,
         :OLD.SUPP_BL_SHORT_NAME,
         :NEW.SUPP_BL_SHORT_NAME,
         :OLD.SUPP_BL_ADD_1,
         :NEW.SUPP_BL_ADD_1,
         :OLD.SUPP_BL_ADD_2,
         :NEW.SUPP_BL_ADD_2,
         :OLD.SUPP_BL_ADD_3,
         :NEW.SUPP_BL_ADD_3) ;
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_SUPPLIER (
         :OLD.SUPP_CODE,
         :OLD.SUPP_NAME,
         :OLD.SUPP_SHORT_NAME,
         :OLD.SUPP_ADD_1,
         :OLD.SUPP_ADD_2,
         :OLD.SUPP_ADD_3,
         :OLD.SUPP_COUNTRY,
         :OLD.SUPP_PHONE,
         :OLD.SUPP_TELEX_FAX,
         :OLD.SUPP_MAIN_ACNT_CODE,
         :OLD.SUPP_CR_LMT_AMT,
         :OLD.SUPP_CR_LMT_DAYS,
         :OLD.SUPP_CONTACT,
         :OLD.SUPP_AREA,
         :OLD.SUPP_SM,
         :OLD.SUPP_CATG,
         :OLD.SUPP_MODE_PYMT,
         :OLD.SUPP_BANK_ACNT,
         :OLD.SUPP_BANK_NAME,
         :OLD.SUPP_BANK_BRANCH,
         :OLD.SUPP_DESC,
         :OLD.SUPP_CR_UID,
         :OLD.SUPP_CR_DT,
         :OLD.SUPP_FRZ_FLAG,
         :OLD.SUPP_FAX,
         :OLD.SUPP_BANK_ADD1,
         :OLD.SUPP_BANK_ADD2,
         :OLD.SUPP_BANK_ADD3,
         NEW_SUPP_CODE,
         NEW_SUPP_NAME,
         NEW_SUPP_SHORT_NAME,
         NEW_SUPP_ADD_1,
         NEW_SUPP_ADD_2,
         NEW_SUPP_ADD_3,
         NEW_SUPP_COUNTRY,
         NEW_SUPP_PHONE,
         NEW_SUPP_TELEX_FAX,
         NEW_SUPP_MAIN_ACNT_CODE,
         NEW_SUPP_CR_LMT_AMT,
         NEW_SUPP_CR_LMT_DAYS,
         NEW_SUPP_CONTACT,
         NEW_SUPP_AREA,
         NEW_SUPP_SM,
         NEW_SUPP_CATG,
         NEW_SUPP_MODE_PYMT,
         NEW_SUPP_BANK_ACNT,
         NEW_SUPP_BANK_NAME,
         NEW_SUPP_BANK_BRANCH,
         NEW_SUPP_DESC,
         NEW_SUPP_CR_UID,
         NEW_SUPP_CR_DT,
         NEW_SUPP_FRZ_FLAG,
         NEW_SUPP_FAX,
         NEW_SUPP_BANK_ADD1,
         NEW_SUPP_BANK_ADD2,
         NEW_SUPP_BANK_ADD3,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.SUPP_BL_NAME,
         NEW_SUPP_BL_NAME,
         :OLD.SUPP_BL_SHORT_NAME,
         NEW_SUPP_BL_SHORT_NAME,
         :OLD.SUPP_BL_ADD_1,
         NEW_SUPP_BL_ADD_1,
         :OLD.SUPP_BL_ADD_2,
         NEW_SUPP_BL_ADD_2,
         :OLD.SUPP_BL_ADD_3,
         NEW_SUPP_BL_ADD_3) ;
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7"."TRG_FM_TRANSACTION" BEFORE INSERT OR DELETE OR UPDATE ON FINAL7.FM_TRANSACTION REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW  
DECLARE
 NEW_TRAN_CODE             VARCHAR2(1) := NULL;
 NEW_TRAN_TYPE             VARCHAR2(1) := NULL;
 NEW_TRAN_NAME             VARCHAR2(1) := NULL;
 NEW_TRAN_BL_NAME          VARCHAR2(1) := NULL;
 NEW_TRAN_DR_HEADER        VARCHAR2(1) := NULL;
 NEW_TRAN_CR_HEADER        VARCHAR2(1) := NULL;
 NEW_TRAN_CASH_BANK_FLAG   VARCHAR2(1) := NULL;
 NEW_TRAN_DFLT_MAIN_ACNT_CODE VARCHAR2(1) := NULL;
 NEW_TRAN_DFLT_SUB_ACNT_CODE  VARCHAR2(1) := NULL;
 NEW_TRAN_MODE_POSTING     VARCHAR2(1) := NULL;
 NEW_TRAN_ACNT_CATG        VARCHAR2(1) := NULL;
 NEW_TRAN_MIN_AMT          NUMBER(1) := NULL;
 NEW_TRAN_MAX_AMT          NUMBER(1) := NULL;
 NEW_TRAN_SELF_REV         VARCHAR2(1) := NULL;
 NEW_TRAN_EXGE_RATE_APPLY  VARCHAR2(1) := NULL;
 NEW_TRAN_AUTO_PRINT_FLAG  VARCHAR2(1) := NULL;
 NEW_TRAN_CTL_TOTAL        VARCHAR2(1) := NULL;
 NEW_TRAN_DOC_NO_GENERATE  VARCHAR2(1) := NULL;
 NEW_TRAN_PRINT_NARR_FLAG  VARCHAR2(1) := NULL;
 NEW_TRAN_CR_UID           VARCHAR2(1) := NULL;
 NEW_TRAN_CR_DT            DATE        := NULL;
 NEW_TRAN_FRZ_FLAG         VARCHAR2(1) := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_TRANSACTION (
         :OLD.TRAN_CODE,
         :OLD.TRAN_TYPE,
         :OLD.TRAN_NAME,
         :OLD.TRAN_DR_HEADER,
         :OLD.TRAN_CR_HEADER,
         :OLD.TRAN_CASH_BANK_FLAG,
         :OLD.TRAN_DFLT_MAIN_ACNT_CODE,
         :OLD.TRAN_DFLT_SUB_ACNT_CODE,
         :OLD.TRAN_MODE_POSTING,
         :OLD.TRAN_ACNT_CATG,
         :OLD.TRAN_MIN_AMT,
         :OLD.TRAN_MAX_AMT,
         :OLD.TRAN_SELF_REV,
         :OLD.TRAN_EXGE_RATE_APPLY,
         :OLD.TRAN_AUTO_PRINT_FLAG,
         :OLD.TRAN_CTL_TOTAL,
         :OLD.TRAN_DOC_NO_GENERATE,
         :OLD.TRAN_PRINT_NARR_FLAG,
         :OLD.TRAN_CR_UID,
         :OLD.TRAN_CR_DT,
         :OLD.TRAN_FRZ_FLAG,
         :NEW.TRAN_CODE,
         :NEW.TRAN_TYPE,
         :NEW.TRAN_NAME,
         :NEW.TRAN_DR_HEADER,
         :NEW.TRAN_CR_HEADER,
         :NEW.TRAN_CASH_BANK_FLAG,
         :NEW.TRAN_DFLT_MAIN_ACNT_CODE,
         :NEW.TRAN_DFLT_SUB_ACNT_CODE,
         :NEW.TRAN_MODE_POSTING,
         :NEW.TRAN_ACNT_CATG,
         :NEW.TRAN_MIN_AMT,
         :NEW.TRAN_MAX_AMT,
         :NEW.TRAN_SELF_REV,
         :NEW.TRAN_EXGE_RATE_APPLY,
         :NEW.TRAN_AUTO_PRINT_FLAG,
         :NEW.TRAN_CTL_TOTAL,
         :NEW.TRAN_DOC_NO_GENERATE,
         :NEW.TRAN_PRINT_NARR_FLAG,
         :NEW.TRAN_CR_UID,
         :NEW.TRAN_CR_DT,
         :NEW.TRAN_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.TRAN_BL_NAME,
         :NEW.TRAN_BL_NAME) ;
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_TRANSACTION (
         :OLD.TRAN_CODE,
         :OLD.TRAN_TYPE,
         :OLD.TRAN_NAME,
         :OLD.TRAN_DR_HEADER,
         :OLD.TRAN_CR_HEADER,
         :OLD.TRAN_CASH_BANK_FLAG,
         :OLD.TRAN_DFLT_MAIN_ACNT_CODE,
         :OLD.TRAN_DFLT_SUB_ACNT_CODE,
         :OLD.TRAN_MODE_POSTING,
         :OLD.TRAN_ACNT_CATG,
         :OLD.TRAN_MIN_AMT,
         :OLD.TRAN_MAX_AMT,
         :OLD.TRAN_SELF_REV,
         :OLD.TRAN_EXGE_RATE_APPLY,
         :OLD.TRAN_AUTO_PRINT_FLAG,
         :OLD.TRAN_CTL_TOTAL,
         :OLD.TRAN_DOC_NO_GENERATE,
         :OLD.TRAN_PRINT_NARR_FLAG,
         :OLD.TRAN_CR_UID,
         :OLD.TRAN_CR_DT,
         :OLD.TRAN_FRZ_FLAG,
         NEW_TRAN_CODE,
         NEW_TRAN_TYPE,
         NEW_TRAN_NAME,
         NEW_TRAN_DR_HEADER,
         NEW_TRAN_CR_HEADER,
         NEW_TRAN_CASH_BANK_FLAG,
         NEW_TRAN_DFLT_MAIN_ACNT_CODE,
         NEW_TRAN_DFLT_SUB_ACNT_CODE,
         NEW_TRAN_MODE_POSTING,
         NEW_TRAN_ACNT_CATG,
         NEW_TRAN_MIN_AMT,
         NEW_TRAN_MAX_AMT,
         NEW_TRAN_SELF_REV,
         NEW_TRAN_EXGE_RATE_APPLY,
         NEW_TRAN_AUTO_PRINT_FLAG,
         NEW_TRAN_CTL_TOTAL,
         NEW_TRAN_DOC_NO_GENERATE,
         NEW_TRAN_PRINT_NARR_FLAG,
         NEW_TRAN_CR_UID,
         NEW_TRAN_CR_DT,
         NEW_TRAN_FRZ_FLAG,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.TRAN_BL_NAME,
         NEW_TRAN_BL_NAME) ;
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;


/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FM_TRAN_APPR_GROUP
BEFORE INSERT OR UPDATE OR DELETE ON FM_TRAN_APPR_GROUP
FOR EACH ROW
DECLARE
 NEW_TAG_TRAN_CODE         VARCHAR2(1) := NULL;
 NEW_TAG_GROUP_CODE        VARCHAR2(1) := NULL;
 NEW_TAG_CR_UID            VARCHAR2(1) := NULL;
 NEW_TAG_CR_DT             DATE        := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_TRAN_APPR_GROUP (
         :OLD.TAG_TRAN_CODE,
         :OLD.TAG_GROUP_CODE,
         :OLD.TAG_CR_UID,
         :OLD.TAG_CR_DT,
         :NEW.TAG_TRAN_CODE,
         :NEW.TAG_GROUP_CODE,
         :NEW.TAG_CR_UID,
         :NEW.TAG_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_TRAN_APPR_GROUP (
         :OLD.TAG_TRAN_CODE,
         :OLD.TAG_GROUP_CODE,
         :OLD.TAG_CR_UID,
         :OLD.TAG_CR_DT,
         NEW_TAG_TRAN_CODE,
         NEW_TAG_GROUP_CODE,
         NEW_TAG_CR_UID,
         NEW_TAG_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FM_TRAN_APPR_LEVEL
BEFORE INSERT OR UPDATE OR DELETE ON FM_TRAN_APPR_LEVEL
FOR EACH ROW
DECLARE
 NEW_ALVL_TRAN_CODE        VARCHAR2(1) := NULL;
 NEW_ALVL_USR_LVL          NUMBER(1) := NULL;
 NEW_ALVL_USR_AMT_FRM      NUMBER(1) := NULL;
 NEW_ALVL_USR_AMT_TO       NUMBER(1) := NULL;
 NEW_ALVL_CR_UID           VARCHAR2(1) := NULL;
 NEW_ALVL_CR_DT            DATE        := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_TRAN_APPR_LEVEL (
         :OLD.ALVL_TRAN_CODE,
         :OLD.ALVL_USR_LVL,
         :OLD.ALVL_USR_AMT_FRM,
         :OLD.ALVL_USR_AMT_TO,
         :OLD.ALVL_CR_UID,
         :OLD.ALVL_CR_DT,
         :NEW.ALVL_TRAN_CODE,
         :NEW.ALVL_USR_LVL,
         :NEW.ALVL_USR_AMT_FRM,
         :NEW.ALVL_USR_AMT_TO,
         :NEW.ALVL_CR_UID,
         :NEW.ALVL_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_TRAN_APPR_LEVEL (
         :OLD.ALVL_TRAN_CODE,
         :OLD.ALVL_USR_LVL,
         :OLD.ALVL_USR_AMT_FRM,
         :OLD.ALVL_USR_AMT_TO,
         :OLD.ALVL_CR_UID,
         :OLD.ALVL_CR_DT,
         NEW_ALVL_TRAN_CODE,
         NEW_ALVL_USR_LVL,
         NEW_ALVL_USR_AMT_FRM,
         NEW_ALVL_USR_AMT_TO,
         NEW_ALVL_CR_UID,
         NEW_ALVL_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FM_VALID_COMB
BEFORE INSERT OR UPDATE OR DELETE ON FM_VALID_COMB
FOR EACH ROW
DECLARE
 NEW_VCM_SEQ_NO                NUMBER(1) := NULL;
 NEW_VCM_LOW_COMP_CODE         VARCHAR2(1) := NULL;
 NEW_VCM_LOW_MAIN_ACNT_CODE    VARCHAR2(1) := NULL;
 NEW_VCM_LOW_SUB_ACNT_CODE     VARCHAR2(1) := NULL;
 NEW_VCM_LOW_DIVN_CODE         VARCHAR2(1) := NULL;
 NEW_VCM_LOW_DEPT_CODE         VARCHAR2(1) := NULL;
 NEW_VCM_LOW_ANLY_CODE_1       VARCHAR2(1) := NULL;
 NEW_VCM_LOW_ANLY_CODE_2       VARCHAR2(1) := NULL;
 NEW_VCM_HIGH_COMP_CODE        VARCHAR2(1) := NULL;
 NEW_VCM_HIGH_MAIN_ACNT_CODE   VARCHAR2(1) := NULL;
 NEW_VCM_HIGH_SUB_ACNT_CODE    VARCHAR2(1) := NULL;
 NEW_VCM_HIGH_DIVN_CODE        VARCHAR2(1) := NULL;
 NEW_VCM_HIGH_DEPT_CODE        VARCHAR2(1) := NULL;
 NEW_VCM_HIGH_ANLY_CODE_1      VARCHAR2(1) := NULL;
 NEW_VCM_HIGH_ANLY_CODE_2      VARCHAR2(1) := NULL;
 NEW_VCM_IE_CODE               VARCHAR2(1) := NULL;
 NEW_VCM_ERROR_MSG             VARCHAR2(1) := NULL;
 NEW_VCM_CR_UID                VARCHAR2(1) := NULL;
 NEW_VCM_CR_DT                 DATE        := NULL;
 TRG_MODE                      VARCHAR2(1);
 TRG_ERR_NO                    NUMBER(6);
 TRG_ERR_MSG                   VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_VALID_COMB (
         :OLD.VCM_SEQ_NO,
         :OLD.VCM_LOW_COMP_CODE,
         :OLD.VCM_LOW_MAIN_ACNT_CODE,
         :OLD.VCM_LOW_SUB_ACNT_CODE,
         :OLD.VCM_LOW_DIVN_CODE,
         :OLD.VCM_LOW_DEPT_CODE,
         :OLD.VCM_LOW_ANLY_CODE_1,
         :OLD.VCM_LOW_ANLY_CODE_2,
         :OLD.VCM_HIGH_COMP_CODE,
         :OLD.VCM_HIGH_MAIN_ACNT_CODE,
         :OLD.VCM_HIGH_SUB_ACNT_CODE,
         :OLD.VCM_HIGH_DIVN_CODE,
         :OLD.VCM_HIGH_DEPT_CODE,
         :OLD.VCM_HIGH_ANLY_CODE_1,
         :OLD.VCM_HIGH_ANLY_CODE_2,
         :OLD.VCM_IE_CODE,
         :OLD.VCM_ERROR_MSG,
         :OLD.VCM_CR_UID,
         :OLD.VCM_CR_DT,
         :NEW.VCM_SEQ_NO,
         :NEW.VCM_LOW_COMP_CODE,
         :NEW.VCM_LOW_MAIN_ACNT_CODE,
         :NEW.VCM_LOW_SUB_ACNT_CODE,
         :NEW.VCM_LOW_DIVN_CODE,
         :NEW.VCM_LOW_DEPT_CODE,
         :NEW.VCM_LOW_ANLY_CODE_1,
         :NEW.VCM_LOW_ANLY_CODE_2,
         :NEW.VCM_HIGH_COMP_CODE,
         :NEW.VCM_HIGH_MAIN_ACNT_CODE,
         :NEW.VCM_HIGH_SUB_ACNT_CODE,
         :NEW.VCM_HIGH_DIVN_CODE,
         :NEW.VCM_HIGH_DEPT_CODE,
         :NEW.VCM_HIGH_ANLY_CODE_1,
         :NEW.VCM_HIGH_ANLY_CODE_2,
         :NEW.VCM_IE_CODE,
         :NEW.VCM_ERROR_MSG,
         :NEW.VCM_CR_UID,
         :NEW.VCM_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_VALID_COMB (
         :OLD.VCM_SEQ_NO,
         :OLD.VCM_LOW_COMP_CODE,
         :OLD.VCM_LOW_MAIN_ACNT_CODE,
         :OLD.VCM_LOW_SUB_ACNT_CODE,
         :OLD.VCM_LOW_DIVN_CODE,
         :OLD.VCM_LOW_DEPT_CODE,
         :OLD.VCM_LOW_ANLY_CODE_1,
         :OLD.VCM_LOW_ANLY_CODE_2,
         :OLD.VCM_HIGH_COMP_CODE,
         :OLD.VCM_HIGH_MAIN_ACNT_CODE,
         :OLD.VCM_HIGH_SUB_ACNT_CODE,
         :OLD.VCM_HIGH_DIVN_CODE,
         :OLD.VCM_HIGH_DEPT_CODE,
         :OLD.VCM_HIGH_ANLY_CODE_1,
         :OLD.VCM_HIGH_ANLY_CODE_2,
         :OLD.VCM_IE_CODE,
         :OLD.VCM_ERROR_MSG,
         :OLD.VCM_CR_UID,
         :OLD.VCM_CR_DT,
         NEW_VCM_SEQ_NO,
         NEW_VCM_LOW_COMP_CODE,
         NEW_VCM_LOW_MAIN_ACNT_CODE,
         NEW_VCM_LOW_SUB_ACNT_CODE,
         NEW_VCM_LOW_DIVN_CODE,
         NEW_VCM_LOW_DEPT_CODE,
         NEW_VCM_LOW_ANLY_CODE_1,
         NEW_VCM_LOW_ANLY_CODE_2,
         NEW_VCM_HIGH_COMP_CODE,
         NEW_VCM_HIGH_MAIN_ACNT_CODE,
         NEW_VCM_HIGH_SUB_ACNT_CODE,
         NEW_VCM_HIGH_DIVN_CODE,
         NEW_VCM_HIGH_DEPT_CODE,
         NEW_VCM_HIGH_ANLY_CODE_1,
         NEW_VCM_HIGH_ANLY_CODE_2,
         NEW_VCM_IE_CODE,
         NEW_VCM_ERROR_MSG,
         NEW_VCM_CR_UID,
         NEW_VCM_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7"."TRG_FM_YEARLY_BUDGET" BEFORE INSERT OR DELETE OR UPDATE ON FINAL7.FM_YEARLY_BUDGET REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW  
DECLARE
 NEW_YBUD_COMP_CODE        VARCHAR2(1) := NULL;
 NEW_YBUD_ACNT_YEAR        NUMBER(1) := NULL;
 NEW_YBUD_MAIN_ACNT_CODE   VARCHAR2(1) := NULL;
 NEW_YBUD_SUB_ACNT_CODE    VARCHAR2(1) := NULL;
 NEW_YBUD_DIVN_CODE        VARCHAR2(1) := NULL;
 NEW_YBUD_DEPT_CODE        VARCHAR2(1) := NULL;
 NEW_YBUD_HEAD_NO_1        NUMBER(1) := NULL;
 NEW_YBUD_ANLY_CODE_1      VARCHAR2(1) := NULL;
 NEW_YBUD_HEAD_NO_2        NUMBER(1) := NULL;
 NEW_YBUD_ANLY_CODE_2      VARCHAR2(1) := NULL;
 NEW_YBUD_ORGL_AMT         NUMBER(1) := NULL;
 NEW_YBUD_ORGL_DRCR_FLAG   VARCHAR2(1) := NULL;
 NEW_YBUD_REVI_AMT         NUMBER(1) := NULL;
 NEW_YBUD_REVI_DRCR_FLAG   VARCHAR2(1) := NULL;
 NEW_YBUD_YEAR_FLAG        VARCHAR2(1) := NULL;
 NEW_YBUD_CR_UID           VARCHAR2(1) := NULL;
 NEW_YBUD_CR_DT            DATE        := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FM_YEARLY_BUDGET (
         :OLD.YBUD_COMP_CODE,
         :OLD.YBUD_ACNT_YEAR,
         :OLD.YBUD_MAIN_ACNT_CODE,
         :OLD.YBUD_SUB_ACNT_CODE,
         :OLD.YBUD_DIVN_CODE,
         :OLD.YBUD_DEPT_CODE,
         :OLD.YBUD_HEAD_NO_1,
         :OLD.YBUD_ANLY_CODE_1,
         :OLD.YBUD_HEAD_NO_2,
         :OLD.YBUD_ANLY_CODE_2,
         :OLD.YBUD_ORGL_AMT,
         :OLD.YBUD_ORGL_DRCR_FLAG,
         :OLD.YBUD_REVI_AMT,
         :OLD.YBUD_REVI_DRCR_FLAG,
         :OLD.YBUD_YEAR_FLAG,
         :OLD.YBUD_CR_UID,
         :OLD.YBUD_CR_DT,
         :NEW.YBUD_COMP_CODE,
         :NEW.YBUD_ACNT_YEAR,
         :NEW.YBUD_MAIN_ACNT_CODE,
         :NEW.YBUD_SUB_ACNT_CODE,
         :NEW.YBUD_DIVN_CODE,
         :NEW.YBUD_DEPT_CODE,
         :NEW.YBUD_HEAD_NO_1,
         :NEW.YBUD_ANLY_CODE_1,
         :NEW.YBUD_HEAD_NO_2,
         :NEW.YBUD_ANLY_CODE_2,
         :NEW.YBUD_ORGL_AMT,
         :NEW.YBUD_ORGL_DRCR_FLAG,
         :NEW.YBUD_REVI_AMT,
         :NEW.YBUD_REVI_DRCR_FLAG,
         :NEW.YBUD_YEAR_FLAG,
         :NEW.YBUD_CR_UID,
         :NEW.YBUD_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FM_YEARLY_BUDGET (
         :OLD.YBUD_COMP_CODE,
         :OLD.YBUD_ACNT_YEAR,
         :OLD.YBUD_MAIN_ACNT_CODE,
         :OLD.YBUD_SUB_ACNT_CODE,
         :OLD.YBUD_DIVN_CODE,
         :OLD.YBUD_DEPT_CODE,
         :OLD.YBUD_HEAD_NO_1,
         :OLD.YBUD_ANLY_CODE_1,
         :OLD.YBUD_HEAD_NO_2,
         :OLD.YBUD_ANLY_CODE_2,
         :OLD.YBUD_ORGL_AMT,
         :OLD.YBUD_ORGL_DRCR_FLAG,
         :OLD.YBUD_REVI_AMT,
         :OLD.YBUD_REVI_DRCR_FLAG,
         :OLD.YBUD_YEAR_FLAG,
         :OLD.YBUD_CR_UID,
         :OLD.YBUD_CR_DT,
         NEW_YBUD_COMP_CODE,
         NEW_YBUD_ACNT_YEAR,
         NEW_YBUD_MAIN_ACNT_CODE,
         NEW_YBUD_SUB_ACNT_CODE,
         NEW_YBUD_DIVN_CODE,
         NEW_YBUD_DEPT_CODE,
         NEW_YBUD_HEAD_NO_1,
         NEW_YBUD_ANLY_CODE_1,
         NEW_YBUD_HEAD_NO_2,
         NEW_YBUD_ANLY_CODE_2,
         NEW_YBUD_ORGL_AMT,
         NEW_YBUD_ORGL_DRCR_FLAG,
         NEW_YBUD_REVI_AMT,
         NEW_YBUD_REVI_DRCR_FLAG,
         NEW_YBUD_YEAR_FLAG,
         NEW_YBUD_CR_UID,
         NEW_YBUD_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;


/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FS_PURGE_AUDIT_TRAIL
BEFORE INSERT OR UPDATE OR DELETE ON FS_PURGE_AUDIT_TRAIL
FOR EACH ROW
DECLARE
 NEW_PAT_KEY_NO            NUMBER(1) := NULL;
 NEW_PAT_ALL_CR_DT         DATE        := NULL;
 NEW_PAT_ORGN_CR_DT        DATE        := NULL;
 NEW_PAT_COMP_CR_DT        DATE        := NULL;
 NEW_PAT_DIVN_CR_DT        DATE        := NULL;
 NEW_PAT_DEPT_CR_DT        DATE        := NULL;
 NEW_PAT_TC_CR_DT          DATE        := NULL;
 NEW_PAT_TRAN_CR_DT        DATE        := NULL;
 NEW_PAT_TAG_CR_DT         DATE        := NULL;
 NEW_PAT_ALVL_CR_DT        DATE        := NULL;
 NEW_PAT_NARR_CR_DT        DATE        := NULL;
 NEW_PAT_ALL_COA_CR_DT     DATE        := NULL;
 NEW_PAT_COA_CR_DT         DATE        := NULL;
 NEW_PAT_LVL_CR_DT         DATE        := NULL;
 NEW_PAT_CAF_CR_DT         DATE        := NULL;
 NEW_PAT_MAIN_CR_DT        DATE        := NULL;
 NEW_PAT_SUB_CR_DT         DATE        := NULL;
 NEW_PAT_MS_CR_DT          DATE        := NULL;
 NEW_PAT_SCOMP_CR_DT       DATE        := NULL;
 NEW_PAT_SCURR_CR_DT       DATE        := NULL;
 NEW_PAT_ACOMP_CR_DT       DATE        := NULL;
 NEW_PAT_ACURR_CR_DT       DATE        := NULL;
 NEW_PAT_SUPP_CR_DT        DATE        := NULL;
 NEW_PAT_CUST_CR_DT        DATE        := NULL;
 NEW_PAT_CATG_CR_DT        DATE        := NULL;
 NEW_PAT_ALS_CR_DT         DATE        := NULL;
 NEW_PAT_ALL_ANLY_CR_DT    DATE        := NULL;
 NEW_PAT_ANLY_CR_DT        DATE        := NULL;
 NEW_PAT_AANLY_CR_DT       DATE        := NULL;
 NEW_PAT_AFM_CR_DT         DATE        := NULL;
 NEW_PAT_ALM_CR_DT         DATE        := NULL;
 NEW_PAT_AAL_CR_DT         DATE        := NULL;
 NEW_PAT_AAF_CR_DT         DATE        := NULL;
 NEW_PAT_ACTY_CR_DT        DATE        := NULL;
 NEW_PAT_AVAL_CR_DT        DATE        := NULL;
 NEW_PAT_PROC_CR_DT        DATE        := NULL;
 NEW_PAT_PHS_CR_DT         DATE        := NULL;
 NEW_PAT_PDS_CR_DT         DATE        := NULL;
 NEW_PAT_MISC_CR_DT        DATE        := NULL;
 NEW_PAT_CURR_CR_DT        DATE        := NULL;
 NEW_PAT_CER_CR_DT         DATE        := NULL;
 NEW_PAT_RHS_CR_DT         DATE        := NULL;
 NEW_PAT_RATIO_CR_DT       DATE        := NULL;
 NEW_PAT_VCM_CR_DT         DATE        := NULL;
 NEW_PAT_APER_CR_DT        DATE        := NULL;
 NEW_PAT_CR_UID            VARCHAR2(1) := NULL;
 NEW_PAT_CR_DT             DATE        := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FS_PURGE_AUDIT_TRAIL (
         :OLD.PAT_KEY_NO,
         :OLD.PAT_ALL_CR_DT,
         :OLD.PAT_ORGN_CR_DT,
         :OLD.PAT_COMP_CR_DT,
         :OLD.PAT_DIVN_CR_DT,
         :OLD.PAT_DEPT_CR_DT,
         :OLD.PAT_TC_CR_DT,
         :OLD.PAT_TRAN_CR_DT,
         :OLD.PAT_TAG_CR_DT,
         :OLD.PAT_ALVL_CR_DT,
         :OLD.PAT_NARR_CR_DT,
         :OLD.PAT_ALL_COA_CR_DT,
         :OLD.PAT_COA_CR_DT,
         :OLD.PAT_LVL_CR_DT,
         :OLD.PAT_CAF_CR_DT,
         :OLD.PAT_MAIN_CR_DT,
         :OLD.PAT_SUB_CR_DT,
         :OLD.PAT_MS_CR_DT,
         :OLD.PAT_SCOMP_CR_DT,
         :OLD.PAT_SCURR_CR_DT,
         :OLD.PAT_ACOMP_CR_DT,
         :OLD.PAT_ACURR_CR_DT,
         :OLD.PAT_SUPP_CR_DT,
         :OLD.PAT_CUST_CR_DT,
         :OLD.PAT_CATG_CR_DT,
         :OLD.PAT_ALS_CR_DT,
         :OLD.PAT_ALL_ANLY_CR_DT,
         :OLD.PAT_ANLY_CR_DT,
         :OLD.PAT_AANLY_CR_DT,
         :OLD.PAT_AFM_CR_DT,
         :OLD.PAT_ALM_CR_DT,
         :OLD.PAT_AAL_CR_DT,
         :OLD.PAT_AAF_CR_DT,
         :OLD.PAT_ACTY_CR_DT,
         :OLD.PAT_AVAL_CR_DT,
         :OLD.PAT_PROC_CR_DT,
         :OLD.PAT_PHS_CR_DT,
         :OLD.PAT_PDS_CR_DT,
         :OLD.PAT_MISC_CR_DT,
         :OLD.PAT_CURR_CR_DT,
         :OLD.PAT_CER_CR_DT,
         :OLD.PAT_RHS_CR_DT,
         :OLD.PAT_RATIO_CR_DT,
         :OLD.PAT_VCM_CR_DT,
         :OLD.PAT_APER_CR_DT,
         :OLD.PAT_CR_UID,
         :OLD.PAT_CR_DT,
         :NEW.PAT_KEY_NO,
         :NEW.PAT_ALL_CR_DT,
         :NEW.PAT_ORGN_CR_DT,
         :NEW.PAT_COMP_CR_DT,
         :NEW.PAT_DIVN_CR_DT,
         :NEW.PAT_DEPT_CR_DT,
         :NEW.PAT_TC_CR_DT,
         :NEW.PAT_TRAN_CR_DT,
         :NEW.PAT_TAG_CR_DT,
         :NEW.PAT_ALVL_CR_DT,
         :NEW.PAT_NARR_CR_DT,
         :NEW.PAT_ALL_COA_CR_DT,
         :NEW.PAT_COA_CR_DT,
         :NEW.PAT_LVL_CR_DT,
         :NEW.PAT_CAF_CR_DT,
         :NEW.PAT_MAIN_CR_DT,
         :NEW.PAT_SUB_CR_DT,
         :NEW.PAT_MS_CR_DT,
         :NEW.PAT_SCOMP_CR_DT,
         :NEW.PAT_SCURR_CR_DT,
         :NEW.PAT_ACOMP_CR_DT,
         :NEW.PAT_ACURR_CR_DT,
         :NEW.PAT_SUPP_CR_DT,
         :NEW.PAT_CUST_CR_DT,
         :NEW.PAT_CATG_CR_DT,
         :NEW.PAT_ALS_CR_DT,
         :NEW.PAT_ALL_ANLY_CR_DT,
         :NEW.PAT_ANLY_CR_DT,
         :NEW.PAT_AANLY_CR_DT,
         :NEW.PAT_AFM_CR_DT,
         :NEW.PAT_ALM_CR_DT,
         :NEW.PAT_AAL_CR_DT,
         :NEW.PAT_AAF_CR_DT,
         :NEW.PAT_ACTY_CR_DT,
         :NEW.PAT_AVAL_CR_DT,
         :NEW.PAT_PROC_CR_DT,
         :NEW.PAT_PHS_CR_DT,
         :NEW.PAT_PDS_CR_DT,
         :NEW.PAT_MISC_CR_DT,
         :NEW.PAT_CURR_CR_DT,
         :NEW.PAT_CER_CR_DT,
         :NEW.PAT_RHS_CR_DT,
         :NEW.PAT_RATIO_CR_DT,
         :NEW.PAT_VCM_CR_DT,
         :NEW.PAT_APER_CR_DT,
         :NEW.PAT_CR_UID,
         :NEW.PAT_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FS_PURGE_AUDIT_TRAIL (
         :OLD.PAT_KEY_NO,
         :OLD.PAT_ALL_CR_DT,
         :OLD.PAT_ORGN_CR_DT,
         :OLD.PAT_COMP_CR_DT,
         :OLD.PAT_DIVN_CR_DT,
         :OLD.PAT_DEPT_CR_DT,
         :OLD.PAT_TC_CR_DT,
         :OLD.PAT_TRAN_CR_DT,
         :OLD.PAT_TAG_CR_DT,
         :OLD.PAT_ALVL_CR_DT,
         :OLD.PAT_NARR_CR_DT,
         :OLD.PAT_ALL_COA_CR_DT,
         :OLD.PAT_COA_CR_DT,
         :OLD.PAT_LVL_CR_DT,
         :OLD.PAT_CAF_CR_DT,
         :OLD.PAT_MAIN_CR_DT,
         :OLD.PAT_SUB_CR_DT,
         :OLD.PAT_MS_CR_DT,
         :OLD.PAT_SCOMP_CR_DT,
         :OLD.PAT_SCURR_CR_DT,
         :OLD.PAT_ACOMP_CR_DT,
         :OLD.PAT_ACURR_CR_DT,
         :OLD.PAT_SUPP_CR_DT,
         :OLD.PAT_CUST_CR_DT,
         :OLD.PAT_CATG_CR_DT,
         :OLD.PAT_ALS_CR_DT,
         :OLD.PAT_ALL_ANLY_CR_DT,
         :OLD.PAT_ANLY_CR_DT,
         :OLD.PAT_AANLY_CR_DT,
         :OLD.PAT_AFM_CR_DT,
         :OLD.PAT_ALM_CR_DT,
         :OLD.PAT_AAL_CR_DT,
         :OLD.PAT_AAF_CR_DT,
         :OLD.PAT_ACTY_CR_DT,
         :OLD.PAT_AVAL_CR_DT,
         :OLD.PAT_PROC_CR_DT,
         :OLD.PAT_PHS_CR_DT,
         :OLD.PAT_PDS_CR_DT,
         :OLD.PAT_MISC_CR_DT,
         :OLD.PAT_CURR_CR_DT,
         :OLD.PAT_CER_CR_DT,
         :OLD.PAT_RHS_CR_DT,
         :OLD.PAT_RATIO_CR_DT,
         :OLD.PAT_VCM_CR_DT,
         :OLD.PAT_APER_CR_DT,
         :OLD.PAT_CR_UID,
         :OLD.PAT_CR_DT,
         NEW_PAT_KEY_NO,
         NEW_PAT_ALL_CR_DT,
         NEW_PAT_ORGN_CR_DT,
         NEW_PAT_COMP_CR_DT,
         NEW_PAT_DIVN_CR_DT,
         NEW_PAT_DEPT_CR_DT,
         NEW_PAT_TC_CR_DT,
         NEW_PAT_TRAN_CR_DT,
         NEW_PAT_TAG_CR_DT,
         NEW_PAT_ALVL_CR_DT,
         NEW_PAT_NARR_CR_DT,
         NEW_PAT_ALL_COA_CR_DT,
         NEW_PAT_COA_CR_DT,
         NEW_PAT_LVL_CR_DT,
         NEW_PAT_CAF_CR_DT,
         NEW_PAT_MAIN_CR_DT,
         NEW_PAT_SUB_CR_DT,
         NEW_PAT_MS_CR_DT,
         NEW_PAT_SCOMP_CR_DT,
         NEW_PAT_SCURR_CR_DT,
         NEW_PAT_ACOMP_CR_DT,
         NEW_PAT_ACURR_CR_DT,
         NEW_PAT_SUPP_CR_DT,
         NEW_PAT_CUST_CR_DT,
         NEW_PAT_CATG_CR_DT,
         NEW_PAT_ALS_CR_DT,
         NEW_PAT_ALL_ANLY_CR_DT,
         NEW_PAT_ANLY_CR_DT,
         NEW_PAT_AANLY_CR_DT,
         NEW_PAT_AFM_CR_DT,
         NEW_PAT_ALM_CR_DT,
         NEW_PAT_AAL_CR_DT,
         NEW_PAT_AAF_CR_DT,
         NEW_PAT_ACTY_CR_DT,
         NEW_PAT_AVAL_CR_DT,
         NEW_PAT_PROC_CR_DT,
         NEW_PAT_PHS_CR_DT,
         NEW_PAT_PDS_CR_DT,
         NEW_PAT_MISC_CR_DT,
         NEW_PAT_CURR_CR_DT,
         NEW_PAT_CER_CR_DT,
         NEW_PAT_RHS_CR_DT,
         NEW_PAT_RATIO_CR_DT,
         NEW_PAT_VCM_CR_DT,
         NEW_PAT_APER_CR_DT,
         NEW_PAT_CR_UID,
         NEW_PAT_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7"."TRG_FT_ALLOCATION_JV" BEFORE INSERT OR DELETE OR UPDATE ON FINAL7.FT_ALLOCATION_JV REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW  
DECLARE
 NEW_AJV_KEY_NO            NUMBER(1) := NULL;
 NEW_AJV_REF_COMP_CODE     VARCHAR2(1) := NULL;
 NEW_AJV_REF_ACNT_YEAR     NUMBER(1) := NULL;
 NEW_AJV_REF_TRAN_CODE     VARCHAR2(1) := NULL;
 NEW_AJV_REF_DOC_NO        NUMBER(1) := NULL;
 NEW_AJV_REF_SEQ_NO        NUMBER(1) := NULL;
 NEW_AJV_COMP_CODE         VARCHAR2(1) := NULL;
 NEW_AJV_TRAN_CODE         VARCHAR2(1) := NULL;
 NEW_AJV_START_DT          DATE        := NULL;
 NEW_AJV_UPTO_DT           DATE        := NULL;
 NEW_AJV_DOC_AMT           NUMBER(1) := NULL;
 NEW_AJV_MAIN_ACNT_CODE    VARCHAR2(1) := NULL;
 NEW_AJV_SUB_ACNT_CODE     VARCHAR2(1) := NULL;
 NEW_AJV_DEPT_CODE         VARCHAR2(1) := NULL;
 NEW_AJV_DIVN_CODE         VARCHAR2(1) := NULL;
 NEW_AJV_HEAD_NO_1         NUMBER(1) := NULL;
 NEW_AJV_ANLY_CODE_1       VARCHAR2(1) := NULL;
 NEW_AJV_HEAD_NO_2         NUMBER(1) := NULL;
 NEW_AJV_ANLY_CODE_2       VARCHAR2(1) := NULL;
 NEW_AJV_ACTY_CODE_1       VARCHAR2(1) := NULL;
 NEW_AJV_ACTY_CODE_2       VARCHAR2(1) := NULL;
 NEW_AJV_CR_UID            VARCHAR2(1) := NULL;
 NEW_AJV_CR_DT             DATE        := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FT_ALLOCATION_JV (
         :OLD.AJV_KEY_NO,
         :OLD.AJV_REF_COMP_CODE,
         :OLD.AJV_REF_ACNT_YEAR,
         :OLD.AJV_REF_TRAN_CODE,
         :OLD.AJV_REF_DOC_NO,
         :OLD.AJV_REF_SEQ_NO,
         :OLD.AJV_COMP_CODE,
         :OLD.AJV_TRAN_CODE,
         :OLD.AJV_START_DT,
         :OLD.AJV_UPTO_DT,
         :OLD.AJV_DOC_AMT,
         :OLD.AJV_MAIN_ACNT_CODE,
         :OLD.AJV_SUB_ACNT_CODE,
         :OLD.AJV_DEPT_CODE,
         :OLD.AJV_DIVN_CODE,
         :OLD.AJV_HEAD_NO_1,
         :OLD.AJV_ANLY_CODE_1,
         :OLD.AJV_HEAD_NO_2,
         :OLD.AJV_ANLY_CODE_2,
         :OLD.AJV_ACTY_CODE_1,
         :OLD.AJV_ACTY_CODE_2,
         :OLD.AJV_CR_UID,
         :OLD.AJV_CR_DT,
         :NEW.AJV_KEY_NO,
         :NEW.AJV_REF_COMP_CODE,
         :NEW.AJV_REF_ACNT_YEAR,
         :NEW.AJV_REF_TRAN_CODE,
         :NEW.AJV_REF_DOC_NO,
         :NEW.AJV_REF_SEQ_NO,
         :NEW.AJV_COMP_CODE,
         :NEW.AJV_TRAN_CODE,
         :NEW.AJV_START_DT,
         :NEW.AJV_UPTO_DT,
         :NEW.AJV_DOC_AMT,
         :NEW.AJV_MAIN_ACNT_CODE,
         :NEW.AJV_SUB_ACNT_CODE,
         :NEW.AJV_DEPT_CODE,
         :NEW.AJV_DIVN_CODE,
         :NEW.AJV_HEAD_NO_1,
         :NEW.AJV_ANLY_CODE_1,
         :NEW.AJV_HEAD_NO_2,
         :NEW.AJV_ANLY_CODE_2,
         :NEW.AJV_ACTY_CODE_1,
         :NEW.AJV_ACTY_CODE_2,
         :NEW.AJV_CR_UID,
         :NEW.AJV_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FT_ALLOCATION_JV (
         :OLD.AJV_KEY_NO,
         :OLD.AJV_REF_COMP_CODE,
         :OLD.AJV_REF_ACNT_YEAR,
         :OLD.AJV_REF_TRAN_CODE,
         :OLD.AJV_REF_DOC_NO,
         :OLD.AJV_REF_SEQ_NO,
         :OLD.AJV_COMP_CODE,
         :OLD.AJV_TRAN_CODE,
         :OLD.AJV_START_DT,
         :OLD.AJV_UPTO_DT,
         :OLD.AJV_DOC_AMT,
         :OLD.AJV_MAIN_ACNT_CODE,
         :OLD.AJV_SUB_ACNT_CODE,
         :OLD.AJV_DEPT_CODE,
         :OLD.AJV_DIVN_CODE,
         :OLD.AJV_HEAD_NO_1,
         :OLD.AJV_ANLY_CODE_1,
         :OLD.AJV_HEAD_NO_2,
         :OLD.AJV_ANLY_CODE_2,
         :OLD.AJV_ACTY_CODE_1,
         :OLD.AJV_ACTY_CODE_2,
         :OLD.AJV_CR_UID,
         :OLD.AJV_CR_DT,
         NEW_AJV_KEY_NO,
         NEW_AJV_REF_COMP_CODE,
         NEW_AJV_REF_ACNT_YEAR,
         NEW_AJV_REF_TRAN_CODE,
         NEW_AJV_REF_DOC_NO,
         NEW_AJV_REF_SEQ_NO,
         NEW_AJV_COMP_CODE,
         NEW_AJV_TRAN_CODE,
         NEW_AJV_START_DT,
         NEW_AJV_UPTO_DT,
         NEW_AJV_DOC_AMT,
         NEW_AJV_MAIN_ACNT_CODE,
         NEW_AJV_SUB_ACNT_CODE,
         NEW_AJV_DEPT_CODE,
         NEW_AJV_DIVN_CODE,
         NEW_AJV_HEAD_NO_1,
         NEW_AJV_ANLY_CODE_1,
         NEW_AJV_HEAD_NO_2,
         NEW_AJV_ANLY_CODE_2,
         NEW_AJV_ACTY_CODE_1,
         NEW_AJV_ACTY_CODE_2,
         NEW_AJV_CR_UID,
         NEW_AJV_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;


/
CREATE OR REPLACE TRIGGER "FINAL7"."TRG_FT_BOUNCED_CHEQUE" BEFORE INSERT OR DELETE OR UPDATE ON FINAL7.FT_BOUNCED_CHEQUE REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW  
DECLARE
 NEW_BCT_KEY_NO            NUMBER(1) := NULL;
 NEW_BCT_COMP_CODE         VARCHAR2(1) := NULL;
 NEW_BCT_TRAN_CODE         VARCHAR2(1) := NULL;
 NEW_BCT_ACNT_YEAR         NUMBER(1) := NULL;
 NEW_BCT_DOC_NO            NUMBER(1) := NULL;
 NEW_BCT_SEQ_NO            NUMBER(1) := NULL;
 NEW_BCT_DOC_DT            DATE        := NULL;
 NEW_BCT_DOC_REF           VARCHAR2(1) := NULL;
 NEW_BCT_DESC              VARCHAR2(1) := NULL;
 NEW_BCT_REF_TRAN_CODE     VARCHAR2(1) := NULL;
 NEW_BCT_REF_ACNT_YEAR     NUMBER(1) := NULL;
 NEW_BCT_REF_DOC_NO        NUMBER(1) := NULL;
 NEW_BCT_REF_SEQ_NO        NUMBER(1) := NULL;
 NEW_BCT_CR_UID            VARCHAR2(1) := NULL;
 NEW_BCT_CR_DT             DATE        := NULL;
 NEW_BCT_BANK_MAIN_ACNT_CODE VARCHAR2(6) := NULL;
 NEW_BCT_BANK_SUB_ACNT_CODE  VARCHAR2(6) := NULL;
 NEW_BCT_BANK_CURR_CODE      VARCHAR2(3) := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FT_BOUNCED_CHEQUE (
         :OLD.BCT_KEY_NO,
         :OLD.BCT_COMP_CODE,
         :OLD.BCT_TRAN_CODE,
         :OLD.BCT_ACNT_YEAR,
         :OLD.BCT_DOC_NO,
         :OLD.BCT_SEQ_NO,
         :OLD.BCT_DOC_DT,
         :OLD.BCT_DOC_REF,
         :OLD.BCT_DESC,
         :OLD.BCT_REF_TRAN_CODE,
         :OLD.BCT_REF_ACNT_YEAR,
         :OLD.BCT_REF_DOC_NO,
         :OLD.BCT_REF_SEQ_NO,
         :OLD.BCT_CR_UID,
         :OLD.BCT_CR_DT,
         :OLD.BCT_BANK_MAIN_ACNT_CODE,
         :OLD.BCT_BANK_SUB_ACNT_CODE,
         :OLD.BCT_BANK_CURR_CODE    ,
         :NEW.BCT_KEY_NO,
         :NEW.BCT_COMP_CODE,
         :NEW.BCT_TRAN_CODE,
         :NEW.BCT_ACNT_YEAR,
         :NEW.BCT_DOC_NO,
         :NEW.BCT_SEQ_NO,
         :NEW.BCT_DOC_DT,
         :NEW.BCT_DOC_REF,
         :NEW.BCT_DESC,
         :NEW.BCT_REF_TRAN_CODE,
         :NEW.BCT_REF_ACNT_YEAR,
         :NEW.BCT_REF_DOC_NO,
         :NEW.BCT_REF_SEQ_NO,
         :NEW.BCT_CR_UID,
         :NEW.BCT_CR_DT,
         :NEW.BCT_BANK_MAIN_ACNT_CODE,
         :NEW.BCT_BANK_SUB_ACNT_CODE,
         :NEW.BCT_BANK_CURR_CODE    ,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FT_BOUNCED_CHEQUE (
         :OLD.BCT_KEY_NO,
         :OLD.BCT_COMP_CODE,
         :OLD.BCT_TRAN_CODE,
         :OLD.BCT_ACNT_YEAR,
         :OLD.BCT_DOC_NO,
         :OLD.BCT_SEQ_NO,
         :OLD.BCT_DOC_DT,
         :OLD.BCT_DOC_REF,
         :OLD.BCT_DESC,
         :OLD.BCT_REF_TRAN_CODE,
         :OLD.BCT_REF_ACNT_YEAR,
         :OLD.BCT_REF_DOC_NO,
         :OLD.BCT_REF_SEQ_NO,
         :OLD.BCT_CR_UID,
         :OLD.BCT_CR_DT,
         :OLD.BCT_BANK_MAIN_ACNT_CODE,
         :OLD.BCT_BANK_SUB_ACNT_CODE,
         :OLD.BCT_BANK_CURR_CODE,
         NEW_BCT_KEY_NO,
         NEW_BCT_COMP_CODE,
         NEW_BCT_TRAN_CODE,
         NEW_BCT_ACNT_YEAR,
         NEW_BCT_DOC_NO,
         NEW_BCT_SEQ_NO,
         NEW_BCT_DOC_DT,
         NEW_BCT_DOC_REF,
         NEW_BCT_DESC,
         NEW_BCT_REF_TRAN_CODE,
         NEW_BCT_REF_ACNT_YEAR,
         NEW_BCT_REF_DOC_NO,
         NEW_BCT_REF_SEQ_NO,
         NEW_BCT_CR_UID,
         NEW_BCT_CR_DT,
         NEW_BCT_BANK_MAIN_ACNT_CODE,
         NEW_BCT_BANK_SUB_ACNT_CODE,
         NEW_BCT_BANK_CURR_CODE,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;


/
CREATE OR REPLACE TRIGGER "FINAL7"."TRG_FT_CJV_DETAIL" BEFORE INSERT OR DELETE OR UPDATE ON FINAL7.FT_CJV_DETAIL REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW  
DECLARE
 NEW_CJVD_COMP_CODE           VARCHAR2(1) := NULL;
 NEW_CJVD_ORGL_ACNT_YEAR      NUMBER(1) := NULL;
 NEW_CJVD_ORGL_TRAN_CODE      VARCHAR2(1) := NULL;
 NEW_CJVD_ORGL_DOC_NO         NUMBER(1) := NULL;
 NEW_CJVD_ORGL_SEQ_NO         NUMBER(1) := NULL;
 NEW_CJVD_ORGL_MAIN_ACNT_CODE VARCHAR2(1) := NULL;
 NEW_CJVD_ORGL_SUB_ACNT_CODE  VARCHAR2(1) := NULL;
 NEW_CJVD_ORGL_DIVN_CODE      VARCHAR2(1) := NULL;
 NEW_CJVD_ORGL_DEPT_CODE      VARCHAR2(1) := NULL;
 NEW_CJVD_ORGL_ANLY_CODE_1    VARCHAR2(1) := NULL;
 NEW_CJVD_ORGL_ANLY_CODE_2    VARCHAR2(1) := NULL;
 NEW_CJVD_ORGL_ACTY_CODE_1    VARCHAR2(1) := NULL;
 NEW_CJVD_ORGL_ACTY_CODE_2    VARCHAR2(1) := NULL;
 NEW_CJVD_ORGL_CURR_CODE      VARCHAR2(1) := NULL;
 NEW_CJVD_ORGL_FC_AMT         NUMBER(1) := NULL;
 NEW_CJVD_ORGL_LC_AMT         NUMBER(1) := NULL;
 NEW_CJVD_ORGL_DOC_DRCR_FLAG  VARCHAR2(1) := NULL;
 NEW_CJVD_CORR_MAIN_ACNT_CODE VARCHAR2(1) := NULL;
 NEW_CJVD_CORR_SUB_ACNT_CODE  VARCHAR2(1) := NULL;
 NEW_CJVD_CORR_DIVN_CODE      VARCHAR2(1) := NULL;
 NEW_CJVD_CORR_DEPT_CODE      VARCHAR2(1) := NULL;
 NEW_CJVD_CORR_ANLY_CODE_1    VARCHAR2(1) := NULL;
 NEW_CJVD_CORR_ANLY_CODE_2    VARCHAR2(1) := NULL;
 NEW_CJVD_CORR_ACTY_CODE_1    VARCHAR2(1) := NULL;
 NEW_CJVD_CORR_ACTY_CODE_2    VARCHAR2(1) := NULL;
 NEW_CJVD_CR_UID              VARCHAR2(1) := NULL;
 NEW_CJVD_CR_DT               DATE        := NULL;
 TRG_MODE                     VARCHAR2(1);
 TRG_ERR_NO                   NUMBER(6);
 TRG_ERR_MSG                  VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FT_CJV_DETAIL (
         :OLD.CJVD_COMP_CODE,
         :OLD.CJVD_ORGL_ACNT_YEAR,
         :OLD.CJVD_ORGL_TRAN_CODE,
         :OLD.CJVD_ORGL_DOC_NO,
         :OLD.CJVD_ORGL_SEQ_NO,
         :OLD.CJVD_ORGL_MAIN_ACNT_CODE,
         :OLD.CJVD_ORGL_SUB_ACNT_CODE,
         :OLD.CJVD_ORGL_DIVN_CODE,
         :OLD.CJVD_ORGL_DEPT_CODE,
         :OLD.CJVD_ORGL_ANLY_CODE_1,
         :OLD.CJVD_ORGL_ANLY_CODE_2,
         :OLD.CJVD_ORGL_ACTY_CODE_1,
         :OLD.CJVD_ORGL_ACTY_CODE_2,
         :OLD.CJVD_ORGL_CURR_CODE,
         :OLD.CJVD_ORGL_FC_AMT,
         :OLD.CJVD_ORGL_LC_AMT,
         :OLD.CJVD_ORGL_DOC_DRCR_FLAG,
         :OLD.CJVD_CORR_MAIN_ACNT_CODE,
         :OLD.CJVD_CORR_SUB_ACNT_CODE,
         :OLD.CJVD_CORR_DIVN_CODE,
         :OLD.CJVD_CORR_DEPT_CODE,
         :OLD.CJVD_CORR_ANLY_CODE_1,
         :OLD.CJVD_CORR_ANLY_CODE_2,
         :OLD.CJVD_CORR_ACTY_CODE_1,
         :OLD.CJVD_CORR_ACTY_CODE_2,
         :OLD.CJVD_CR_UID,
         :OLD.CJVD_CR_DT,
         :NEW.CJVD_COMP_CODE,
         :NEW.CJVD_ORGL_ACNT_YEAR,
         :NEW.CJVD_ORGL_TRAN_CODE,
         :NEW.CJVD_ORGL_DOC_NO,
         :NEW.CJVD_ORGL_SEQ_NO,
         :NEW.CJVD_ORGL_MAIN_ACNT_CODE,
         :NEW.CJVD_ORGL_SUB_ACNT_CODE,
         :NEW.CJVD_ORGL_DIVN_CODE,
         :NEW.CJVD_ORGL_DEPT_CODE,
         :NEW.CJVD_ORGL_ANLY_CODE_1,
         :NEW.CJVD_ORGL_ANLY_CODE_2,
         :NEW.CJVD_ORGL_ACTY_CODE_1,
         :NEW.CJVD_ORGL_ACTY_CODE_2,
         :NEW.CJVD_ORGL_CURR_CODE,
         :NEW.CJVD_ORGL_FC_AMT,
         :NEW.CJVD_ORGL_LC_AMT,
         :NEW.CJVD_ORGL_DOC_DRCR_FLAG,
         :NEW.CJVD_CORR_MAIN_ACNT_CODE,
         :NEW.CJVD_CORR_SUB_ACNT_CODE,
         :NEW.CJVD_CORR_DIVN_CODE,
         :NEW.CJVD_CORR_DEPT_CODE,
         :NEW.CJVD_CORR_ANLY_CODE_1,
         :NEW.CJVD_CORR_ANLY_CODE_2,
         :NEW.CJVD_CORR_ACTY_CODE_1,
         :NEW.CJVD_CORR_ACTY_CODE_2,
         :NEW.CJVD_CR_UID,
         :NEW.CJVD_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FT_CJV_DETAIL (
         :OLD.CJVD_COMP_CODE,
         :OLD.CJVD_ORGL_ACNT_YEAR,
         :OLD.CJVD_ORGL_TRAN_CODE,
         :OLD.CJVD_ORGL_DOC_NO,
         :OLD.CJVD_ORGL_SEQ_NO,
         :OLD.CJVD_ORGL_MAIN_ACNT_CODE,
         :OLD.CJVD_ORGL_SUB_ACNT_CODE,
         :OLD.CJVD_ORGL_DIVN_CODE,
         :OLD.CJVD_ORGL_DEPT_CODE,
         :OLD.CJVD_ORGL_ANLY_CODE_1,
         :OLD.CJVD_ORGL_ANLY_CODE_2,
         :OLD.CJVD_ORGL_ACTY_CODE_1,
         :OLD.CJVD_ORGL_ACTY_CODE_2,
         :OLD.CJVD_ORGL_CURR_CODE,
         :OLD.CJVD_ORGL_FC_AMT,
         :OLD.CJVD_ORGL_LC_AMT,
         :OLD.CJVD_ORGL_DOC_DRCR_FLAG,
         :OLD.CJVD_CORR_MAIN_ACNT_CODE,
         :OLD.CJVD_CORR_SUB_ACNT_CODE,
         :OLD.CJVD_CORR_DIVN_CODE,
         :OLD.CJVD_CORR_DEPT_CODE,
         :OLD.CJVD_CORR_ANLY_CODE_1,
         :OLD.CJVD_CORR_ANLY_CODE_2,
         :OLD.CJVD_CORR_ACTY_CODE_1,
         :OLD.CJVD_CORR_ACTY_CODE_2,
         :OLD.CJVD_CR_UID,
         :OLD.CJVD_CR_DT,
         NEW_CJVD_COMP_CODE,
         NEW_CJVD_ORGL_ACNT_YEAR,
         NEW_CJVD_ORGL_TRAN_CODE,
         NEW_CJVD_ORGL_DOC_NO,
         NEW_CJVD_ORGL_SEQ_NO,
         NEW_CJVD_ORGL_MAIN_ACNT_CODE,
         NEW_CJVD_ORGL_SUB_ACNT_CODE,
         NEW_CJVD_ORGL_DIVN_CODE,
         NEW_CJVD_ORGL_DEPT_CODE,
         NEW_CJVD_ORGL_ANLY_CODE_1,
         NEW_CJVD_ORGL_ANLY_CODE_2,
         NEW_CJVD_ORGL_ACTY_CODE_1,
         NEW_CJVD_ORGL_ACTY_CODE_2,
         NEW_CJVD_ORGL_CURR_CODE,
         NEW_CJVD_ORGL_FC_AMT,
         NEW_CJVD_ORGL_LC_AMT,
         NEW_CJVD_ORGL_DOC_DRCR_FLAG,
         NEW_CJVD_CORR_MAIN_ACNT_CODE,
         NEW_CJVD_CORR_SUB_ACNT_CODE,
         NEW_CJVD_CORR_DIVN_CODE,
         NEW_CJVD_CORR_DEPT_CODE,
         NEW_CJVD_CORR_ANLY_CODE_1,
         NEW_CJVD_CORR_ANLY_CODE_2,
         NEW_CJVD_CORR_ACTY_CODE_1,
         NEW_CJVD_CORR_ACTY_CODE_2,
         NEW_CJVD_CR_UID,
         NEW_CJVD_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;


/
CREATE OR REPLACE TRIGGER "FINAL7"."TRG_FT_CORRECTION_JV" BEFORE INSERT OR DELETE OR UPDATE ON FINAL7.FT_CORRECTION_JV REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW  
DECLARE
 NEW_CJV_COMP_CODE         VARCHAR2(1) := NULL;
 NEW_CJV_ORGL_ACNT_YEAR    NUMBER(1) := NULL;
 NEW_CJV_ORGL_TRAN_CODE    VARCHAR2(1) := NULL;
 NEW_CJV_ORGL_DOC_NO       NUMBER(1) := NULL;
 NEW_CJV_ORGL_DOC_DT       DATE        := NULL;
 NEW_CJV_CORR_TRAN_CODE    VARCHAR2(1) := NULL;
 NEW_CJV_CORR_DOC_NO       NUMBER(1) := NULL;
 NEW_CJV_CORR_DOC_DT       DATE        := NULL;
 NEW_CJV_CORR_DESC         VARCHAR2(1) := NULL;
 NEW_CJV_CR_UID            VARCHAR2(1) := NULL;
 NEW_CJV_CR_DT             DATE        := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FT_CORRECTION_JV (
         :OLD.CJV_COMP_CODE,
         :OLD.CJV_ORGL_ACNT_YEAR,
         :OLD.CJV_ORGL_TRAN_CODE,
         :OLD.CJV_ORGL_DOC_NO,
         :OLD.CJV_ORGL_DOC_DT,
         :OLD.CJV_CORR_TRAN_CODE,
         :OLD.CJV_CORR_DOC_NO,
         :OLD.CJV_CORR_DOC_DT,
         :OLD.CJV_CORR_DESC,
         :OLD.CJV_CR_UID,
         :OLD.CJV_CR_DT,
         :NEW.CJV_COMP_CODE,
         :NEW.CJV_ORGL_ACNT_YEAR,
         :NEW.CJV_ORGL_TRAN_CODE,
         :NEW.CJV_ORGL_DOC_NO,
         :NEW.CJV_ORGL_DOC_DT,
         :NEW.CJV_CORR_TRAN_CODE,
         :NEW.CJV_CORR_DOC_NO,
         :NEW.CJV_CORR_DOC_DT,
         :NEW.CJV_CORR_DESC,
         :NEW.CJV_CR_UID,
         :NEW.CJV_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FT_CORRECTION_JV (
         :OLD.CJV_COMP_CODE,
         :OLD.CJV_ORGL_ACNT_YEAR,
         :OLD.CJV_ORGL_TRAN_CODE,
         :OLD.CJV_ORGL_DOC_NO,
         :OLD.CJV_ORGL_DOC_DT,
         :OLD.CJV_CORR_TRAN_CODE,
         :OLD.CJV_CORR_DOC_NO,
         :OLD.CJV_CORR_DOC_DT,
         :OLD.CJV_CORR_DESC,
         :OLD.CJV_CR_UID,
         :OLD.CJV_CR_DT,
         NEW_CJV_COMP_CODE,
         NEW_CJV_ORGL_ACNT_YEAR,
         NEW_CJV_ORGL_TRAN_CODE,
         NEW_CJV_ORGL_DOC_NO,
         NEW_CJV_ORGL_DOC_DT,
         NEW_CJV_CORR_TRAN_CODE,
         NEW_CJV_CORR_DOC_NO,
         NEW_CJV_CORR_DOC_DT,
         NEW_CJV_CORR_DESC,
         NEW_CJV_CR_UID,
         NEW_CJV_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;


/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FT_CUR_TRANS_DETAIL
BEFORE INSERT OR UPDATE OR DELETE ON FT_CUR_TRANS_DETAIL
FOR EACH ROW
DECLARE
 NEW_TD_COMP_CODE             VARCHAR2(1) := NULL;
 NEW_TD_ACNT_YEAR             NUMBER(1) := NULL;
 NEW_TD_TRAN_CODE             VARCHAR2(1) := NULL;
 NEW_TD_DOC_NO                NUMBER(1) := NULL;
 NEW_TD_SEQ_NO                NUMBER(1) := NULL;
 NEW_TD_MAIN_ACNT_CODE        VARCHAR2(1) := NULL;
 NEW_TD_SUB_ACNT_CODE         VARCHAR2(1) := NULL;
 NEW_TD_DIVN_CODE             VARCHAR2(1) := NULL;
 NEW_TD_DEPT_CODE             VARCHAR2(1) := NULL;
 NEW_TD_HEAD_NO_1             NUMBER(1) := NULL;
 NEW_TD_ANLY_CODE_1           VARCHAR2(1) := NULL;
 NEW_TD_HEAD_NO_2             NUMBER(1) := NULL;
 NEW_TD_ANLY_CODE_2           VARCHAR2(1) := NULL;
 NEW_TD_CURR_CODE             VARCHAR2(1) := NULL;
 NEW_TD_DOC_AMT               NUMBER(1) := NULL;
 NEW_TD_DOC_DRCR_FLAG         VARCHAR2(1) := NULL;
 NEW_TD_FC_AMT                NUMBER(1) := NULL;
 NEW_TD_DOC_REF               VARCHAR2(1) := NULL;
 NEW_TD_DOC_DUE_DT            DATE        := NULL;
 NEW_TD_OTH_REF               VARCHAR2(1) := NULL;
 NEW_TD_ACTY_VALUE_CODE_1     VARCHAR2(1) := NULL;
 NEW_TD_ACTY_VALUE_CODE_2     VARCHAR2(1) := NULL;
 NEW_TD_DESC                  VARCHAR2(1) := NULL;
 NEW_TD_DBK_PRINT_FLAG        VARCHAR2(1) := NULL;
 NEW_TD_LED_PRINT_FLAG        VARCHAR2(1) := NULL;
 NEW_TD_MONTH_PRC_FLAG        VARCHAR2(1) := NULL;
 NEW_TD_BILL_FC_AMT           NUMBER(1) := NULL;
 NEW_TD_BILL_LC_AMT           NUMBER(1) := NULL;
 NEW_TD_BILL_STATUS           VARCHAR2(1) := NULL;
 NEW_TD_PYMT_APPR_FLAG        VARCHAR2(1) := NULL;
 NEW_TD_CR_UID                VARCHAR2(1) := NULL;
 NEW_TD_CR_DT                 DATE        := NULL;
 NEW_TD_PYMT_LAST_APPR_FC_AMT NUMBER(1) := NULL;
 NEW_TD_PYMT_LAST_APPR_LC_AMT NUMBER(1) := NULL;
 NEW_TD_PYMT_LAST_APPR_BANK   VARCHAR2(1) := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
	TRG_MODE := 'I';
    ELSIF UPDATING THEN
	TRG_MODE := 'U';
    ELSIF DELETING THEN
	TRG_MODE := 'D';
    ELSE
	TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
	STP_FT_CUR_TRANS_DETAIL (
	 :OLD.TD_COMP_CODE,
	 :OLD.TD_ACNT_YEAR,
	 :OLD.TD_TRAN_CODE,
	 :OLD.TD_DOC_NO,
	 :OLD.TD_SEQ_NO,
	 :OLD.TD_MAIN_ACNT_CODE,
	 :OLD.TD_SUB_ACNT_CODE,
	 :OLD.TD_DIVN_CODE,
	 :OLD.TD_DEPT_CODE,
	 :OLD.TD_HEAD_NO_1,
	 :OLD.TD_ANLY_CODE_1,
	 :OLD.TD_HEAD_NO_2,
	 :OLD.TD_ANLY_CODE_2,
	 :OLD.TD_CURR_CODE,
	 :OLD.TD_DOC_AMT,
	 :OLD.TD_DOC_DRCR_FLAG,
	 :OLD.TD_FC_AMT,
	 :OLD.TD_DOC_REF,
	 :OLD.TD_DOC_DUE_DT,
	 :OLD.TD_OTH_REF,
	 :OLD.TD_ACTY_VALUE_CODE_1,
	 :OLD.TD_ACTY_VALUE_CODE_2,
	 :OLD.TD_DESC,
	 :OLD.TD_DBK_PRINT_FLAG,
	 :OLD.TD_LED_PRINT_FLAG,
	 :OLD.TD_MONTH_PRC_FLAG,
	 :OLD.TD_BILL_FC_AMT,
	 :OLD.TD_BILL_LC_AMT,
	 :OLD.TD_BILL_STATUS,
	 :OLD.TD_PYMT_APPR_FLAG,
	 :OLD.TD_CR_UID,
	 :OLD.TD_CR_DT,
	 :OLD.TD_PYMT_LAST_APPR_FC_AMT,
	 :OLD.TD_PYMT_LAST_APPR_LC_AMT,
	 :OLD.TD_PYMT_LAST_APPR_BANK,
	 :NEW.TD_COMP_CODE,
	 :NEW.TD_ACNT_YEAR,
	 :NEW.TD_TRAN_CODE,
	 :NEW.TD_DOC_NO,
	 :NEW.TD_SEQ_NO,
	 :NEW.TD_MAIN_ACNT_CODE,
	 :NEW.TD_SUB_ACNT_CODE,
	 :NEW.TD_DIVN_CODE,
	 :NEW.TD_DEPT_CODE,
	 :NEW.TD_HEAD_NO_1,
	 :NEW.TD_ANLY_CODE_1,
	 :NEW.TD_HEAD_NO_2,
	 :NEW.TD_ANLY_CODE_2,
	 :NEW.TD_CURR_CODE,
	 :NEW.TD_DOC_AMT,
	 :NEW.TD_DOC_DRCR_FLAG,
	 :NEW.TD_FC_AMT,
	 :NEW.TD_DOC_REF,
	 :NEW.TD_DOC_DUE_DT,
	 :NEW.TD_OTH_REF,
	 :NEW.TD_ACTY_VALUE_CODE_1,
	 :NEW.TD_ACTY_VALUE_CODE_2,
	 :NEW.TD_DESC,
	 :NEW.TD_DBK_PRINT_FLAG,
	 :NEW.TD_LED_PRINT_FLAG,
	 :NEW.TD_MONTH_PRC_FLAG,
	 :NEW.TD_BILL_FC_AMT,
	 :NEW.TD_BILL_LC_AMT,
	 :NEW.TD_BILL_STATUS,
	 :NEW.TD_PYMT_APPR_FLAG,
	 :NEW.TD_CR_UID,
	 :NEW.TD_CR_DT,
	 :NEW.TD_PYMT_LAST_APPR_FC_AMT,
	 :NEW.TD_PYMT_LAST_APPR_LC_AMT,
	 :NEW.TD_PYMT_LAST_APPR_BANK,
	 TRG_MODE,
	 TRG_ERR_NO,
	 TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
	STP_FT_CUR_TRANS_DETAIL (
	 :OLD.TD_COMP_CODE,
	 :OLD.TD_ACNT_YEAR,
	 :OLD.TD_TRAN_CODE,
	 :OLD.TD_DOC_NO,
	 :OLD.TD_SEQ_NO,
	 :OLD.TD_MAIN_ACNT_CODE,
	 :OLD.TD_SUB_ACNT_CODE,
	 :OLD.TD_DIVN_CODE,
	 :OLD.TD_DEPT_CODE,
	 :OLD.TD_HEAD_NO_1,
	 :OLD.TD_ANLY_CODE_1,
	 :OLD.TD_HEAD_NO_2,
	 :OLD.TD_ANLY_CODE_2,
	 :OLD.TD_CURR_CODE,
	 :OLD.TD_DOC_AMT,
	 :OLD.TD_DOC_DRCR_FLAG,
	 :OLD.TD_FC_AMT,
	 :OLD.TD_DOC_REF,
	 :OLD.TD_DOC_DUE_DT,
	 :OLD.TD_OTH_REF,
	 :OLD.TD_ACTY_VALUE_CODE_1,
	 :OLD.TD_ACTY_VALUE_CODE_2,
	 :OLD.TD_DESC,
	 :OLD.TD_DBK_PRINT_FLAG,
	 :OLD.TD_LED_PRINT_FLAG,
	 :OLD.TD_MONTH_PRC_FLAG,
	 :OLD.TD_BILL_FC_AMT,
	 :OLD.TD_BILL_LC_AMT,
	 :OLD.TD_BILL_STATUS,
	 :OLD.TD_PYMT_APPR_FLAG,
	 :OLD.TD_CR_UID,
	 :OLD.TD_CR_DT,
	 :OLD.TD_PYMT_LAST_APPR_FC_AMT,
	 :OLD.TD_PYMT_LAST_APPR_LC_AMT,
	 :OLD.TD_PYMT_LAST_APPR_BANK,
	 NEW_TD_COMP_CODE,
	 NEW_TD_ACNT_YEAR,
	 NEW_TD_TRAN_CODE,
	 NEW_TD_DOC_NO,
	 NEW_TD_SEQ_NO,
	 NEW_TD_MAIN_ACNT_CODE,
	 NEW_TD_SUB_ACNT_CODE,
	 NEW_TD_DIVN_CODE,
	 NEW_TD_DEPT_CODE,
	 NEW_TD_HEAD_NO_1,
	 NEW_TD_ANLY_CODE_1,
	 NEW_TD_HEAD_NO_2,
	 NEW_TD_ANLY_CODE_2,
	 NEW_TD_CURR_CODE,
	 NEW_TD_DOC_AMT,
	 NEW_TD_DOC_DRCR_FLAG,
	 NEW_TD_FC_AMT,
	 NEW_TD_DOC_REF,
	 NEW_TD_DOC_DUE_DT,
	 NEW_TD_OTH_REF,
	 NEW_TD_ACTY_VALUE_CODE_1,
	 NEW_TD_ACTY_VALUE_CODE_2,
	 NEW_TD_DESC,
	 NEW_TD_DBK_PRINT_FLAG,
	 NEW_TD_LED_PRINT_FLAG,
	 NEW_TD_MONTH_PRC_FLAG,
	 NEW_TD_BILL_FC_AMT,
	 NEW_TD_BILL_LC_AMT,
	 NEW_TD_BILL_STATUS,
	 NEW_TD_PYMT_APPR_FLAG,
	 NEW_TD_CR_UID,
	 NEW_TD_CR_DT,
	 NEW_TD_PYMT_LAST_APPR_FC_AMT,
	 NEW_TD_PYMT_LAST_APPR_LC_AMT,
	 NEW_TD_PYMT_LAST_APPR_BANK,
	 TRG_MODE,
	 TRG_ERR_NO,
	 TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
	RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FT_CUR_TRANS_HEADER
BEFORE INSERT OR UPDATE OR DELETE ON FT_CUR_TRANS_HEADER
FOR EACH ROW
DECLARE
 NEW_TH_COMP_CODE          VARCHAR2(1) := NULL;
 NEW_TH_ACNT_YEAR          NUMBER(1) := NULL;
 NEW_TH_TRAN_CODE          VARCHAR2(1) := NULL;
 NEW_TH_DOC_NO             NUMBER(1) := NULL;
 NEW_TH_DOC_DT             DATE        := NULL;
 NEW_TH_DOC_CAL_YEAR       NUMBER(1) := NULL;
 NEW_TH_DOC_CAL_MONTH      NUMBER(1) := NULL;
 NEW_TH_DOC_REF            VARCHAR2(1) := NULL;
 NEW_TH_DOC_REF_DT         DATE        := NULL;
 NEW_TH_DOC_DUE_DT         DATE        := NULL;
 NEW_TH_DIVN_CODE          VARCHAR2(1) := NULL;
 NEW_TH_DEPT_CODE          VARCHAR2(1) := NULL;
 NEW_TH_CTL_TOTAL          NUMBER(1) := NULL;
 NEW_TH_DESC               VARCHAR2(1) := NULL;
 NEW_TH_ANNOTATION         VARCHAR2(1) := NULL;
 NEW_TH_CR_UID             VARCHAR2(1) := NULL;
 NEW_TH_CR_DT              DATE        := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FT_CUR_TRANS_HEADER (
         :OLD.TH_COMP_CODE,
         :OLD.TH_ACNT_YEAR,
         :OLD.TH_TRAN_CODE,
         :OLD.TH_DOC_NO,
         :OLD.TH_DOC_DT,
         :OLD.TH_DOC_CAL_YEAR,
         :OLD.TH_DOC_CAL_MONTH,
         :OLD.TH_DOC_REF,
         :OLD.TH_DOC_REF_DT,
         :OLD.TH_DOC_DUE_DT,
         :OLD.TH_DIVN_CODE,
         :OLD.TH_DEPT_CODE,
         :OLD.TH_CTL_TOTAL,
         :OLD.TH_DESC,
         :OLD.TH_ANNOTATION,
         :OLD.TH_CR_UID,
         :OLD.TH_CR_DT,
         :NEW.TH_COMP_CODE,
         :NEW.TH_ACNT_YEAR,
         :NEW.TH_TRAN_CODE,
         :NEW.TH_DOC_NO,
         :NEW.TH_DOC_DT,
         :NEW.TH_DOC_CAL_YEAR,
         :NEW.TH_DOC_CAL_MONTH,
         :NEW.TH_DOC_REF,
         :NEW.TH_DOC_REF_DT,
         :NEW.TH_DOC_DUE_DT,
         :NEW.TH_DIVN_CODE,
         :NEW.TH_DEPT_CODE,
         :NEW.TH_CTL_TOTAL,
         :NEW.TH_DESC,
         :NEW.TH_ANNOTATION,
         :NEW.TH_CR_UID,
         :NEW.TH_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FT_CUR_TRANS_HEADER (
         :OLD.TH_COMP_CODE,
         :OLD.TH_ACNT_YEAR,
         :OLD.TH_TRAN_CODE,
         :OLD.TH_DOC_NO,
         :OLD.TH_DOC_DT,
         :OLD.TH_DOC_CAL_YEAR,
         :OLD.TH_DOC_CAL_MONTH,
         :OLD.TH_DOC_REF,
         :OLD.TH_DOC_REF_DT,
         :OLD.TH_DOC_DUE_DT,
         :OLD.TH_DIVN_CODE,
         :OLD.TH_DEPT_CODE,
         :OLD.TH_CTL_TOTAL,
         :OLD.TH_DESC,
         :OLD.TH_ANNOTATION,
         :OLD.TH_CR_UID,
         :OLD.TH_CR_DT,
         NEW_TH_COMP_CODE,
         NEW_TH_ACNT_YEAR,
         NEW_TH_TRAN_CODE,
         NEW_TH_DOC_NO,
         NEW_TH_DOC_DT,
         NEW_TH_DOC_CAL_YEAR,
         NEW_TH_DOC_CAL_MONTH,
         NEW_TH_DOC_REF,
         NEW_TH_DOC_REF_DT,
         NEW_TH_DOC_DUE_DT,
         NEW_TH_DIVN_CODE,
         NEW_TH_DEPT_CODE,
         NEW_TH_CTL_TOTAL,
         NEW_TH_DESC,
         NEW_TH_ANNOTATION,
         NEW_TH_CR_UID,
         NEW_TH_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FT_OS
BEFORE INSERT OR UPDATE OR DELETE ON FT_OS
FOR EACH ROW
DECLARE
 NEW_OST_KEY_NO            NUMBER(1) := NULL;
 NEW_OST_COMP_CODE         VARCHAR2(1) := NULL;
 NEW_OST_TRAN_CODE         VARCHAR2(1) := NULL;
 NEW_OST_DOC_NO            NUMBER(1) := NULL;
 NEW_OST_SEQ_NO            NUMBER(1) := NULL;
 NEW_OST_ACNT_YEAR         NUMBER(1) := NULL;
 NEW_OST_DOC_DT            DATE        := NULL;
 NEW_OST_DOC_CAL_YEAR      NUMBER(1) := NULL;
 NEW_OST_DOC_CAL_MONTH     NUMBER(1) := NULL;
 NEW_OST_DUE_DT            DATE        := NULL;
 NEW_OST_MAIN_ACNT_CODE    VARCHAR2(1) := NULL;
 NEW_OST_SUB_ACNT_CODE     VARCHAR2(1) := NULL;
 NEW_OST_DIVN_CODE         VARCHAR2(1) := NULL;
 NEW_OST_DEPT_CODE         VARCHAR2(1) := NULL;
 NEW_OST_HEAD_NO_1         NUMBER(1) := NULL;
 NEW_OST_ANLY_CODE_1       VARCHAR2(1) := NULL;
 NEW_OST_HEAD_NO_2         NUMBER(1) := NULL;
 NEW_OST_ANLY_CODE_2       VARCHAR2(1) := NULL;
 NEW_OST_ACTY_CODE_1       VARCHAR2(1) := NULL;
 NEW_OST_ACTY_CODE_2       VARCHAR2(1) := NULL;
 NEW_OST_CURR_CODE         VARCHAR2(1) := NULL;
 NEW_OST_LC_AMT            NUMBER(1) := NULL;
 NEW_OST_FC_AMT            NUMBER(1) := NULL;
 NEW_OST_DRCR_FLAG         VARCHAR2(1) := NULL;
 NEW_OST_DOC_REF           VARCHAR2(1) := NULL;
 NEW_OST_DOC_REF_DT        DATE        := NULL;
 NEW_OST_OTH_REF           VARCHAR2(1) := NULL;
 NEW_OST_LC_ADJ_AMT        NUMBER(1) := NULL;
 NEW_OST_FC_ADJ_AMT        NUMBER(1) := NULL;
 NEW_OST_LC_PDC_AMT        NUMBER(1) := NULL;
 NEW_OST_FC_PDC_AMT        NUMBER(1) := NULL;
 NEW_OST_LC_UNP_AMT        NUMBER(1) := NULL;
 NEW_OST_FC_UNP_AMT        NUMBER(1) := NULL;
 NEW_OST_LC_UNDEP_AMT      NUMBER(1) := NULL;
 NEW_OST_FC_UNDEP_AMT      NUMBER(1) := NULL;
 NEW_OST_LC_ORG_AMT        NUMBER(1) := NULL;
 NEW_OST_FC_ORG_AMT        NUMBER(1) := NULL;
 NEW_OST_REF_KEY_NO        NUMBER(1) := NULL;
 NEW_OST_REF_COMP_CODE     VARCHAR2(1) := NULL;
 NEW_OST_REF_ACNT_YEAR     NUMBER(1) := NULL;
 NEW_OST_REF_TRAN_CODE     VARCHAR2(1) := NULL;
 NEW_OST_REF_SEQ_NO        NUMBER(1) := NULL;
 NEW_OST_REF_DOC_NO        NUMBER(1) := NULL;
 NEW_OST_REF_DOC_DT        DATE        := NULL;
 NEW_OST_REF_DOC_CAL_YEAR  NUMBER(1) := NULL;
 NEW_OST_REF_DOC_CAL_MONTH NUMBER(1) := NULL;
 NEW_OST_REF_DUE_DT        DATE        := NULL;
 NEW_OST_LAST_MATCH_DT     DATE        := NULL;
 NEW_OST_TYPE              VARCHAR2(1) := NULL;
 NEW_OST_CR_UID            VARCHAR2(1) := NULL;
 NEW_OST_CR_DT             DATE        := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FT_OS (
         :OLD.OST_KEY_NO,
         :OLD.OST_COMP_CODE,
         :OLD.OST_TRAN_CODE,
         :OLD.OST_DOC_NO,
         :OLD.OST_SEQ_NO,
         :OLD.OST_ACNT_YEAR,
         :OLD.OST_DOC_DT,
         :OLD.OST_DOC_CAL_YEAR,
         :OLD.OST_DOC_CAL_MONTH,
         :OLD.OST_DUE_DT,
         :OLD.OST_MAIN_ACNT_CODE,
         :OLD.OST_SUB_ACNT_CODE,
         :OLD.OST_DIVN_CODE,
         :OLD.OST_DEPT_CODE,
         :OLD.OST_HEAD_NO_1,
         :OLD.OST_ANLY_CODE_1,
         :OLD.OST_HEAD_NO_2,
         :OLD.OST_ANLY_CODE_2,
         :OLD.OST_ACTY_CODE_1,
         :OLD.OST_ACTY_CODE_2,
         :OLD.OST_CURR_CODE,
         :OLD.OST_LC_AMT,
         :OLD.OST_FC_AMT,
         :OLD.OST_DRCR_FLAG,
         :OLD.OST_DOC_REF,
         :OLD.OST_DOC_REF_DT,
         :OLD.OST_OTH_REF,
         :OLD.OST_LC_ADJ_AMT,
         :OLD.OST_FC_ADJ_AMT,
         :OLD.OST_LC_PDC_AMT,
         :OLD.OST_FC_PDC_AMT,
         :OLD.OST_LC_UNP_AMT,
         :OLD.OST_FC_UNP_AMT,
         :OLD.OST_LC_UNDEP_AMT,
         :OLD.OST_FC_UNDEP_AMT,
         :OLD.OST_LC_ORG_AMT,
         :OLD.OST_FC_ORG_AMT,
         :OLD.OST_REF_KEY_NO,
         :OLD.OST_REF_COMP_CODE,
         :OLD.OST_REF_ACNT_YEAR,
         :OLD.OST_REF_TRAN_CODE,
         :OLD.OST_REF_SEQ_NO,
         :OLD.OST_REF_DOC_NO,
         :OLD.OST_REF_DOC_DT,
         :OLD.OST_REF_DOC_CAL_YEAR,
         :OLD.OST_REF_DOC_CAL_MONTH,
         :OLD.OST_REF_DUE_DT,
         :OLD.OST_LAST_MATCH_DT,
         :OLD.OST_TYPE,
         :OLD.OST_CR_UID,
         :OLD.OST_CR_DT,
         :NEW.OST_KEY_NO,
         :NEW.OST_COMP_CODE,
         :NEW.OST_TRAN_CODE,
         :NEW.OST_DOC_NO,
         :NEW.OST_SEQ_NO,
         :NEW.OST_ACNT_YEAR,
         :NEW.OST_DOC_DT,
         :NEW.OST_DOC_CAL_YEAR,
         :NEW.OST_DOC_CAL_MONTH,
         :NEW.OST_DUE_DT,
         :NEW.OST_MAIN_ACNT_CODE,
         :NEW.OST_SUB_ACNT_CODE,
         :NEW.OST_DIVN_CODE,
         :NEW.OST_DEPT_CODE,
         :NEW.OST_HEAD_NO_1,
         :NEW.OST_ANLY_CODE_1,
         :NEW.OST_HEAD_NO_2,
         :NEW.OST_ANLY_CODE_2,
         :NEW.OST_ACTY_CODE_1,
         :NEW.OST_ACTY_CODE_2,
         :NEW.OST_CURR_CODE,
         :NEW.OST_LC_AMT,
         :NEW.OST_FC_AMT,
         :NEW.OST_DRCR_FLAG,
         :NEW.OST_DOC_REF,
         :NEW.OST_DOC_REF_DT,
         :NEW.OST_OTH_REF,
         :NEW.OST_LC_ADJ_AMT,
         :NEW.OST_FC_ADJ_AMT,
         :NEW.OST_LC_PDC_AMT,
         :NEW.OST_FC_PDC_AMT,
         :NEW.OST_LC_UNP_AMT,
         :NEW.OST_FC_UNP_AMT,
         :NEW.OST_LC_UNDEP_AMT,
         :NEW.OST_FC_UNDEP_AMT,
         :NEW.OST_LC_ORG_AMT,
         :NEW.OST_FC_ORG_AMT,
         :NEW.OST_REF_KEY_NO,
         :NEW.OST_REF_COMP_CODE,
         :NEW.OST_REF_ACNT_YEAR,
         :NEW.OST_REF_TRAN_CODE,
         :NEW.OST_REF_SEQ_NO,
         :NEW.OST_REF_DOC_NO,
         :NEW.OST_REF_DOC_DT,
         :NEW.OST_REF_DOC_CAL_YEAR,
         :NEW.OST_REF_DOC_CAL_MONTH,
         :NEW.OST_REF_DUE_DT,
         :NEW.OST_LAST_MATCH_DT,
         :NEW.OST_TYPE,
         :NEW.OST_CR_UID,
         :NEW.OST_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FT_OS (
         :OLD.OST_KEY_NO,
         :OLD.OST_COMP_CODE,
         :OLD.OST_TRAN_CODE,
         :OLD.OST_DOC_NO,
         :OLD.OST_SEQ_NO,
         :OLD.OST_ACNT_YEAR,
         :OLD.OST_DOC_DT,
         :OLD.OST_DOC_CAL_YEAR,
         :OLD.OST_DOC_CAL_MONTH,
         :OLD.OST_DUE_DT,
         :OLD.OST_MAIN_ACNT_CODE,
         :OLD.OST_SUB_ACNT_CODE,
         :OLD.OST_DIVN_CODE,
         :OLD.OST_DEPT_CODE,
         :OLD.OST_HEAD_NO_1,
         :OLD.OST_ANLY_CODE_1,
         :OLD.OST_HEAD_NO_2,
         :OLD.OST_ANLY_CODE_2,
         :OLD.OST_ACTY_CODE_1,
         :OLD.OST_ACTY_CODE_2,
         :OLD.OST_CURR_CODE,
         :OLD.OST_LC_AMT,
         :OLD.OST_FC_AMT,
         :OLD.OST_DRCR_FLAG,
         :OLD.OST_DOC_REF,
         :OLD.OST_DOC_REF_DT,
         :OLD.OST_OTH_REF,
         :OLD.OST_LC_ADJ_AMT,
         :OLD.OST_FC_ADJ_AMT,
         :OLD.OST_LC_PDC_AMT,
         :OLD.OST_FC_PDC_AMT,
         :OLD.OST_LC_UNP_AMT,
         :OLD.OST_FC_UNP_AMT,
         :OLD.OST_LC_UNDEP_AMT,
         :OLD.OST_FC_UNDEP_AMT,
         :OLD.OST_LC_ORG_AMT,
         :OLD.OST_FC_ORG_AMT,
         :OLD.OST_REF_KEY_NO,
         :OLD.OST_REF_COMP_CODE,
         :OLD.OST_REF_ACNT_YEAR,
         :OLD.OST_REF_TRAN_CODE,
         :OLD.OST_REF_SEQ_NO,
         :OLD.OST_REF_DOC_NO,
         :OLD.OST_REF_DOC_DT,
         :OLD.OST_REF_DOC_CAL_YEAR,
         :OLD.OST_REF_DOC_CAL_MONTH,
         :OLD.OST_REF_DUE_DT,
         :OLD.OST_LAST_MATCH_DT,
         :OLD.OST_TYPE,
         :OLD.OST_CR_UID,
         :OLD.OST_CR_DT,
         NEW_OST_KEY_NO,
         NEW_OST_COMP_CODE,
         NEW_OST_TRAN_CODE,
         NEW_OST_DOC_NO,
         NEW_OST_SEQ_NO,
         NEW_OST_ACNT_YEAR,
         NEW_OST_DOC_DT,
         NEW_OST_DOC_CAL_YEAR,
         NEW_OST_DOC_CAL_MONTH,
         NEW_OST_DUE_DT,
         NEW_OST_MAIN_ACNT_CODE,
         NEW_OST_SUB_ACNT_CODE,
         NEW_OST_DIVN_CODE,
         NEW_OST_DEPT_CODE,
         NEW_OST_HEAD_NO_1,
         NEW_OST_ANLY_CODE_1,
         NEW_OST_HEAD_NO_2,
         NEW_OST_ANLY_CODE_2,
         NEW_OST_ACTY_CODE_1,
         NEW_OST_ACTY_CODE_2,
         NEW_OST_CURR_CODE,
         NEW_OST_LC_AMT,
         NEW_OST_FC_AMT,
         NEW_OST_DRCR_FLAG,
         NEW_OST_DOC_REF,
         NEW_OST_DOC_REF_DT,
         NEW_OST_OTH_REF,
         NEW_OST_LC_ADJ_AMT,
         NEW_OST_FC_ADJ_AMT,
         NEW_OST_LC_PDC_AMT,
         NEW_OST_FC_PDC_AMT,
         NEW_OST_LC_UNP_AMT,
         NEW_OST_FC_UNP_AMT,
         NEW_OST_LC_UNDEP_AMT,
         NEW_OST_FC_UNDEP_AMT,
         NEW_OST_LC_ORG_AMT,
         NEW_OST_FC_ORG_AMT,
         NEW_OST_REF_KEY_NO,
         NEW_OST_REF_COMP_CODE,
         NEW_OST_REF_ACNT_YEAR,
         NEW_OST_REF_TRAN_CODE,
         NEW_OST_REF_SEQ_NO,
         NEW_OST_REF_DOC_NO,
         NEW_OST_REF_DOC_DT,
         NEW_OST_REF_DOC_CAL_YEAR,
         NEW_OST_REF_DOC_CAL_MONTH,
         NEW_OST_REF_DUE_DT,
         NEW_OST_LAST_MATCH_DT,
         NEW_OST_TYPE,
         NEW_OST_CR_UID,
         NEW_OST_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7"."TRG_FT_PDC" BEFORE INSERT OR DELETE OR UPDATE ON FINAL7.FT_PDC REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW  
DECLARE
 NEW_PDC_COMP_CODE         VARCHAR2(1) := NULL;
 NEW_PDC_CHQ_NO            VARCHAR2(1) := NULL;
 NEW_PDC_BANK_ACNT_CODE    VARCHAR2(1) := NULL;
 NEW_PDC_BANK_SUB_ACNT_CODE    VARCHAR2(1) := NULL;
 NEW_PDC_BANK_DIVN_CODE        VARCHAR2(1) := NULL;
 NEW_PDC_BANK_DEPT_CODE        VARCHAR2(1) := NULL;
 NEW_PDC_BANK_HEAD_NO_1        NUMBER(1) := NULL;
 NEW_PDC_BANK_ANLY_CODE_1      VARCHAR2(1) := NULL;
 NEW_PDC_BANK_HEAD_NO_2        NUMBER(1) := NULL;
 NEW_PDC_BANK_ANLY_CODE_2      VARCHAR2(1) := NULL;
 NEW_PDC_BANK_ACTY_VALUE_CODE_1 VARCHAR2(1) := NULL;
 NEW_PDC_BANK_ACTY_VALUE_CODE_2 VARCHAR2(1) := NULL;
 NEW_PDC_BANK_CURR_CODE         VARCHAR2(1) := NULL;
 NEW_PDC_BANK_FC_AMT            NUMBER(1) := NULL;
 NEW_PDC_BANK_NAME         VARCHAR2(1) := NULL;
 NEW_PDC_DEPOSIT_BANK      VARCHAR2(1) := NULL;
 NEW_PDC_DOC_NO            NUMBER(1) := NULL;
 NEW_PDC_DOC_DT            DATE        := NULL;
 NEW_PDC_DOC_CAL_YEAR      NUMBER(1) := NULL;
 NEW_PDC_DOC_CAL_MONTH     NUMBER(1) := NULL;
 NEW_PDC_DUE_DT            DATE        := NULL;
 NEW_PDC_DIVN_CODE         VARCHAR2(1) := NULL;
 NEW_PDC_DEPT_CODE         VARCHAR2(1) := NULL;
 NEW_PDC_MAIN_ACNT_CODE    VARCHAR2(1) := NULL;
 NEW_PDC_SUB_ACNT_CODE     VARCHAR2(1) := NULL;
 NEW_PDC_HEAD_NO_1         NUMBER(1) := NULL;
 NEW_PDC_ANLY_CODE_1       VARCHAR2(1) := NULL;
 NEW_PDC_HEAD_NO_2         NUMBER(1) := NULL;
 NEW_PDC_ANLY_CODE_2       VARCHAR2(1) := NULL;
 NEW_PDC_ACTY_CODE_1       VARCHAR2(1) := NULL;
 NEW_PDC_ACTY_CODE_2       VARCHAR2(1) := NULL;
 NEW_PDC_CURR_CODE         VARCHAR2(1) := NULL;
 NEW_PDC_FC_AMT            NUMBER(1) := NULL;
 NEW_PDC_LC_AMT            NUMBER(1) := NULL;
 NEW_PDC_NAME              VARCHAR2(1) := NULL;
 NEW_PDC_REF               VARCHAR2(1) := NULL;
 NEW_PDC_STATUS            VARCHAR2(1) := NULL;
 NEW_PDC_TYPE_FLAG         VARCHAR2(1) := NULL;
 NEW_PDC_REF_TRAN_CODE     VARCHAR2(1) := NULL;
 NEW_PDC_REF_ACNT_YEAR     NUMBER(1) := NULL;
 NEW_PDC_REF_DOC_NO        NUMBER(1) := NULL;
 NEW_PDC_REF_SEQ_NO        NUMBER(1) := NULL;
 NEW_PDC_REF_DOC_DT        DATE        := NULL;
 NEW_PDC_CDISC_TRAN_CODE   VARCHAR2(1) := NULL;
 NEW_PDC_CDISC_DOC_NO      NUMBER(1) := NULL;
 NEW_PDC_FC_CDISC_AMT      NUMBER(1) := NULL;
 NEW_PDC_LC_CDISC_AMT      NUMBER(1) := NULL;
 NEW_PDC_CDISC_ACNT_YEAR   NUMBER(1) := NULL;
 NEW_PDC_CR_UID            VARCHAR2(1) := NULL;
 NEW_PDC_CR_DT             DATE        := NULL;
 NEW_PDC_SEQ_NO            NUMBER(10)  := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FT_PDC (
         :OLD.PDC_COMP_CODE,
         :OLD.PDC_CHQ_NO,
         :OLD.PDC_BANK_ACNT_CODE,
         :OLD.PDC_BANK_SUB_ACNT_CODE,
         :OLD.PDC_BANK_DIVN_CODE,
         :OLD.PDC_BANK_DEPT_CODE,
         :OLD.PDC_BANK_HEAD_NO_1,
         :OLD.PDC_BANK_ANLY_CODE_1,
         :OLD.PDC_BANK_HEAD_NO_2,
         :OLD.PDC_BANK_ANLY_CODE_2,
         :OLD.PDC_BANK_ACTY_VALUE_CODE_1,
         :OLD.PDC_BANK_ACTY_VALUE_CODE_2,
         :OLD.PDC_BANK_CURR_CODE,
         :OLD.PDC_BANK_FC_AMT,
         :OLD.PDC_BANK_NAME,
         :OLD.PDC_DEPOSIT_BANK,
         :OLD.PDC_DOC_NO,
         :OLD.PDC_DOC_DT,
         :OLD.PDC_DOC_CAL_YEAR,
         :OLD.PDC_DOC_CAL_MONTH,
         :OLD.PDC_DUE_DT,
         :OLD.PDC_DIVN_CODE,
         :OLD.PDC_DEPT_CODE,
         :OLD.PDC_MAIN_ACNT_CODE,
         :OLD.PDC_SUB_ACNT_CODE,
         :OLD.PDC_HEAD_NO_1,
         :OLD.PDC_ANLY_CODE_1,
         :OLD.PDC_HEAD_NO_2,
         :OLD.PDC_ANLY_CODE_2,
         :OLD.PDC_ACTY_CODE_1,
         :OLD.PDC_ACTY_CODE_2,
         :OLD.PDC_CURR_CODE,
         :OLD.PDC_FC_AMT,
         :OLD.PDC_LC_AMT,
         :OLD.PDC_NAME,
         :OLD.PDC_REF,
         :OLD.PDC_STATUS,
         :OLD.PDC_TYPE_FLAG,
         :OLD.PDC_REF_TRAN_CODE,
         :OLD.PDC_REF_ACNT_YEAR,
         :OLD.PDC_REF_DOC_NO,
         :OLD.PDC_REF_SEQ_NO,
         :OLD.PDC_REF_DOC_DT,
         :OLD.PDC_CDISC_TRAN_CODE,
         :OLD.PDC_CDISC_DOC_NO,
         :OLD.PDC_FC_CDISC_AMT,
         :OLD.PDC_LC_CDISC_AMT,
         :OLD.PDC_CDISC_ACNT_YEAR,
         :OLD.PDC_CR_UID,
         :OLD.PDC_CR_DT,
         :NEW.PDC_COMP_CODE,
         :NEW.PDC_CHQ_NO,
         :NEW.PDC_BANK_ACNT_CODE,
         :NEW.PDC_BANK_SUB_ACNT_CODE,
         :NEW.PDC_BANK_DIVN_CODE,
         :NEW.PDC_BANK_DEPT_CODE,
         :NEW.PDC_BANK_HEAD_NO_1,
         :NEW.PDC_BANK_ANLY_CODE_1,
         :NEW.PDC_BANK_HEAD_NO_2,
         :NEW.PDC_BANK_ANLY_CODE_2,
         :NEW.PDC_BANK_ACTY_VALUE_CODE_1,
         :NEW.PDC_BANK_ACTY_VALUE_CODE_2,
         :NEW.PDC_BANK_CURR_CODE,
         :NEW.PDC_BANK_FC_AMT,
         :NEW.PDC_BANK_NAME,
         :NEW.PDC_DEPOSIT_BANK,
         :NEW.PDC_DOC_NO,
         :NEW.PDC_DOC_DT,
         :NEW.PDC_DOC_CAL_YEAR,
         :NEW.PDC_DOC_CAL_MONTH,
         :NEW.PDC_DUE_DT,
         :NEW.PDC_DIVN_CODE,
         :NEW.PDC_DEPT_CODE,
         :NEW.PDC_MAIN_ACNT_CODE,
         :NEW.PDC_SUB_ACNT_CODE,
         :NEW.PDC_HEAD_NO_1,
         :NEW.PDC_ANLY_CODE_1,
         :NEW.PDC_HEAD_NO_2,
         :NEW.PDC_ANLY_CODE_2,
         :NEW.PDC_ACTY_CODE_1,
         :NEW.PDC_ACTY_CODE_2,
         :NEW.PDC_CURR_CODE,
         :NEW.PDC_FC_AMT,
         :NEW.PDC_LC_AMT,
         :NEW.PDC_NAME,
         :NEW.PDC_REF,
         :NEW.PDC_STATUS,
         :NEW.PDC_TYPE_FLAG,
         :NEW.PDC_REF_TRAN_CODE,
         :NEW.PDC_REF_ACNT_YEAR,
         :NEW.PDC_REF_DOC_NO,
         :NEW.PDC_REF_SEQ_NO,
         :NEW.PDC_REF_DOC_DT,
         :NEW.PDC_CDISC_TRAN_CODE,
         :NEW.PDC_CDISC_DOC_NO,
         :NEW.PDC_FC_CDISC_AMT,
         :NEW.PDC_LC_CDISC_AMT,
         :NEW.PDC_CDISC_ACNT_YEAR,
         :NEW.PDC_CR_UID,
         :NEW.PDC_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.PDC_SEQ_NO,
         :NEW.PDC_SEQ_NO);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FT_PDC (
         :OLD.PDC_COMP_CODE,
         :OLD.PDC_CHQ_NO,
         :OLD.PDC_BANK_ACNT_CODE,
         :OLD.PDC_BANK_SUB_ACNT_CODE,
         :OLD.PDC_BANK_DIVN_CODE,
         :OLD.PDC_BANK_DEPT_CODE,
         :OLD.PDC_BANK_HEAD_NO_1,
         :OLD.PDC_BANK_ANLY_CODE_1,
         :OLD.PDC_BANK_HEAD_NO_2,
         :OLD.PDC_BANK_ANLY_CODE_2,
         :OLD.PDC_BANK_ACTY_VALUE_CODE_1,
         :OLD.PDC_BANK_ACTY_VALUE_CODE_2,
         :OLD.PDC_BANK_CURR_CODE,
         :OLD.PDC_BANK_FC_AMT,
         :OLD.PDC_BANK_NAME,
         :OLD.PDC_DEPOSIT_BANK,
         :OLD.PDC_DOC_NO,
         :OLD.PDC_DOC_DT,
         :OLD.PDC_DOC_CAL_YEAR,
         :OLD.PDC_DOC_CAL_MONTH,
         :OLD.PDC_DUE_DT,
         :OLD.PDC_DIVN_CODE,
         :OLD.PDC_DEPT_CODE,
         :OLD.PDC_MAIN_ACNT_CODE,
         :OLD.PDC_SUB_ACNT_CODE,
         :OLD.PDC_HEAD_NO_1,
         :OLD.PDC_ANLY_CODE_1,
         :OLD.PDC_HEAD_NO_2,
         :OLD.PDC_ANLY_CODE_2,
         :OLD.PDC_ACTY_CODE_1,
         :OLD.PDC_ACTY_CODE_2,
         :OLD.PDC_CURR_CODE,
         :OLD.PDC_FC_AMT,
         :OLD.PDC_LC_AMT,
         :OLD.PDC_NAME,
         :OLD.PDC_REF,
         :OLD.PDC_STATUS,
         :OLD.PDC_TYPE_FLAG,
         :OLD.PDC_REF_TRAN_CODE,
         :OLD.PDC_REF_ACNT_YEAR,
         :OLD.PDC_REF_DOC_NO,
         :OLD.PDC_REF_SEQ_NO,
         :OLD.PDC_REF_DOC_DT,
         :OLD.PDC_CDISC_TRAN_CODE,
         :OLD.PDC_CDISC_DOC_NO,
         :OLD.PDC_FC_CDISC_AMT,
         :OLD.PDC_LC_CDISC_AMT,
         :OLD.PDC_CDISC_ACNT_YEAR,
         :OLD.PDC_CR_UID,
         :OLD.PDC_CR_DT,
         NEW_PDC_COMP_CODE,
         NEW_PDC_CHQ_NO,
         NEW_PDC_BANK_ACNT_CODE,
         NEW_PDC_BANK_SUB_ACNT_CODE,
         NEW_PDC_BANK_DIVN_CODE,
         NEW_PDC_BANK_DEPT_CODE,
         NEW_PDC_BANK_HEAD_NO_1,
         NEW_PDC_BANK_ANLY_CODE_1,
         NEW_PDC_BANK_HEAD_NO_2,
         NEW_PDC_BANK_ANLY_CODE_2,
         NEW_PDC_BANK_ACTY_VALUE_CODE_1,
         NEW_PDC_BANK_ACTY_VALUE_CODE_2,
         NEW_PDC_BANK_CURR_CODE,
         NEW_PDC_BANK_FC_AMT,
         NEW_PDC_BANK_NAME,
         NEW_PDC_DEPOSIT_BANK,
         NEW_PDC_DOC_NO,
         NEW_PDC_DOC_DT,
         NEW_PDC_DOC_CAL_YEAR,
         NEW_PDC_DOC_CAL_MONTH,
         NEW_PDC_DUE_DT,
         NEW_PDC_DIVN_CODE,
         NEW_PDC_DEPT_CODE,
         NEW_PDC_MAIN_ACNT_CODE,
         NEW_PDC_SUB_ACNT_CODE,
         NEW_PDC_HEAD_NO_1,
         NEW_PDC_ANLY_CODE_1,
         NEW_PDC_HEAD_NO_2,
         NEW_PDC_ANLY_CODE_2,
         NEW_PDC_ACTY_CODE_1,
         NEW_PDC_ACTY_CODE_2,
         NEW_PDC_CURR_CODE,
         NEW_PDC_FC_AMT,
         NEW_PDC_LC_AMT,
         NEW_PDC_NAME,
         NEW_PDC_REF,
         NEW_PDC_STATUS,
         NEW_PDC_TYPE_FLAG,
         NEW_PDC_REF_TRAN_CODE,
         NEW_PDC_REF_ACNT_YEAR,
         NEW_PDC_REF_DOC_NO,
         NEW_PDC_REF_SEQ_NO,
         NEW_PDC_REF_DOC_DT,
         NEW_PDC_CDISC_TRAN_CODE,
         NEW_PDC_CDISC_DOC_NO,
         NEW_PDC_FC_CDISC_AMT,
         NEW_PDC_LC_CDISC_AMT,
         NEW_PDC_CDISC_ACNT_YEAR,
         NEW_PDC_CR_UID,
         NEW_PDC_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG,
         :OLD.PDC_SEQ_NO,
         :NEW.PDC_SEQ_NO);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;


/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FT_PDC_OS
BEFORE INSERT OR UPDATE OR DELETE ON FT_PDC_OS
FOR EACH ROW
DECLARE
 NEW_POS_KEY_NO            NUMBER(1) := NULL;
 NEW_POS_COMP_CODE         VARCHAR2(1) := NULL;
 NEW_POS_PDC_CHQ_NO        VARCHAR2(1) := NULL;
 NEW_POS_MAIN_ACNT_CODE    VARCHAR2(1) := NULL;
 NEW_POS_SUB_ACNT_CODE     VARCHAR2(1) := NULL;
 NEW_POS_CURR_CODE         VARCHAR2(1) := NULL;
 NEW_POS_LC_AMT            NUMBER(1) := NULL;
 NEW_POS_FC_AMT            NUMBER(1) := NULL;
 NEW_POS_DRCR_FLAG         VARCHAR2(1) := NULL;
 NEW_POS_REF_DUE_DT        DATE        := NULL;
 NEW_POS_REF_KEY_NO        NUMBER(1) := NULL;
 NEW_POS_CR_UID            VARCHAR2(1) := NULL;
 NEW_POS_CR_DT             DATE        := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FT_PDC_OS (
         :OLD.POS_KEY_NO,
         :OLD.POS_COMP_CODE,
         :OLD.POS_PDC_CHQ_NO,
         :OLD.POS_MAIN_ACNT_CODE,
         :OLD.POS_SUB_ACNT_CODE,
         :OLD.POS_CURR_CODE,
         :OLD.POS_LC_AMT,
         :OLD.POS_FC_AMT,
         :OLD.POS_DRCR_FLAG,
         :OLD.POS_REF_DUE_DT,
         :OLD.POS_REF_KEY_NO,
         :OLD.POS_CR_UID,
         :OLD.POS_CR_DT,
         :NEW.POS_KEY_NO,
         :NEW.POS_COMP_CODE,
         :NEW.POS_PDC_CHQ_NO,
         :NEW.POS_MAIN_ACNT_CODE,
         :NEW.POS_SUB_ACNT_CODE,
         :NEW.POS_CURR_CODE,
         :NEW.POS_LC_AMT,
         :NEW.POS_FC_AMT,
         :NEW.POS_DRCR_FLAG,
         :NEW.POS_REF_DUE_DT,
         :NEW.POS_REF_KEY_NO,
         :NEW.POS_CR_UID,
         :NEW.POS_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FT_PDC_OS (
         :OLD.POS_KEY_NO,
         :OLD.POS_COMP_CODE,
         :OLD.POS_PDC_CHQ_NO,
         :OLD.POS_MAIN_ACNT_CODE,
         :OLD.POS_SUB_ACNT_CODE,
         :OLD.POS_CURR_CODE,
         :OLD.POS_LC_AMT,
         :OLD.POS_FC_AMT,
         :OLD.POS_DRCR_FLAG,
         :OLD.POS_REF_DUE_DT,
         :OLD.POS_REF_KEY_NO,
         :OLD.POS_CR_UID,
         :OLD.POS_CR_DT,
         NEW_POS_KEY_NO,
         NEW_POS_COMP_CODE,
         NEW_POS_PDC_CHQ_NO,
         NEW_POS_MAIN_ACNT_CODE,
         NEW_POS_SUB_ACNT_CODE,
         NEW_POS_CURR_CODE,
         NEW_POS_LC_AMT,
         NEW_POS_FC_AMT,
         NEW_POS_DRCR_FLAG,
         NEW_POS_REF_DUE_DT,
         NEW_POS_REF_KEY_NO,
         NEW_POS_CR_UID,
         NEW_POS_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7"."TRG_FT_PRV_TRANS_DETAIL" BEFORE INSERT OR DELETE OR UPDATE ON FINAL7.FT_PRV_TRANS_DETAIL REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW  
DECLARE
 NEW_TD_COMP_CODE             VARCHAR2(1) := NULL;
 NEW_TD_ACNT_YEAR             NUMBER(1) := NULL;
 NEW_TD_TRAN_CODE             VARCHAR2(1) := NULL;
 NEW_TD_DOC_NO                NUMBER(1) := NULL;
 NEW_TD_SEQ_NO                NUMBER(1) := NULL;
 NEW_TD_MAIN_ACNT_CODE        VARCHAR2(1) := NULL;
 NEW_TD_SUB_ACNT_CODE         VARCHAR2(1) := NULL;
 NEW_TD_DIVN_CODE             VARCHAR2(1) := NULL;
 NEW_TD_DEPT_CODE             VARCHAR2(1) := NULL;
 NEW_TD_HEAD_NO_1             NUMBER(1) := NULL;
 NEW_TD_ANLY_CODE_1           VARCHAR2(1) := NULL;
 NEW_TD_HEAD_NO_2             NUMBER(1) := NULL;
 NEW_TD_ANLY_CODE_2           VARCHAR2(1) := NULL;
 NEW_TD_CURR_CODE             VARCHAR2(1) := NULL;
 NEW_TD_DOC_AMT               NUMBER(1) := NULL;
 NEW_TD_DOC_DRCR_FLAG         VARCHAR2(1) := NULL;
 NEW_TD_FC_AMT                NUMBER(1) := NULL;
 NEW_TD_DOC_REF               VARCHAR2(1) := NULL;
 NEW_TD_DOC_DUE_DT            DATE        := NULL;
 NEW_TD_OTH_REF               VARCHAR2(1) := NULL;
 NEW_TD_ACTY_VALUE_CODE_1     VARCHAR2(1) := NULL;
 NEW_TD_ACTY_VALUE_CODE_2     VARCHAR2(1) := NULL;
 NEW_TD_DESC                  VARCHAR2(1) := NULL;
 NEW_TD_DBK_PRINT_FLAG        VARCHAR2(1) := NULL;
 NEW_TD_LED_PRINT_FLAG        VARCHAR2(1) := NULL;
 NEW_TD_MONTH_PRC_FLAG        VARCHAR2(1) := NULL;
 NEW_TD_BILL_FC_AMT           NUMBER(1) := NULL;
 NEW_TD_BILL_LC_AMT           NUMBER(1) := NULL;
 NEW_TD_BILL_STATUS           VARCHAR2(1) := NULL;
 NEW_TD_PYMT_APPR_FLAG        VARCHAR2(1) := NULL;
 NEW_TD_CR_UID                VARCHAR2(1) := NULL;
 NEW_TD_CR_DT                 DATE        := NULL;
 NEW_TD_PYMT_LAST_APPR_FC_AMT NUMBER(1) := NULL;
 NEW_TD_PYMT_LAST_APPR_LC_AMT NUMBER(1) := NULL;
 NEW_TD_PYMT_LAST_APPR_BANK   VARCHAR2(1) := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FT_PRV_TRANS_DETAIL (
         :OLD.TD_COMP_CODE,
         :OLD.TD_ACNT_YEAR,
         :OLD.TD_TRAN_CODE,
         :OLD.TD_DOC_NO,
         :OLD.TD_SEQ_NO,
         :OLD.TD_MAIN_ACNT_CODE,
         :OLD.TD_SUB_ACNT_CODE,
         :OLD.TD_DIVN_CODE,
         :OLD.TD_DEPT_CODE,
         :OLD.TD_HEAD_NO_1,
         :OLD.TD_ANLY_CODE_1,
         :OLD.TD_HEAD_NO_2,
         :OLD.TD_ANLY_CODE_2,
         :OLD.TD_CURR_CODE,
         :OLD.TD_DOC_AMT,
         :OLD.TD_DOC_DRCR_FLAG,
         :OLD.TD_FC_AMT,
         :OLD.TD_DOC_REF,
         :OLD.TD_DOC_DUE_DT,
         :OLD.TD_OTH_REF,
         :OLD.TD_ACTY_VALUE_CODE_1,
         :OLD.TD_ACTY_VALUE_CODE_2,
         :OLD.TD_DESC,
         :OLD.TD_DBK_PRINT_FLAG,
         :OLD.TD_LED_PRINT_FLAG,
         :OLD.TD_MONTH_PRC_FLAG,
         :OLD.TD_BILL_FC_AMT,
         :OLD.TD_BILL_LC_AMT,
         :OLD.TD_BILL_STATUS,
         :OLD.TD_PYMT_APPR_FLAG,
         :OLD.TD_CR_UID,
         :OLD.TD_CR_DT,
         :OLD.TD_PYMT_LAST_APPR_FC_AMT,
         :OLD.TD_PYMT_LAST_APPR_LC_AMT,
         :OLD.TD_PYMT_LAST_APPR_BANK,
         :NEW.TD_COMP_CODE,
         :NEW.TD_ACNT_YEAR,
         :NEW.TD_TRAN_CODE,
         :NEW.TD_DOC_NO,
         :NEW.TD_SEQ_NO,
         :NEW.TD_MAIN_ACNT_CODE,
         :NEW.TD_SUB_ACNT_CODE,
         :NEW.TD_DIVN_CODE,
         :NEW.TD_DEPT_CODE,
         :NEW.TD_HEAD_NO_1,
         :NEW.TD_ANLY_CODE_1,
         :NEW.TD_HEAD_NO_2,
         :NEW.TD_ANLY_CODE_2,
         :NEW.TD_CURR_CODE,
         :NEW.TD_DOC_AMT,
         :NEW.TD_DOC_DRCR_FLAG,
         :NEW.TD_FC_AMT,
         :NEW.TD_DOC_REF,
         :NEW.TD_DOC_DUE_DT,
         :NEW.TD_OTH_REF,
         :NEW.TD_ACTY_VALUE_CODE_1,
         :NEW.TD_ACTY_VALUE_CODE_2,
         :NEW.TD_DESC,
         :NEW.TD_DBK_PRINT_FLAG,
         :NEW.TD_LED_PRINT_FLAG,
         :NEW.TD_MONTH_PRC_FLAG,
         :NEW.TD_BILL_FC_AMT,
         :NEW.TD_BILL_LC_AMT,
         :NEW.TD_BILL_STATUS,
         :NEW.TD_PYMT_APPR_FLAG,
         :NEW.TD_CR_UID,
         :NEW.TD_CR_DT,
         :NEW.TD_PYMT_LAST_APPR_FC_AMT,
         :NEW.TD_PYMT_LAST_APPR_LC_AMT,
         :NEW.TD_PYMT_LAST_APPR_BANK,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FT_PRV_TRANS_DETAIL (
         :OLD.TD_COMP_CODE,
         :OLD.TD_ACNT_YEAR,
         :OLD.TD_TRAN_CODE,
         :OLD.TD_DOC_NO,
         :OLD.TD_SEQ_NO,
         :OLD.TD_MAIN_ACNT_CODE,
         :OLD.TD_SUB_ACNT_CODE,
         :OLD.TD_DIVN_CODE,
         :OLD.TD_DEPT_CODE,
         :OLD.TD_HEAD_NO_1,
         :OLD.TD_ANLY_CODE_1,
         :OLD.TD_HEAD_NO_2,
         :OLD.TD_ANLY_CODE_2,
         :OLD.TD_CURR_CODE,
         :OLD.TD_DOC_AMT,
         :OLD.TD_DOC_DRCR_FLAG,
         :OLD.TD_FC_AMT,
         :OLD.TD_DOC_REF,
         :OLD.TD_DOC_DUE_DT,
         :OLD.TD_OTH_REF,
         :OLD.TD_ACTY_VALUE_CODE_1,
         :OLD.TD_ACTY_VALUE_CODE_2,
         :OLD.TD_DESC,
         :OLD.TD_DBK_PRINT_FLAG,
         :OLD.TD_LED_PRINT_FLAG,
         :OLD.TD_MONTH_PRC_FLAG,
         :OLD.TD_BILL_FC_AMT,
         :OLD.TD_BILL_LC_AMT,
         :OLD.TD_BILL_STATUS,
         :OLD.TD_PYMT_APPR_FLAG,
         :OLD.TD_CR_UID,
         :OLD.TD_CR_DT,
         :OLD.TD_PYMT_LAST_APPR_FC_AMT,
         :OLD.TD_PYMT_LAST_APPR_LC_AMT,
         :OLD.TD_PYMT_LAST_APPR_BANK,
         NEW_TD_COMP_CODE,
         NEW_TD_ACNT_YEAR,
         NEW_TD_TRAN_CODE,
         NEW_TD_DOC_NO,
         NEW_TD_SEQ_NO,
         NEW_TD_MAIN_ACNT_CODE,
         NEW_TD_SUB_ACNT_CODE,
         NEW_TD_DIVN_CODE,
         NEW_TD_DEPT_CODE,
         NEW_TD_HEAD_NO_1,
         NEW_TD_ANLY_CODE_1,
         NEW_TD_HEAD_NO_2,
         NEW_TD_ANLY_CODE_2,
         NEW_TD_CURR_CODE,
         NEW_TD_DOC_AMT,
         NEW_TD_DOC_DRCR_FLAG,
         NEW_TD_FC_AMT,
         NEW_TD_DOC_REF,
         NEW_TD_DOC_DUE_DT,
         NEW_TD_OTH_REF,
         NEW_TD_ACTY_VALUE_CODE_1,
         NEW_TD_ACTY_VALUE_CODE_2,
         NEW_TD_DESC,
         NEW_TD_DBK_PRINT_FLAG,
         NEW_TD_LED_PRINT_FLAG,
         NEW_TD_MONTH_PRC_FLAG,
         NEW_TD_BILL_FC_AMT,
         NEW_TD_BILL_LC_AMT,
         NEW_TD_BILL_STATUS,
         NEW_TD_PYMT_APPR_FLAG,
         NEW_TD_CR_UID,
         NEW_TD_CR_DT,
         NEW_TD_PYMT_LAST_APPR_FC_AMT,
         NEW_TD_PYMT_LAST_APPR_LC_AMT,
         NEW_TD_PYMT_LAST_APPR_BANK,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;


/
CREATE OR REPLACE TRIGGER "FINAL7"."TRG_FT_PRV_TRANS_HEADER" BEFORE INSERT OR DELETE OR UPDATE ON FINAL7.FT_PRV_TRANS_HEADER REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW  
DECLARE
 NEW_TH_COMP_CODE          VARCHAR2(1) := NULL;
 NEW_TH_ACNT_YEAR          NUMBER(1) := NULL;
 NEW_TH_TRAN_CODE          VARCHAR2(1) := NULL;
 NEW_TH_DOC_NO             NUMBER(1) := NULL;
 NEW_TH_DOC_DT             DATE        := NULL;
 NEW_TH_DOC_CAL_YEAR       NUMBER(1) := NULL;
 NEW_TH_DOC_CAL_MONTH      NUMBER(1) := NULL;
 NEW_TH_DOC_REF            VARCHAR2(1) := NULL;
 NEW_TH_DOC_REF_DT         DATE        := NULL;
 NEW_TH_DOC_DUE_DT         DATE        := NULL;
 NEW_TH_DIVN_CODE          VARCHAR2(1) := NULL;
 NEW_TH_DEPT_CODE          VARCHAR2(1) := NULL;
 NEW_TH_CTL_TOTAL          NUMBER(1) := NULL;
 NEW_TH_DESC               VARCHAR2(1) := NULL;
 NEW_TH_ANNOTATION         VARCHAR2(1) := NULL;
 NEW_TH_CR_UID             VARCHAR2(1) := NULL;
 NEW_TH_CR_DT              DATE        := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FT_PRV_TRANS_HEADER (
         :OLD.TH_COMP_CODE,
         :OLD.TH_ACNT_YEAR,
         :OLD.TH_TRAN_CODE,
         :OLD.TH_DOC_NO,
         :OLD.TH_DOC_DT,
         :OLD.TH_DOC_CAL_YEAR,
         :OLD.TH_DOC_CAL_MONTH,
         :OLD.TH_DOC_REF,
         :OLD.TH_DOC_REF_DT,
         :OLD.TH_DOC_DUE_DT,
         :OLD.TH_DIVN_CODE,
         :OLD.TH_DEPT_CODE,
         :OLD.TH_CTL_TOTAL,
         :OLD.TH_DESC,
         :OLD.TH_ANNOTATION,
         :OLD.TH_CR_UID,
         :OLD.TH_CR_DT,
         :NEW.TH_COMP_CODE,
         :NEW.TH_ACNT_YEAR,
         :NEW.TH_TRAN_CODE,
         :NEW.TH_DOC_NO,
         :NEW.TH_DOC_DT,
         :NEW.TH_DOC_CAL_YEAR,
         :NEW.TH_DOC_CAL_MONTH,
         :NEW.TH_DOC_REF,
         :NEW.TH_DOC_REF_DT,
         :NEW.TH_DOC_DUE_DT,
         :NEW.TH_DIVN_CODE,
         :NEW.TH_DEPT_CODE,
         :NEW.TH_CTL_TOTAL,
         :NEW.TH_DESC,
         :NEW.TH_ANNOTATION,
         :NEW.TH_CR_UID,
         :NEW.TH_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FT_PRV_TRANS_HEADER (
         :OLD.TH_COMP_CODE,
         :OLD.TH_ACNT_YEAR,
         :OLD.TH_TRAN_CODE,
         :OLD.TH_DOC_NO,
         :OLD.TH_DOC_DT,
         :OLD.TH_DOC_CAL_YEAR,
         :OLD.TH_DOC_CAL_MONTH,
         :OLD.TH_DOC_REF,
         :OLD.TH_DOC_REF_DT,
         :OLD.TH_DOC_DUE_DT,
         :OLD.TH_DIVN_CODE,
         :OLD.TH_DEPT_CODE,
         :OLD.TH_CTL_TOTAL,
         :OLD.TH_DESC,
         :OLD.TH_ANNOTATION,
         :OLD.TH_CR_UID,
         :OLD.TH_CR_DT,
         NEW_TH_COMP_CODE,
         NEW_TH_ACNT_YEAR,
         NEW_TH_TRAN_CODE,
         NEW_TH_DOC_NO,
         NEW_TH_DOC_DT,
         NEW_TH_DOC_CAL_YEAR,
         NEW_TH_DOC_CAL_MONTH,
         NEW_TH_DOC_REF,
         NEW_TH_DOC_REF_DT,
         NEW_TH_DOC_DUE_DT,
         NEW_TH_DIVN_CODE,
         NEW_TH_DEPT_CODE,
         NEW_TH_CTL_TOTAL,
         NEW_TH_DESC,
         NEW_TH_ANNOTATION,
         NEW_TH_CR_UID,
         NEW_TH_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;


/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FT_REVERSAL_JV
BEFORE INSERT OR UPDATE OR DELETE ON FT_REVERSAL_JV
FOR EACH ROW
DECLARE
 NEW_RJV_COMP_CODE         VARCHAR2(1) := NULL;
 NEW_RJV_ORGL_ACNT_YEAR    NUMBER(1) := NULL;
 NEW_RJV_ORGL_TRAN_CODE    VARCHAR2(1) := NULL;
 NEW_RJV_ORGL_DOC_NO       NUMBER(1) := NULL;
 NEW_RJV_REV_TRAN_CODE     VARCHAR2(1) := NULL;
 NEW_RJV_REV_DOC_NO        NUMBER(1) := NULL;
 NEW_RJV_REV_DOC_DT        DATE        := NULL;
 NEW_RJV_CR_UID            VARCHAR2(1) := NULL;
 NEW_RJV_CR_DT             DATE        := NULL;
 NEW_RJV_ORGL_DOC_DT       DATE        := NULL;
 NEW_RJV_REV_DESC          VARCHAR2(1) := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FT_REVERSAL_JV (
         :OLD.RJV_COMP_CODE,
         :OLD.RJV_ORGL_ACNT_YEAR,
         :OLD.RJV_ORGL_TRAN_CODE,
         :OLD.RJV_ORGL_DOC_NO,
         :OLD.RJV_REV_TRAN_CODE,
         :OLD.RJV_REV_DOC_NO,
         :OLD.RJV_REV_DOC_DT,
         :OLD.RJV_CR_UID,
         :OLD.RJV_CR_DT,
         :OLD.RJV_ORGL_DOC_DT,
         :OLD.RJV_REV_DESC,
         :NEW.RJV_COMP_CODE,
         :NEW.RJV_ORGL_ACNT_YEAR,
         :NEW.RJV_ORGL_TRAN_CODE,
         :NEW.RJV_ORGL_DOC_NO,
         :NEW.RJV_REV_TRAN_CODE,
         :NEW.RJV_REV_DOC_NO,
         :NEW.RJV_REV_DOC_DT,
         :NEW.RJV_CR_UID,
         :NEW.RJV_CR_DT,
         :NEW.RJV_ORGL_DOC_DT,
         :NEW.RJV_REV_DESC,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FT_REVERSAL_JV (
         :OLD.RJV_COMP_CODE,
         :OLD.RJV_ORGL_ACNT_YEAR,
         :OLD.RJV_ORGL_TRAN_CODE,
         :OLD.RJV_ORGL_DOC_NO,
         :OLD.RJV_REV_TRAN_CODE,
         :OLD.RJV_REV_DOC_NO,
         :OLD.RJV_REV_DOC_DT,
         :OLD.RJV_CR_UID,
         :OLD.RJV_CR_DT,
         :OLD.RJV_ORGL_DOC_DT,
         :OLD.RJV_REV_DESC,
         NEW_RJV_COMP_CODE,
         NEW_RJV_ORGL_ACNT_YEAR,
         NEW_RJV_ORGL_TRAN_CODE,
         NEW_RJV_ORGL_DOC_NO,
         NEW_RJV_REV_TRAN_CODE,
         NEW_RJV_REV_DOC_NO,
         NEW_RJV_REV_DOC_DT,
         NEW_RJV_CR_UID,
         NEW_RJV_CR_DT,
         NEW_RJV_ORGL_DOC_DT,
         NEW_RJV_REV_DESC,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FT_UNPOSTED_OS
BEFORE INSERT OR UPDATE OR DELETE ON FT_UNPOSTED_OS
FOR EACH ROW
DECLARE
 NEW_OST_KEY_NO            NUMBER(1) := NULL;
 NEW_OST_COMP_CODE         VARCHAR2(1) := NULL;
 NEW_OST_TRAN_CODE         VARCHAR2(1) := NULL;
 NEW_OST_DOC_NO            NUMBER(1) := NULL;
 NEW_OST_SEQ_NO            NUMBER(1) := NULL;
 NEW_OST_ACNT_YEAR         NUMBER(1) := NULL;
 NEW_OST_DOC_DT            DATE        := NULL;
 NEW_OST_DOC_CAL_YEAR      NUMBER(1) := NULL;
 NEW_OST_DOC_CAL_MONTH     NUMBER(1) := NULL;
 NEW_OST_DUE_DT            DATE        := NULL;
 NEW_OST_MAIN_ACNT_CODE    VARCHAR2(1) := NULL;
 NEW_OST_SUB_ACNT_CODE     VARCHAR2(1) := NULL;
 NEW_OST_DIVN_CODE         VARCHAR2(1) := NULL;
 NEW_OST_DEPT_CODE         VARCHAR2(1) := NULL;
 NEW_OST_HEAD_NO_1         NUMBER(1) := NULL;
 NEW_OST_ANLY_CODE_1       VARCHAR2(1) := NULL;
 NEW_OST_HEAD_NO_2         NUMBER(1) := NULL;
 NEW_OST_ANLY_CODE_2       VARCHAR2(1) := NULL;
 NEW_OST_ACTY_CODE_1       VARCHAR2(1) := NULL;
 NEW_OST_ACTY_CODE_2       VARCHAR2(1) := NULL;
 NEW_OST_CURR_CODE         VARCHAR2(1) := NULL;
 NEW_OST_LC_AMT            NUMBER(1) := NULL;
 NEW_OST_FC_AMT            NUMBER(1) := NULL;
 NEW_OST_DRCR_FLAG         VARCHAR2(1) := NULL;
 NEW_OST_DOC_REF           VARCHAR2(1) := NULL;
 NEW_OST_DOC_REF_DT        DATE        := NULL;
 NEW_OST_OTH_REF           VARCHAR2(1) := NULL;
 NEW_OST_LC_ADJ_AMT        NUMBER(1) := NULL;
 NEW_OST_FC_ADJ_AMT        NUMBER(1) := NULL;
 NEW_OST_LC_PDC_AMT        NUMBER(1) := NULL;
 NEW_OST_FC_PDC_AMT        NUMBER(1) := NULL;
 NEW_OST_LC_UNP_AMT        NUMBER(1) := NULL;
 NEW_OST_FC_UNP_AMT        NUMBER(1) := NULL;
 NEW_OST_LC_UNDEP_AMT      NUMBER(1) := NULL;
 NEW_OST_FC_UNDEP_AMT      NUMBER(1) := NULL;
 NEW_OST_LC_ORG_AMT        NUMBER(1) := NULL;
 NEW_OST_FC_ORG_AMT        NUMBER(1) := NULL;
 NEW_OST_REF_KEY_NO        NUMBER(1) := NULL;
 NEW_OST_REF_COMP_CODE     VARCHAR2(1) := NULL;
 NEW_OST_REF_ACNT_YEAR     NUMBER(1) := NULL;
 NEW_OST_REF_TRAN_CODE     VARCHAR2(1) := NULL;
 NEW_OST_REF_SEQ_NO        NUMBER(1) := NULL;
 NEW_OST_REF_DOC_NO        NUMBER(1) := NULL;
 NEW_OST_REF_DOC_DT        DATE        := NULL;
 NEW_OST_REF_DOC_CAL_YEAR  NUMBER(1) := NULL;
 NEW_OST_REF_DOC_CAL_MONTH NUMBER(1) := NULL;
 NEW_OST_REF_DUE_DT        DATE        := NULL;
 NEW_OST_LAST_MATCH_DT     DATE        := NULL;
 NEW_OST_TYPE              VARCHAR2(1) := NULL;
 NEW_OST_CR_UID            VARCHAR2(1) := NULL;
 NEW_OST_CR_DT             DATE        := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FT_UNPOSTED_OS (
         :OLD.OST_KEY_NO,
         :OLD.OST_COMP_CODE,
         :OLD.OST_TRAN_CODE,
         :OLD.OST_DOC_NO,
         :OLD.OST_SEQ_NO,
         :OLD.OST_ACNT_YEAR,
         :OLD.OST_DOC_DT,
         :OLD.OST_DOC_CAL_YEAR,
         :OLD.OST_DOC_CAL_MONTH,
         :OLD.OST_DUE_DT,
         :OLD.OST_MAIN_ACNT_CODE,
         :OLD.OST_SUB_ACNT_CODE,
         :OLD.OST_DIVN_CODE,
         :OLD.OST_DEPT_CODE,
         :OLD.OST_HEAD_NO_1,
         :OLD.OST_ANLY_CODE_1,
         :OLD.OST_HEAD_NO_2,
         :OLD.OST_ANLY_CODE_2,
         :OLD.OST_ACTY_CODE_1,
         :OLD.OST_ACTY_CODE_2,
         :OLD.OST_CURR_CODE,
         :OLD.OST_LC_AMT,
         :OLD.OST_FC_AMT,
         :OLD.OST_DRCR_FLAG,
         :OLD.OST_DOC_REF,
         :OLD.OST_DOC_REF_DT,
         :OLD.OST_OTH_REF,
         :OLD.OST_LC_ADJ_AMT,
         :OLD.OST_FC_ADJ_AMT,
         :OLD.OST_LC_PDC_AMT,
         :OLD.OST_FC_PDC_AMT,
         :OLD.OST_LC_UNP_AMT,
         :OLD.OST_FC_UNP_AMT,
         :OLD.OST_LC_UNDEP_AMT,
         :OLD.OST_FC_UNDEP_AMT,
         :OLD.OST_LC_ORG_AMT,
         :OLD.OST_FC_ORG_AMT,
         :OLD.OST_REF_KEY_NO,
         :OLD.OST_REF_COMP_CODE,
         :OLD.OST_REF_ACNT_YEAR,
         :OLD.OST_REF_TRAN_CODE,
         :OLD.OST_REF_SEQ_NO,
         :OLD.OST_REF_DOC_NO,
         :OLD.OST_REF_DOC_DT,
         :OLD.OST_REF_DOC_CAL_YEAR,
         :OLD.OST_REF_DOC_CAL_MONTH,
         :OLD.OST_REF_DUE_DT,
         :OLD.OST_LAST_MATCH_DT,
         :OLD.OST_TYPE,
         :OLD.OST_CR_UID,
         :OLD.OST_CR_DT,
         :NEW.OST_KEY_NO,
         :NEW.OST_COMP_CODE,
         :NEW.OST_TRAN_CODE,
         :NEW.OST_DOC_NO,
         :NEW.OST_SEQ_NO,
         :NEW.OST_ACNT_YEAR,
         :NEW.OST_DOC_DT,
         :NEW.OST_DOC_CAL_YEAR,
         :NEW.OST_DOC_CAL_MONTH,
         :NEW.OST_DUE_DT,
         :NEW.OST_MAIN_ACNT_CODE,
         :NEW.OST_SUB_ACNT_CODE,
         :NEW.OST_DIVN_CODE,
         :NEW.OST_DEPT_CODE,
         :NEW.OST_HEAD_NO_1,
         :NEW.OST_ANLY_CODE_1,
         :NEW.OST_HEAD_NO_2,
         :NEW.OST_ANLY_CODE_2,
         :NEW.OST_ACTY_CODE_1,
         :NEW.OST_ACTY_CODE_2,
         :NEW.OST_CURR_CODE,
         :NEW.OST_LC_AMT,
         :NEW.OST_FC_AMT,
         :NEW.OST_DRCR_FLAG,
         :NEW.OST_DOC_REF,
         :NEW.OST_DOC_REF_DT,
         :NEW.OST_OTH_REF,
         :NEW.OST_LC_ADJ_AMT,
         :NEW.OST_FC_ADJ_AMT,
         :NEW.OST_LC_PDC_AMT,
         :NEW.OST_FC_PDC_AMT,
         :NEW.OST_LC_UNP_AMT,
         :NEW.OST_FC_UNP_AMT,
         :NEW.OST_LC_UNDEP_AMT,
         :NEW.OST_FC_UNDEP_AMT,
         :NEW.OST_LC_ORG_AMT,
         :NEW.OST_FC_ORG_AMT,
         :NEW.OST_REF_KEY_NO,
         :NEW.OST_REF_COMP_CODE,
         :NEW.OST_REF_ACNT_YEAR,
         :NEW.OST_REF_TRAN_CODE,
         :NEW.OST_REF_SEQ_NO,
         :NEW.OST_REF_DOC_NO,
         :NEW.OST_REF_DOC_DT,
         :NEW.OST_REF_DOC_CAL_YEAR,
         :NEW.OST_REF_DOC_CAL_MONTH,
         :NEW.OST_REF_DUE_DT,
         :NEW.OST_LAST_MATCH_DT,
         :NEW.OST_TYPE,
         :NEW.OST_CR_UID,
         :NEW.OST_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FT_UNPOSTED_OS (
         :OLD.OST_KEY_NO,
         :OLD.OST_COMP_CODE,
         :OLD.OST_TRAN_CODE,
         :OLD.OST_DOC_NO,
         :OLD.OST_SEQ_NO,
         :OLD.OST_ACNT_YEAR,
         :OLD.OST_DOC_DT,
         :OLD.OST_DOC_CAL_YEAR,
         :OLD.OST_DOC_CAL_MONTH,
         :OLD.OST_DUE_DT,
         :OLD.OST_MAIN_ACNT_CODE,
         :OLD.OST_SUB_ACNT_CODE,
         :OLD.OST_DIVN_CODE,
         :OLD.OST_DEPT_CODE,
         :OLD.OST_HEAD_NO_1,
         :OLD.OST_ANLY_CODE_1,
         :OLD.OST_HEAD_NO_2,
         :OLD.OST_ANLY_CODE_2,
         :OLD.OST_ACTY_CODE_1,
         :OLD.OST_ACTY_CODE_2,
         :OLD.OST_CURR_CODE,
         :OLD.OST_LC_AMT,
         :OLD.OST_FC_AMT,
         :OLD.OST_DRCR_FLAG,
         :OLD.OST_DOC_REF,
         :OLD.OST_DOC_REF_DT,
         :OLD.OST_OTH_REF,
         :OLD.OST_LC_ADJ_AMT,
         :OLD.OST_FC_ADJ_AMT,
         :OLD.OST_LC_PDC_AMT,
         :OLD.OST_FC_PDC_AMT,
         :OLD.OST_LC_UNP_AMT,
         :OLD.OST_FC_UNP_AMT,
         :OLD.OST_LC_UNDEP_AMT,
         :OLD.OST_FC_UNDEP_AMT,
         :OLD.OST_LC_ORG_AMT,
         :OLD.OST_FC_ORG_AMT,
         :OLD.OST_REF_KEY_NO,
         :OLD.OST_REF_COMP_CODE,
         :OLD.OST_REF_ACNT_YEAR,
         :OLD.OST_REF_TRAN_CODE,
         :OLD.OST_REF_SEQ_NO,
         :OLD.OST_REF_DOC_NO,
         :OLD.OST_REF_DOC_DT,
         :OLD.OST_REF_DOC_CAL_YEAR,
         :OLD.OST_REF_DOC_CAL_MONTH,
         :OLD.OST_REF_DUE_DT,
         :OLD.OST_LAST_MATCH_DT,
         :OLD.OST_TYPE,
         :OLD.OST_CR_UID,
         :OLD.OST_CR_DT,
         NEW_OST_KEY_NO,
         NEW_OST_COMP_CODE,
         NEW_OST_TRAN_CODE,
         NEW_OST_DOC_NO,
         NEW_OST_SEQ_NO,
         NEW_OST_ACNT_YEAR,
         NEW_OST_DOC_DT,
         NEW_OST_DOC_CAL_YEAR,
         NEW_OST_DOC_CAL_MONTH,
         NEW_OST_DUE_DT,
         NEW_OST_MAIN_ACNT_CODE,
         NEW_OST_SUB_ACNT_CODE,
         NEW_OST_DIVN_CODE,
         NEW_OST_DEPT_CODE,
         NEW_OST_HEAD_NO_1,
         NEW_OST_ANLY_CODE_1,
         NEW_OST_HEAD_NO_2,
         NEW_OST_ANLY_CODE_2,
         NEW_OST_ACTY_CODE_1,
         NEW_OST_ACTY_CODE_2,
         NEW_OST_CURR_CODE,
         NEW_OST_LC_AMT,
         NEW_OST_FC_AMT,
         NEW_OST_DRCR_FLAG,
         NEW_OST_DOC_REF,
         NEW_OST_DOC_REF_DT,
         NEW_OST_OTH_REF,
         NEW_OST_LC_ADJ_AMT,
         NEW_OST_FC_ADJ_AMT,
         NEW_OST_LC_PDC_AMT,
         NEW_OST_FC_PDC_AMT,
         NEW_OST_LC_UNP_AMT,
         NEW_OST_FC_UNP_AMT,
         NEW_OST_LC_UNDEP_AMT,
         NEW_OST_FC_UNDEP_AMT,
         NEW_OST_LC_ORG_AMT,
         NEW_OST_FC_ORG_AMT,
         NEW_OST_REF_KEY_NO,
         NEW_OST_REF_COMP_CODE,
         NEW_OST_REF_ACNT_YEAR,
         NEW_OST_REF_TRAN_CODE,
         NEW_OST_REF_SEQ_NO,
         NEW_OST_REF_DOC_NO,
         NEW_OST_REF_DOC_DT,
         NEW_OST_REF_DOC_CAL_YEAR,
         NEW_OST_REF_DOC_CAL_MONTH,
         NEW_OST_REF_DUE_DT,
         NEW_OST_LAST_MATCH_DT,
         NEW_OST_TYPE,
         NEW_OST_CR_UID,
         NEW_OST_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FT_UNPOSTED_TRANS_DETAIL
BEFORE INSERT OR UPDATE OR DELETE ON FT_UNPOSTED_TRANS_DETAIL
FOR EACH ROW
DECLARE
 NEW_TD_COMP_CODE             VARCHAR2(1) := NULL;
 NEW_TD_ACNT_YEAR             NUMBER(1) := NULL;
 NEW_TD_TRAN_CODE             VARCHAR2(1) := NULL;
 NEW_TD_DOC_NO                NUMBER(1) := NULL;
 NEW_TD_SEQ_NO                NUMBER(1) := NULL;
 NEW_TD_MAIN_ACNT_CODE        VARCHAR2(1) := NULL;
 NEW_TD_SUB_ACNT_CODE         VARCHAR2(1) := NULL;
 NEW_TD_DIVN_CODE             VARCHAR2(1) := NULL;
 NEW_TD_DEPT_CODE             VARCHAR2(1) := NULL;
 NEW_TD_HEAD_NO_1             NUMBER(1) := NULL;
 NEW_TD_ANLY_CODE_1           VARCHAR2(1) := NULL;
 NEW_TD_HEAD_NO_2             NUMBER(1) := NULL;
 NEW_TD_ANLY_CODE_2           VARCHAR2(1) := NULL;
 NEW_TD_CURR_CODE             VARCHAR2(1) := NULL;
 NEW_TD_DOC_AMT               NUMBER(1) := NULL;
 NEW_TD_DOC_DRCR_FLAG         VARCHAR2(1) := NULL;
 NEW_TD_FC_AMT                NUMBER(1) := NULL;
 NEW_TD_DOC_REF               VARCHAR2(1) := NULL;
 NEW_TD_DOC_DUE_DT            DATE        := NULL;
 NEW_TD_OTH_REF               VARCHAR2(1) := NULL;
 NEW_TD_ACTY_VALUE_CODE_1     VARCHAR2(1) := NULL;
 NEW_TD_ACTY_VALUE_CODE_2     VARCHAR2(1) := NULL;
 NEW_TD_DESC                  VARCHAR2(1) := NULL;
 NEW_TD_DBK_PRINT_FLAG        VARCHAR2(1) := NULL;
 NEW_TD_LED_PRINT_FLAG        VARCHAR2(1) := NULL;
 NEW_TD_MONTH_PRC_FLAG        VARCHAR2(1) := NULL;
 NEW_TD_BILL_FC_AMT           NUMBER(1) := NULL;
 NEW_TD_BILL_LC_AMT           NUMBER(1) := NULL;
 NEW_TD_BILL_STATUS           VARCHAR2(1) := NULL;
 NEW_TD_PYMT_APPR_FLAG        VARCHAR2(1) := NULL;
 NEW_TD_CR_UID                VARCHAR2(1) := NULL;
 NEW_TD_CR_DT                 DATE        := NULL;
 NEW_TD_PYMT_LAST_APPR_FC_AMT NUMBER(1) := NULL;
 NEW_TD_PYMT_LAST_APPR_LC_AMT NUMBER(1) := NULL;
 NEW_TD_PYMT_LAST_APPR_BANK   VARCHAR2(1) := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
	TRG_MODE := 'I';
    ELSIF UPDATING THEN
	TRG_MODE := 'U';
    ELSIF DELETING THEN
	TRG_MODE := 'D';
    ELSE
	TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
	STP_FT_UNPOSTED_TRANS_DETAIL (
	 :OLD.TD_COMP_CODE,
	 :OLD.TD_ACNT_YEAR,
	 :OLD.TD_TRAN_CODE,
	 :OLD.TD_DOC_NO,
	 :OLD.TD_SEQ_NO,
	 :OLD.TD_MAIN_ACNT_CODE,
	 :OLD.TD_SUB_ACNT_CODE,
	 :OLD.TD_DIVN_CODE,
	 :OLD.TD_DEPT_CODE,
	 :OLD.TD_HEAD_NO_1,
	 :OLD.TD_ANLY_CODE_1,
	 :OLD.TD_HEAD_NO_2,
	 :OLD.TD_ANLY_CODE_2,
	 :OLD.TD_CURR_CODE,
	 :OLD.TD_DOC_AMT,
	 :OLD.TD_DOC_DRCR_FLAG,
	 :OLD.TD_FC_AMT,
	 :OLD.TD_DOC_REF,
	 :OLD.TD_DOC_DUE_DT,
	 :OLD.TD_OTH_REF,
	 :OLD.TD_ACTY_VALUE_CODE_1,
	 :OLD.TD_ACTY_VALUE_CODE_2,
	 :OLD.TD_DESC,
	 :OLD.TD_DBK_PRINT_FLAG,
	 :OLD.TD_LED_PRINT_FLAG,
	 :OLD.TD_MONTH_PRC_FLAG,
	 :OLD.TD_BILL_FC_AMT,
	 :OLD.TD_BILL_LC_AMT,
	 :OLD.TD_BILL_STATUS,
	 :OLD.TD_PYMT_APPR_FLAG,
	 :OLD.TD_CR_UID,
	 :OLD.TD_CR_DT,
	 :OLD.TD_PYMT_LAST_APPR_FC_AMT,
	 :OLD.TD_PYMT_LAST_APPR_LC_AMT,
	 :OLD.TD_PYMT_LAST_APPR_BANK,
	 :NEW.TD_COMP_CODE,
	 :NEW.TD_ACNT_YEAR,
	 :NEW.TD_TRAN_CODE,
	 :NEW.TD_DOC_NO,
	 :NEW.TD_SEQ_NO,
	 :NEW.TD_MAIN_ACNT_CODE,
	 :NEW.TD_SUB_ACNT_CODE,
	 :NEW.TD_DIVN_CODE,
	 :NEW.TD_DEPT_CODE,
	 :NEW.TD_HEAD_NO_1,
	 :NEW.TD_ANLY_CODE_1,
	 :NEW.TD_HEAD_NO_2,
	 :NEW.TD_ANLY_CODE_2,
	 :NEW.TD_CURR_CODE,
	 :NEW.TD_DOC_AMT,
	 :NEW.TD_DOC_DRCR_FLAG,
	 :NEW.TD_FC_AMT,
	 :NEW.TD_DOC_REF,
	 :NEW.TD_DOC_DUE_DT,
	 :NEW.TD_OTH_REF,
	 :NEW.TD_ACTY_VALUE_CODE_1,
	 :NEW.TD_ACTY_VALUE_CODE_2,
	 :NEW.TD_DESC,
	 :NEW.TD_DBK_PRINT_FLAG,
	 :NEW.TD_LED_PRINT_FLAG,
	 :NEW.TD_MONTH_PRC_FLAG,
	 :NEW.TD_BILL_FC_AMT,
	 :NEW.TD_BILL_LC_AMT,
	 :NEW.TD_BILL_STATUS,
	 :NEW.TD_PYMT_APPR_FLAG,
	 :NEW.TD_CR_UID,
	 :NEW.TD_CR_DT,
	 :NEW.TD_PYMT_LAST_APPR_FC_AMT,
	 :NEW.TD_PYMT_LAST_APPR_LC_AMT,
	 :NEW.TD_PYMT_LAST_APPR_BANK,
	 TRG_MODE,
	 TRG_ERR_NO,
	 TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
	STP_FT_UNPOSTED_TRANS_DETAIL (
	 :OLD.TD_COMP_CODE,
	 :OLD.TD_ACNT_YEAR,
	 :OLD.TD_TRAN_CODE,
	 :OLD.TD_DOC_NO,
	 :OLD.TD_SEQ_NO,
	 :OLD.TD_MAIN_ACNT_CODE,
	 :OLD.TD_SUB_ACNT_CODE,
	 :OLD.TD_DIVN_CODE,
	 :OLD.TD_DEPT_CODE,
	 :OLD.TD_HEAD_NO_1,
	 :OLD.TD_ANLY_CODE_1,
	 :OLD.TD_HEAD_NO_2,
	 :OLD.TD_ANLY_CODE_2,
	 :OLD.TD_CURR_CODE,
	 :OLD.TD_DOC_AMT,
	 :OLD.TD_DOC_DRCR_FLAG,
	 :OLD.TD_FC_AMT,
	 :OLD.TD_DOC_REF,
	 :OLD.TD_DOC_DUE_DT,
	 :OLD.TD_OTH_REF,
	 :OLD.TD_ACTY_VALUE_CODE_1,
	 :OLD.TD_ACTY_VALUE_CODE_2,
	 :OLD.TD_DESC,
	 :OLD.TD_DBK_PRINT_FLAG,
	 :OLD.TD_LED_PRINT_FLAG,
	 :OLD.TD_MONTH_PRC_FLAG,
	 :OLD.TD_BILL_FC_AMT,
	 :OLD.TD_BILL_LC_AMT,
	 :OLD.TD_BILL_STATUS,
	 :OLD.TD_PYMT_APPR_FLAG,
	 :OLD.TD_CR_UID,
	 :OLD.TD_CR_DT,
	 :OLD.TD_PYMT_LAST_APPR_FC_AMT,
	 :OLD.TD_PYMT_LAST_APPR_LC_AMT,
	 :OLD.TD_PYMT_LAST_APPR_BANK,
	 NEW_TD_COMP_CODE,
	 NEW_TD_ACNT_YEAR,
	 NEW_TD_TRAN_CODE,
	 NEW_TD_DOC_NO,
	 NEW_TD_SEQ_NO,
	 NEW_TD_MAIN_ACNT_CODE,
	 NEW_TD_SUB_ACNT_CODE,
	 NEW_TD_DIVN_CODE,
	 NEW_TD_DEPT_CODE,
	 NEW_TD_HEAD_NO_1,
	 NEW_TD_ANLY_CODE_1,
	 NEW_TD_HEAD_NO_2,
	 NEW_TD_ANLY_CODE_2,
	 NEW_TD_CURR_CODE,
	 NEW_TD_DOC_AMT,
	 NEW_TD_DOC_DRCR_FLAG,
	 NEW_TD_FC_AMT,
	 NEW_TD_DOC_REF,
	 NEW_TD_DOC_DUE_DT,
	 NEW_TD_OTH_REF,
	 NEW_TD_ACTY_VALUE_CODE_1,
	 NEW_TD_ACTY_VALUE_CODE_2,
	 NEW_TD_DESC,
	 NEW_TD_DBK_PRINT_FLAG,
	 NEW_TD_LED_PRINT_FLAG,
	 NEW_TD_MONTH_PRC_FLAG,
	 NEW_TD_BILL_FC_AMT,
	 NEW_TD_BILL_LC_AMT,
	 NEW_TD_BILL_STATUS,
	 NEW_TD_PYMT_APPR_FLAG,
	 NEW_TD_CR_UID,
	 NEW_TD_CR_DT,
	 NEW_TD_PYMT_LAST_APPR_FC_AMT,
	 NEW_TD_PYMT_LAST_APPR_LC_AMT,
	 NEW_TD_PYMT_LAST_APPR_BANK,
	 TRG_MODE,
	 TRG_ERR_NO,
	 TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
	RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FT_UNPOSTED_TRANS_HEADER
BEFORE INSERT OR UPDATE OR DELETE ON FT_UNPOSTED_TRANS_HEADER
FOR EACH ROW
DECLARE
 NEW_TH_COMP_CODE          VARCHAR2(1) := NULL;
 NEW_TH_ACNT_YEAR          NUMBER(1) := NULL;
 NEW_TH_TRAN_CODE          VARCHAR2(1) := NULL;
 NEW_TH_DOC_NO             NUMBER(1) := NULL;
 NEW_TH_DOC_DT             DATE        := NULL;
 NEW_TH_DOC_CAL_YEAR       NUMBER(1) := NULL;
 NEW_TH_DOC_CAL_MONTH      NUMBER(1) := NULL;
 NEW_TH_DOC_REF            VARCHAR2(1) := NULL;
 NEW_TH_DOC_REF_DT         DATE        := NULL;
 NEW_TH_DOC_DUE_DT         DATE        := NULL;
 NEW_TH_DIVN_CODE          VARCHAR2(1) := NULL;
 NEW_TH_DEPT_CODE          VARCHAR2(1) := NULL;
 NEW_TH_CTL_TOTAL          NUMBER(1) := NULL;
 NEW_TH_DESC               VARCHAR2(1) := NULL;
 NEW_TH_ANNOTATION         VARCHAR2(1) := NULL;
 NEW_TH_CR_UID             VARCHAR2(1) := NULL;
 NEW_TH_CR_DT              DATE        := NULL;
 TRG_MODE                  VARCHAR2(1);
 TRG_ERR_NO                NUMBER(6);
 TRG_ERR_MSG               VARCHAR2(80);
BEGIN
    IF INSERTING THEN
        TRG_MODE := 'I';
    ELSIF UPDATING THEN
        TRG_MODE := 'U';
    ELSIF DELETING THEN
        TRG_MODE := 'D';
    ELSE
        TRG_MODE := 'X';
    END IF;
    TRG_ERR_NO := 0;
    IF TRG_MODE IN ('I','U') THEN
        STP_FT_UNPOSTED_TRANS_HEADER (
         :OLD.TH_COMP_CODE,
         :OLD.TH_ACNT_YEAR,
         :OLD.TH_TRAN_CODE,
         :OLD.TH_DOC_NO,
         :OLD.TH_DOC_DT,
         :OLD.TH_DOC_CAL_YEAR,
         :OLD.TH_DOC_CAL_MONTH,
         :OLD.TH_DOC_REF,
         :OLD.TH_DOC_REF_DT,
         :OLD.TH_DOC_DUE_DT,
         :OLD.TH_DIVN_CODE,
         :OLD.TH_DEPT_CODE,
         :OLD.TH_CTL_TOTAL,
         :OLD.TH_DESC,
         :OLD.TH_ANNOTATION,
         :OLD.TH_CR_UID,
         :OLD.TH_CR_DT,
         :NEW.TH_COMP_CODE,
         :NEW.TH_ACNT_YEAR,
         :NEW.TH_TRAN_CODE,
         :NEW.TH_DOC_NO,
         :NEW.TH_DOC_DT,
         :NEW.TH_DOC_CAL_YEAR,
         :NEW.TH_DOC_CAL_MONTH,
         :NEW.TH_DOC_REF,
         :NEW.TH_DOC_REF_DT,
         :NEW.TH_DOC_DUE_DT,
         :NEW.TH_DIVN_CODE,
         :NEW.TH_DEPT_CODE,
         :NEW.TH_CTL_TOTAL,
         :NEW.TH_DESC,
         :NEW.TH_ANNOTATION,
         :NEW.TH_CR_UID,
         :NEW.TH_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF TRG_MODE = 'D' THEN
        STP_FT_UNPOSTED_TRANS_HEADER (
         :OLD.TH_COMP_CODE,
         :OLD.TH_ACNT_YEAR,
         :OLD.TH_TRAN_CODE,
         :OLD.TH_DOC_NO,
         :OLD.TH_DOC_DT,
         :OLD.TH_DOC_CAL_YEAR,
         :OLD.TH_DOC_CAL_MONTH,
         :OLD.TH_DOC_REF,
         :OLD.TH_DOC_REF_DT,
         :OLD.TH_DOC_DUE_DT,
         :OLD.TH_DIVN_CODE,
         :OLD.TH_DEPT_CODE,
         :OLD.TH_CTL_TOTAL,
         :OLD.TH_DESC,
         :OLD.TH_ANNOTATION,
         :OLD.TH_CR_UID,
         :OLD.TH_CR_DT,
         NEW_TH_COMP_CODE,
         NEW_TH_ACNT_YEAR,
         NEW_TH_TRAN_CODE,
         NEW_TH_DOC_NO,
         NEW_TH_DOC_DT,
         NEW_TH_DOC_CAL_YEAR,
         NEW_TH_DOC_CAL_MONTH,
         NEW_TH_DOC_REF,
         NEW_TH_DOC_REF_DT,
         NEW_TH_DOC_DUE_DT,
         NEW_TH_DIVN_CODE,
         NEW_TH_DEPT_CODE,
         NEW_TH_CTL_TOTAL,
         NEW_TH_DESC,
         NEW_TH_ANNOTATION,
         NEW_TH_CR_UID,
         NEW_TH_CR_DT,
         TRG_MODE,
         TRG_ERR_NO,
         TRG_ERR_MSG);
    END IF;
    IF NVL(TRG_ERR_NO,0) != 0 THEN
        RAISE_APPLICATION_ERROR(TRG_ERR_NO, TRG_ERR_MSG);
    END IF;
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FT_UNP_TRANS_DETAIL_AFTER
AFTER INSERT ON FT_UNPOSTED_TRANS_DETAIL
BEGIN
INSERT INTO  FT_CUR_TRANS_DETAIL
SELECT FT_UNPOSTED_TRANS_DETAIL.*
FROM   FT_UNPOSTED_TRANS_DETAIL, FM_TRANSACTION
WHERE  TRAN_CODE = TD_TRAN_CODE
AND    TRAN_MODE_POSTING = 'O'
AND    TD_ACNT_YEAR = (SELECT CAY_ACNT_YEAR FROM FM_COMP_ACNT_YEAR
                       WHERE  CAY_COMP_CODE = TD_COMP_CODE
                       AND    CAY_PREV_CURR_NEXT = 'C');
INSERT INTO  FT_PRV_TRANS_DETAIL
SELECT FT_UNPOSTED_TRANS_DETAIL.*
FROM   FT_UNPOSTED_TRANS_DETAIL, FM_TRANSACTION
WHERE  TRAN_CODE = TD_TRAN_CODE
AND    TRAN_MODE_POSTING = 'O'
AND    TD_ACNT_YEAR = (SELECT CAY_ACNT_YEAR FROM FM_COMP_ACNT_YEAR
                       WHERE  CAY_COMP_CODE = TD_COMP_CODE
                       AND    CAY_PREV_CURR_NEXT = 'C');
DELETE FROM FT_UNPOSTED_TRANS_DETAIL
WHERE  TD_TRAN_CODE IN
       (SELECT TRAN_CODE
        FROM   FM_TRANSACTION
        WHERE  TRAN_MODE_POSTING = 'O');
END;

/
CREATE OR REPLACE TRIGGER "FINAL7".TRG_FT_UNP_TRANS_HEADER_AFTER
AFTER INSERT ON FT_UNPOSTED_TRANS_HEADER
BEGIN
INSERT INTO  FT_CUR_TRANS_HEADER
SELECT FT_UNPOSTED_TRANS_HEADER.*
FROM   FT_UNPOSTED_TRANS_HEADER, FM_TRANSACTION
WHERE  TRAN_CODE = TH_TRAN_CODE
AND    TRAN_MODE_POSTING = 'O'
AND    TH_ACNT_YEAR = (SELECT CAY_ACNT_YEAR FROM FM_COMP_ACNT_YEAR
                       WHERE  CAY_COMP_CODE = TH_COMP_CODE
                       AND    CAY_PREV_CURR_NEXT = 'C');
INSERT INTO  FT_PRV_TRANS_HEADER
SELECT FT_UNPOSTED_TRANS_HEADER.*
FROM   FT_UNPOSTED_TRANS_HEADER, FM_TRANSACTION
WHERE  TRAN_CODE = TH_TRAN_CODE
AND    TRAN_MODE_POSTING = 'O'
AND    TH_ACNT_YEAR = (SELECT CAY_ACNT_YEAR FROM FM_COMP_ACNT_YEAR
                       WHERE  CAY_COMP_CODE = TH_COMP_CODE
                       AND    CAY_PREV_CURR_NEXT = 'P');
DELETE FROM FT_UNPOSTED_TRANS_HEADER
WHERE  TH_TRAN_CODE IN
       (SELECT TRAN_CODE
        FROM   FM_TRANSACTION
        WHERE  TRAN_MODE_POSTING = 'O');
END;

/
CREATE OR REPLACE procedure upd_ft_cur_trans_detail
is
m_th_tran_code varchar2(3);
m_th_doc_no number ;
m_th_desc varchar2(2000) ;
ctr number := 0;
cursor c1 is
	select th_tran_code, th_doc_no,th_desc
	from ft_cur_trans_header
	where (th_tran_code, th_doc_no) in
        (select drcr_txn_code, drcr_doc_no
         from ps_Drcr) ;
cursor c2 (m_th_tran_code in varchar2, m_th_doc_no in number)is
	select td_tran_code, td_doc_no
	from ft_cur_trans_detail
	where td_tran_code = m_th_tran_code
	and   td_doc_no =  m_th_doc_no
	and   td_sub_acnt_code is not null
        for update of td_desc ;
begin
  for c1_rec in c1
  loop
     m_th_tran_code := c1_rec.th_tran_code ;
     m_th_doc_no := c1_rec.th_doc_no ;
     m_th_desc := c1_rec.th_desc ;
     for c2_rec in c2 (m_th_tran_code, m_th_doc_no)
     loop
        update ft_cur_trans_detail set td_desc = m_th_desc
        where current of c2 ;
     ctr := ctr + 1;
     end loop ;
  end loop;
  commit;
  dbms_output.put_line(to_char(ctr) || ' rows committed');
end;
/

